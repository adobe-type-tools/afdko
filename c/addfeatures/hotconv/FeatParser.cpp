
// Generated from FeatParser.g4 by ANTLR 4.13.1


#include "FeatParserVisitor.h"

#include "FeatParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct FeatParserStaticData final {
  FeatParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FeatParserStaticData(const FeatParserStaticData&) = delete;
  FeatParserStaticData(FeatParserStaticData&&) = delete;
  FeatParserStaticData& operator=(const FeatParserStaticData&) = delete;
  FeatParserStaticData& operator=(FeatParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag featparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
FeatParserStaticData *featparserParserStaticData = nullptr;

void featparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (featparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(featparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<FeatParserStaticData>(
    std::vector<std::string>{
      "file", "topLevelStatement", "include", "glyphClassAssign", "langsysAssign", 
      "mark_statement", "anchorDef", "valueRecordDef", "locationDef", "featureBlock", 
      "tableBlock", "anonBlock", "lookupBlockTopLevel", "featureStatement", 
      "lookupBlockOrUse", "cvParameterBlock", "cvParameterStatement", "cvParameter", 
      "statement", "featureUse", "scriptAssign", "langAssign", "lookupflagAssign", 
      "lookupflagElement", "ignoreSubOrPos", "substitute", "position", "valuePattern", 
      "valueRecord", "valueLiteral", "singleValueLiteral", "parenLocationValue", 
      "locationValueLiteral", "locationMultiValueLiteral", "locationSpecifier", 
      "locationLiteral", "axisLocationLiteral", "cursiveElement", "baseToMarkElement", 
      "ligatureMarkElement", "parameters", "sizemenuname", "featureNames", 
      "subtable", "table_BASE", "baseStatement", "axisTags", "axisScripts", 
      "baseScript", "table_GDEF", "gdefStatement", "gdefGlyphClass", "gdefAttach", 
      "gdefLigCaretPos", "gdefLigCaretIndex", "table_head", "headStatement", 
      "head", "table_hhea", "hheaStatement", "hhea", "table_vhea", "vheaStatement", 
      "vhea", "table_name", "nameStatement", "nameID", "table_OS_2", "os_2Statement", 
      "os_2", "table_STAT", "statStatement", "designAxis", "axisValue", 
      "axisValueStatement", "axisValueLocation", "axisValueFlags", "elidedFallbackName", 
      "nameEntryStatement", "elidedFallbackNameID", "nameEntry", "table_vmtx", 
      "vmtxStatement", "vmtx", "anchor", "lookupPattern", "lookupPatternElement", 
      "pattern", "patternElement", "glyphClassOptional", "glyphClass", "gcLiteral", 
      "gcLiteralElement", "glyph", "glyphName", "label", "tag", "fixedNum", 
      "genNum", "featureFile", "statementFile", "cvStatementFile", "baseFile", 
      "headFile", "hheaFile", "vheaFile", "gdefFile", "nameFile", "vmtxFile", 
      "os_2File", "statFile", "axisValueFile", "nameEntryFile", "subtok", 
      "revtok", "anontok", "enumtok", "postok", "markligtok"
    },
    std::vector<std::string>{
      "", "'anon'", "'anonymous'", "", "", "'include'", "'feature'", "'table'", 
      "'script'", "'language'", "'languagesystem'", "'subtable'", "'lookup'", 
      "'lookupflag'", "'.notdef'", "'RightToLeft'", "'IgnoreBaseGlyphs'", 
      "'IgnoreLigatures'", "'IgnoreMarks'", "'UseMarkFilteringSet'", "'MarkAttachmentType'", 
      "'excludeDFLT'", "'includeDFLT'", "'exclude_dflt'", "'include_dflt'", 
      "'useExtension'", "'<'", "'>'", "'enumerate'", "'enum'", "'except'", 
      "'ignore'", "'substitute'", "'sub'", "'reversesub'", "'rsub'", "'by'", 
      "'from'", "'position'", "'pos'", "'parameters'", "'featureNames'", 
      "'cvParameters'", "'FeatUILabelNameID'", "'FeatUITooltipTextNameID'", 
      "'SampleTextNameID'", "'ParamUILabelNameID'", "'Character'", "'sizemenuname'", 
      "'contourpoint'", "'anchor'", "'anchorDef'", "'valueRecordDef'", "'locationDef'", 
      "'mark'", "'markClass'", "'cursive'", "'base'", "'ligature'", "'lig'", 
      "'ligComponent'", "'NULL'", "'BASE'", "'HorizAxis.BaseTagList'", "'VertAxis.BaseTagList'", 
      "'HorizAxis.BaseScriptList'", "'VertAxis.BaseScriptList'", "'GDEF'", 
      "'GlyphClassDef'", "'Attach'", "'LigatureCaretByPos'", "'LigatureCaretByIndex'", 
      "'head'", "'FontRevision'", "'hhea'", "'Ascender'", "'Descender'", 
      "'LineGap'", "'CaretOffset'", "'name'", "'nameid'", "'OS/2'", "'FSType'", 
      "'fsType'", "'LowerOpSize'", "'UpperOpSize'", "'Panose'", "'TypoAscender'", 
      "'TypoDescender'", "'TypoLineGap'", "'winAscent'", "'winDescent'", 
      "'XHeight'", "'CapHeight'", "'WeightClass'", "'WidthClass'", "'Vendor'", 
      "'UnicodeRange'", "'CodePageRange'", "'FamilyClass'", "'STAT'", "'ElidedFallbackName'", 
      "'ElidedFallbackNameID'", "'DesignAxis'", "'AxisValue'", "'flag'", 
      "'location'", "'ElidableAxisValueName'", "'OlderSiblingFontAttribute'", 
      "'vhea'", "'VertTypoAscender'", "'VertTypoDescender'", "'VertTypoLineGap'", 
      "'vmtx'", "'VertOriginY'", "'VertAdvanceY'", "", "'}'", "'['", "']'", 
      "", "", "'-'", "';'", "'='", "'''", "','", "':'"
    },
    std::vector<std::string>{
      "", "ANON", "ANON_v", "COMMENT", "WHITESPACE", "INCLUDE", "FEATURE", 
      "TABLE", "SCRIPT", "LANGUAGE", "LANGSYS", "SUBTABLE", "LOOKUP", "LOOKUPFLAG", 
      "NOTDEF", "RIGHT_TO_LEFT", "IGNORE_BASE_GLYPHS", "IGNORE_LIGATURES", 
      "IGNORE_MARKS", "USE_MARK_FILTERING_SET", "MARK_ATTACHMENT_TYPE", 
      "EXCLUDE_DFLT", "INCLUDE_DFLT", "EXCLUDE_dflt", "INCLUDE_dflt", "USE_EXTENSION", 
      "BEGINVALUE", "ENDVALUE", "ENUMERATE", "ENUMERATE_v", "EXCEPT", "IGNORE", 
      "SUBSTITUTE", "SUBSTITUTE_v", "REVERSE", "REVERSE_v", "BY", "FROM", 
      "POSITION", "POSITION_v", "PARAMETERS", "FEATURE_NAMES", "CV_PARAMETERS", 
      "CV_UI_LABEL", "CV_TOOLTIP", "CV_SAMPLE_TEXT", "CV_PARAM_LABEL", "CV_CHARACTER", 
      "SIZEMENUNAME", "CONTOURPOINT", "ANCHOR", "ANCHOR_DEF", "VALUE_RECORD_DEF", 
      "LOCATION_DEF", "MARK", "MARK_CLASS", "CURSIVE", "MARKBASE", "MARKLIG", 
      "MARKLIG_v", "LIG_COMPONENT", "KNULL", "BASE", "HA_BTL", "VA_BTL", 
      "HA_BSL", "VA_BSL", "GDEF", "GLYPH_CLASS_DEF", "ATTACH", "LIG_CARET_BY_POS", 
      "LIG_CARET_BY_IDX", "HEAD", "FONT_REVISION", "HHEA", "ASCENDER", "DESCENDER", 
      "LINE_GAP", "CARET_OFFSET", "NAME", "NAMEID", "OS_2", "FS_TYPE", "FS_TYPE_v", 
      "OS2_LOWER_OP_SIZE", "OS2_UPPER_OP_SIZE", "PANOSE", "TYPO_ASCENDER", 
      "TYPO_DESCENDER", "TYPO_LINE_GAP", "WIN_ASCENT", "WIN_DESCENT", "X_HEIGHT", 
      "CAP_HEIGHT", "WEIGHT_CLASS", "WIDTH_CLASS", "VENDOR", "UNICODE_RANGE", 
      "CODE_PAGE_RANGE", "FAMILY_CLASS", "STAT", "ELIDED_FALLBACK_NAME", 
      "ELIDED_FALLBACK_NAME_ID", "DESIGN_AXIS", "AXIS_VALUE", "FLAG", "LOCATION", 
      "AXIS_EAVN", "AXIS_OSFA", "VHEA", "VERT_TYPO_ASCENDER", "VERT_TYPO_DESCENDER", 
      "VERT_TYPO_LINE_GAP", "VMTX", "VERT_ORIGIN_Y", "VERT_ADVANCE_Y", "LCBRACE", 
      "RCBRACE", "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "HYPHEN", "SEMI", 
      "EQUALS", "MARKER", "COMMA", "COLON", "STRVAL", "GCLASS", "AXISUNIT", 
      "CID", "ESCGNAME", "NAMELABEL", "EXTNAME", "POINTNUM", "NUMEXT", "NUMOCT", 
      "NUM", "A_WHITESPACE", "A_LABEL", "A_LBRACE", "A_CLOSE", "A_LINE", 
      "I_WHITESPACE", "I_RPAREN", "IFILE", "I_LPAREN"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,147,1227,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,1,0,1,0,1,0,1,0,1,0,5,0,244,8,0,10,0,12,
  	0,247,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,258,8,1,1,1,1,1,1,2,
  	1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,3,5,278,8,
  	5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,288,8,6,1,6,1,6,1,7,1,7,1,7,1,7,
  	1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,303,8,9,1,9,1,9,4,9,307,8,9,11,9,12,9,
  	308,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
  	3,10,325,8,10,1,11,1,11,1,11,1,11,5,11,331,8,11,10,11,12,11,334,9,11,
  	1,11,1,11,1,12,1,12,1,12,3,12,341,8,12,1,12,1,12,4,12,345,8,12,11,12,
  	12,12,346,1,12,1,12,1,12,1,12,1,13,1,13,1,13,3,13,356,8,13,1,14,1,14,
  	1,14,3,14,361,8,14,1,14,1,14,4,14,365,8,14,11,14,12,14,366,1,14,1,14,
  	1,14,3,14,372,8,14,1,14,1,14,1,15,1,15,1,15,5,15,379,8,15,10,15,12,15,
  	382,9,15,1,15,1,15,1,15,1,16,1,16,3,16,389,8,16,1,16,1,16,1,17,1,17,1,
  	17,4,17,396,8,17,11,17,12,17,397,1,17,1,17,1,17,1,17,3,17,404,8,17,1,
  	18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,
  	18,420,8,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,3,
  	21,433,8,21,1,22,1,22,1,22,4,22,438,8,22,11,22,12,22,439,3,22,442,8,22,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,452,8,23,1,24,1,24,1,24,
  	1,24,3,24,458,8,24,1,24,1,24,1,24,5,24,463,8,24,10,24,12,24,466,9,24,
  	1,25,1,25,1,25,1,25,5,25,472,8,25,10,25,12,25,475,9,25,3,25,477,8,25,
  	1,25,1,25,1,25,1,25,1,25,3,25,484,8,25,3,25,486,8,25,1,25,1,25,1,25,1,
  	25,1,25,3,25,493,8,25,3,25,495,8,25,3,25,497,8,25,1,26,3,26,500,8,26,
  	1,26,1,26,3,26,504,8,26,1,26,1,26,5,26,508,8,26,10,26,12,26,511,9,26,
  	1,26,1,26,4,26,515,8,26,11,26,12,26,516,1,26,5,26,520,8,26,10,26,12,26,
  	523,9,26,1,26,1,26,1,26,3,26,528,8,26,1,26,1,26,1,26,4,26,533,8,26,11,
  	26,12,26,534,1,26,3,26,538,8,26,1,26,1,26,1,26,4,26,543,8,26,11,26,12,
  	26,544,1,26,3,26,548,8,26,1,26,1,26,1,26,4,26,553,8,26,11,26,12,26,554,
  	1,26,3,26,558,8,26,3,26,560,8,26,1,27,1,27,3,27,564,8,27,1,28,1,28,1,
  	28,1,28,1,28,3,28,571,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,4,29,583,8,29,11,29,12,29,584,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,3,29,596,8,29,1,30,1,30,3,30,600,8,30,1,31,1,31,4,31,604,
  	8,31,11,31,12,31,605,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,34,1,34,3,34,625,8,34,1,35,1,35,1,35,5,35,
  	630,8,35,10,35,12,35,633,9,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
  	1,37,1,38,1,38,1,38,1,38,3,38,648,8,38,1,39,1,39,1,39,3,39,653,8,39,1,
  	39,3,39,656,8,39,1,39,3,39,659,8,39,1,40,1,40,4,40,663,8,40,11,40,12,
  	40,664,1,41,1,41,1,41,1,41,1,41,3,41,672,8,41,3,41,674,8,41,1,41,1,41,
  	1,42,1,42,1,42,4,42,681,8,42,11,42,12,42,682,1,42,1,42,1,43,1,43,1,44,
  	1,44,1,44,4,44,692,8,44,11,44,12,44,693,1,44,1,44,1,44,1,44,1,45,1,45,
  	1,45,3,45,703,8,45,1,45,1,45,1,46,1,46,4,46,709,8,46,11,46,12,46,710,
  	1,47,1,47,1,47,1,47,5,47,717,8,47,10,47,12,47,720,9,47,1,48,1,48,1,48,
  	4,48,725,8,48,11,48,12,48,726,1,49,1,49,1,49,4,49,732,8,49,11,49,12,49,
  	733,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,3,50,745,8,50,1,50,1,
  	50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,4,52,761,
  	8,52,11,52,12,52,762,1,53,1,53,1,53,4,53,768,8,53,11,53,12,53,769,1,54,
  	1,54,1,54,4,54,775,8,54,11,54,12,54,776,1,55,1,55,1,55,4,55,782,8,55,
  	11,55,12,55,783,1,55,1,55,1,55,1,55,1,56,1,56,3,56,792,8,56,1,56,1,56,
  	1,57,1,57,1,57,1,58,1,58,1,58,5,58,802,8,58,10,58,12,58,805,9,58,1,58,
  	1,58,1,58,1,58,1,59,1,59,3,59,813,8,59,1,59,1,59,1,60,1,60,1,60,1,61,
  	1,61,1,61,5,61,823,8,61,10,61,12,61,826,9,61,1,61,1,61,1,61,1,61,1,62,
  	1,62,3,62,834,8,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,4,64,844,8,
  	64,11,64,12,64,845,1,64,1,64,1,64,1,64,1,65,1,65,3,65,854,8,65,1,65,1,
  	65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,864,8,66,3,66,866,8,66,1,66,1,66,
  	1,67,1,67,1,67,4,67,873,8,67,11,67,12,67,874,1,67,1,67,1,67,1,67,1,68,
  	1,68,3,68,883,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
  	1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,4,69,
  	908,8,69,11,69,12,69,909,3,69,912,8,69,1,70,1,70,1,70,4,70,917,8,70,11,
  	70,12,70,918,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,3,71,930,8,
  	71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,4,72,939,8,72,11,72,12,72,940,1,
  	72,1,72,1,73,1,73,1,73,4,73,948,8,73,11,73,12,73,949,1,73,1,73,1,74,1,
  	74,1,74,1,74,3,74,958,8,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,3,75,967,
  	8,75,3,75,969,8,75,1,76,1,76,4,76,973,8,76,11,76,12,76,974,1,77,1,77,
  	1,77,4,77,980,8,77,11,77,12,77,981,1,77,1,77,1,78,1,78,3,78,988,8,78,
  	1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,3,80,1000,8,80,3,80,
  	1002,8,80,1,80,1,80,1,81,1,81,1,81,4,81,1009,8,81,11,81,12,81,1010,1,
  	81,1,81,1,81,1,81,1,82,1,82,3,82,1019,8,82,1,82,1,82,1,83,1,83,1,83,1,
  	83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1033,8,84,1,84,1,84,3,84,1037,8,
  	84,1,84,1,84,1,85,4,85,1042,8,85,11,85,12,85,1043,1,86,1,86,1,86,5,86,
  	1049,8,86,10,86,12,86,1052,9,86,1,87,4,87,1055,8,87,11,87,12,87,1056,
  	1,88,1,88,3,88,1061,8,88,1,88,3,88,1064,8,88,1,89,3,89,1067,8,89,1,90,
  	1,90,3,90,1071,8,90,1,91,1,91,4,91,1075,8,91,11,91,12,91,1076,1,91,1,
  	91,1,92,1,92,1,92,3,92,1084,8,92,1,92,3,92,1087,8,92,1,93,1,93,3,93,1091,
  	8,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,5,99,1104,
  	8,99,10,99,12,99,1107,9,99,1,99,1,99,1,100,5,100,1112,8,100,10,100,12,
  	100,1115,9,100,1,100,1,100,1,101,5,101,1120,8,101,10,101,12,101,1123,
  	9,101,1,101,1,101,1,102,5,102,1128,8,102,10,102,12,102,1131,9,102,1,102,
  	1,102,1,103,5,103,1136,8,103,10,103,12,103,1139,9,103,1,103,1,103,1,104,
  	5,104,1144,8,104,10,104,12,104,1147,9,104,1,104,1,104,1,105,5,105,1152,
  	8,105,10,105,12,105,1155,9,105,1,105,1,105,1,106,5,106,1160,8,106,10,
  	106,12,106,1163,9,106,1,106,1,106,1,107,5,107,1168,8,107,10,107,12,107,
  	1171,9,107,1,107,1,107,1,108,5,108,1176,8,108,10,108,12,108,1179,9,108,
  	1,108,1,108,1,109,5,109,1184,8,109,10,109,12,109,1187,9,109,1,109,1,109,
  	1,110,5,110,1192,8,110,10,110,12,110,1195,9,110,1,110,1,110,1,111,5,111,
  	1200,8,111,10,111,12,111,1203,9,111,1,111,1,111,1,112,5,112,1208,8,112,
  	10,112,12,112,1211,9,112,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,
  	115,1,116,1,116,1,117,1,117,1,118,1,118,1,118,0,0,119,0,2,4,6,8,10,12,
  	14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
  	60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
  	106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
  	142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
  	178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
  	214,216,218,220,222,224,226,228,230,232,234,236,0,23,1,0,43,46,1,0,21,
  	24,1,0,36,37,1,0,63,64,1,0,65,66,1,0,75,78,1,0,110,112,1,0,87,93,2,0,
  	82,85,94,95,1,0,97,98,1,0,107,108,1,0,114,115,3,0,14,14,130,130,132,134,
  	3,0,54,54,130,130,133,133,4,0,54,54,128,128,130,130,133,134,2,0,135,135,
  	138,138,1,0,136,138,1,0,32,33,1,0,34,35,1,0,1,2,1,0,28,29,1,0,38,39,1,
  	0,58,59,1288,0,245,1,0,0,0,2,257,1,0,0,0,4,261,1,0,0,0,6,266,1,0,0,0,
  	8,270,1,0,0,0,10,274,1,0,0,0,12,282,1,0,0,0,14,291,1,0,0,0,16,295,1,0,
  	0,0,18,299,1,0,0,0,20,314,1,0,0,0,22,326,1,0,0,0,24,337,1,0,0,0,26,355,
  	1,0,0,0,28,357,1,0,0,0,30,375,1,0,0,0,32,388,1,0,0,0,34,403,1,0,0,0,36,
  	419,1,0,0,0,38,423,1,0,0,0,40,426,1,0,0,0,42,429,1,0,0,0,44,434,1,0,0,
  	0,46,451,1,0,0,0,48,453,1,0,0,0,50,476,1,0,0,0,52,499,1,0,0,0,54,561,
  	1,0,0,0,56,570,1,0,0,0,58,595,1,0,0,0,60,599,1,0,0,0,62,601,1,0,0,0,64,
  	609,1,0,0,0,66,613,1,0,0,0,68,624,1,0,0,0,70,626,1,0,0,0,72,634,1,0,0,
  	0,74,639,1,0,0,0,76,643,1,0,0,0,78,649,1,0,0,0,80,660,1,0,0,0,82,666,
  	1,0,0,0,84,677,1,0,0,0,86,686,1,0,0,0,88,688,1,0,0,0,90,702,1,0,0,0,92,
  	706,1,0,0,0,94,712,1,0,0,0,96,721,1,0,0,0,98,728,1,0,0,0,100,744,1,0,
  	0,0,102,748,1,0,0,0,104,757,1,0,0,0,106,764,1,0,0,0,108,771,1,0,0,0,110,
  	778,1,0,0,0,112,791,1,0,0,0,114,795,1,0,0,0,116,798,1,0,0,0,118,812,1,
  	0,0,0,120,816,1,0,0,0,122,819,1,0,0,0,124,833,1,0,0,0,126,837,1,0,0,0,
  	128,840,1,0,0,0,130,853,1,0,0,0,132,857,1,0,0,0,134,869,1,0,0,0,136,882,
  	1,0,0,0,138,911,1,0,0,0,140,913,1,0,0,0,142,929,1,0,0,0,144,933,1,0,0,
  	0,146,944,1,0,0,0,148,957,1,0,0,0,150,961,1,0,0,0,152,970,1,0,0,0,154,
  	976,1,0,0,0,156,987,1,0,0,0,158,991,1,0,0,0,160,994,1,0,0,0,162,1005,
  	1,0,0,0,164,1018,1,0,0,0,166,1022,1,0,0,0,168,1026,1,0,0,0,170,1041,1,
  	0,0,0,172,1045,1,0,0,0,174,1054,1,0,0,0,176,1060,1,0,0,0,178,1066,1,0,
  	0,0,180,1070,1,0,0,0,182,1072,1,0,0,0,184,1086,1,0,0,0,186,1090,1,0,0,
  	0,188,1092,1,0,0,0,190,1094,1,0,0,0,192,1096,1,0,0,0,194,1098,1,0,0,0,
  	196,1100,1,0,0,0,198,1105,1,0,0,0,200,1113,1,0,0,0,202,1121,1,0,0,0,204,
  	1129,1,0,0,0,206,1137,1,0,0,0,208,1145,1,0,0,0,210,1153,1,0,0,0,212,1161,
  	1,0,0,0,214,1169,1,0,0,0,216,1177,1,0,0,0,218,1185,1,0,0,0,220,1193,1,
  	0,0,0,222,1201,1,0,0,0,224,1209,1,0,0,0,226,1214,1,0,0,0,228,1216,1,0,
  	0,0,230,1218,1,0,0,0,232,1220,1,0,0,0,234,1222,1,0,0,0,236,1224,1,0,0,
  	0,238,244,3,2,1,0,239,244,3,18,9,0,240,244,3,20,10,0,241,244,3,22,11,
  	0,242,244,3,24,12,0,243,238,1,0,0,0,243,239,1,0,0,0,243,240,1,0,0,0,243,
  	241,1,0,0,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,
  	0,0,0,246,248,1,0,0,0,247,245,1,0,0,0,248,249,5,0,0,1,249,1,1,0,0,0,250,
  	258,3,4,2,0,251,258,3,6,3,0,252,258,3,8,4,0,253,258,3,10,5,0,254,258,
  	3,12,6,0,255,258,3,14,7,0,256,258,3,16,8,0,257,250,1,0,0,0,257,251,1,
  	0,0,0,257,252,1,0,0,0,257,253,1,0,0,0,257,254,1,0,0,0,257,255,1,0,0,0,
  	257,256,1,0,0,0,258,259,1,0,0,0,259,260,5,123,0,0,260,3,1,0,0,0,261,262,
  	5,5,0,0,262,263,5,145,0,0,263,264,5,146,0,0,264,265,5,147,0,0,265,5,1,
  	0,0,0,266,267,5,129,0,0,267,268,5,124,0,0,268,269,3,180,90,0,269,7,1,
  	0,0,0,270,271,5,10,0,0,271,272,3,192,96,0,272,273,3,192,96,0,273,9,1,
  	0,0,0,274,277,5,55,0,0,275,278,3,186,93,0,276,278,3,180,90,0,277,275,
  	1,0,0,0,277,276,1,0,0,0,278,279,1,0,0,0,279,280,3,168,84,0,280,281,5,
  	129,0,0,281,11,1,0,0,0,282,283,5,51,0,0,283,284,5,138,0,0,284,287,5,138,
  	0,0,285,286,5,49,0,0,286,288,5,138,0,0,287,285,1,0,0,0,287,288,1,0,0,
  	0,288,289,1,0,0,0,289,290,3,190,95,0,290,13,1,0,0,0,291,292,5,52,0,0,
  	292,293,3,58,29,0,293,294,3,190,95,0,294,15,1,0,0,0,295,296,5,53,0,0,
  	296,297,3,70,35,0,297,298,3,190,95,0,298,17,1,0,0,0,299,300,5,6,0,0,300,
  	302,3,192,96,0,301,303,5,25,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,304,
  	1,0,0,0,304,306,5,116,0,0,305,307,3,26,13,0,306,305,1,0,0,0,307,308,1,
  	0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,5,117,0,
  	0,311,312,3,192,96,0,312,313,5,123,0,0,313,19,1,0,0,0,314,324,5,7,0,0,
  	315,325,3,88,44,0,316,325,3,98,49,0,317,325,3,110,55,0,318,325,3,116,
  	58,0,319,325,3,122,61,0,320,325,3,128,64,0,321,325,3,134,67,0,322,325,
  	3,140,70,0,323,325,3,162,81,0,324,315,1,0,0,0,324,316,1,0,0,0,324,317,
  	1,0,0,0,324,318,1,0,0,0,324,319,1,0,0,0,324,320,1,0,0,0,324,321,1,0,0,
  	0,324,322,1,0,0,0,324,323,1,0,0,0,325,21,1,0,0,0,326,327,3,230,115,0,
  	327,328,5,140,0,0,328,332,5,141,0,0,329,331,5,143,0,0,330,329,1,0,0,0,
  	331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,332,
  	1,0,0,0,335,336,5,142,0,0,336,23,1,0,0,0,337,338,5,12,0,0,338,340,3,190,
  	95,0,339,341,5,25,0,0,340,339,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,
  	342,344,5,116,0,0,343,345,3,36,18,0,344,343,1,0,0,0,345,346,1,0,0,0,346,
  	344,1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,349,5,117,0,0,349,350,
  	3,190,95,0,350,351,5,123,0,0,351,25,1,0,0,0,352,356,3,36,18,0,353,356,
  	3,28,14,0,354,356,3,30,15,0,355,352,1,0,0,0,355,353,1,0,0,0,355,354,1,
  	0,0,0,356,27,1,0,0,0,357,358,5,12,0,0,358,371,3,190,95,0,359,361,5,25,
  	0,0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,1,0,0,0,362,364,5,116,0,0,
  	363,365,3,36,18,0,364,363,1,0,0,0,365,366,1,0,0,0,366,364,1,0,0,0,366,
  	367,1,0,0,0,367,368,1,0,0,0,368,369,5,117,0,0,369,370,3,190,95,0,370,
  	372,1,0,0,0,371,360,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,5,
  	123,0,0,374,29,1,0,0,0,375,376,5,42,0,0,376,380,5,116,0,0,377,379,3,32,
  	16,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,
  	381,383,1,0,0,0,382,380,1,0,0,0,383,384,5,117,0,0,384,385,5,123,0,0,385,
  	31,1,0,0,0,386,389,3,34,17,0,387,389,3,4,2,0,388,386,1,0,0,0,388,387,
  	1,0,0,0,389,390,1,0,0,0,390,391,5,123,0,0,391,33,1,0,0,0,392,393,7,0,
  	0,0,393,395,5,116,0,0,394,396,3,156,78,0,395,394,1,0,0,0,396,397,1,0,
  	0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,117,0,0,
  	400,404,1,0,0,0,401,402,5,47,0,0,402,404,3,196,98,0,403,392,1,0,0,0,403,
  	401,1,0,0,0,404,35,1,0,0,0,405,420,3,38,19,0,406,420,3,40,20,0,407,420,
  	3,42,21,0,408,420,3,44,22,0,409,420,3,6,3,0,410,420,3,48,24,0,411,420,
  	3,50,25,0,412,420,3,10,5,0,413,420,3,52,26,0,414,420,3,80,40,0,415,420,
  	3,82,41,0,416,420,3,84,42,0,417,420,3,86,43,0,418,420,3,4,2,0,419,405,
  	1,0,0,0,419,406,1,0,0,0,419,407,1,0,0,0,419,408,1,0,0,0,419,409,1,0,0,
  	0,419,410,1,0,0,0,419,411,1,0,0,0,419,412,1,0,0,0,419,413,1,0,0,0,419,
  	414,1,0,0,0,419,415,1,0,0,0,419,416,1,0,0,0,419,417,1,0,0,0,419,418,1,
  	0,0,0,420,421,1,0,0,0,421,422,5,123,0,0,422,37,1,0,0,0,423,424,5,6,0,
  	0,424,425,3,192,96,0,425,39,1,0,0,0,426,427,5,8,0,0,427,428,3,192,96,
  	0,428,41,1,0,0,0,429,430,5,9,0,0,430,432,3,192,96,0,431,433,7,1,0,0,432,
  	431,1,0,0,0,432,433,1,0,0,0,433,43,1,0,0,0,434,441,5,13,0,0,435,442,5,
  	138,0,0,436,438,3,46,23,0,437,436,1,0,0,0,438,439,1,0,0,0,439,437,1,0,
  	0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,435,1,0,0,0,441,437,1,0,0,0,442,
  	45,1,0,0,0,443,452,5,15,0,0,444,452,5,16,0,0,445,452,5,17,0,0,446,452,
  	5,18,0,0,447,448,5,20,0,0,448,452,3,180,90,0,449,450,5,19,0,0,450,452,
  	3,180,90,0,451,443,1,0,0,0,451,444,1,0,0,0,451,445,1,0,0,0,451,446,1,
  	0,0,0,451,447,1,0,0,0,451,449,1,0,0,0,452,47,1,0,0,0,453,457,5,31,0,0,
  	454,458,3,226,113,0,455,458,3,228,114,0,456,458,3,234,117,0,457,454,1,
  	0,0,0,457,455,1,0,0,0,457,456,1,0,0,0,458,459,1,0,0,0,459,464,3,170,85,
  	0,460,461,5,126,0,0,461,463,3,170,85,0,462,460,1,0,0,0,463,466,1,0,0,
  	0,464,462,1,0,0,0,464,465,1,0,0,0,465,49,1,0,0,0,466,464,1,0,0,0,467,
  	468,5,30,0,0,468,473,3,170,85,0,469,470,5,126,0,0,470,472,3,170,85,0,
  	471,469,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,477,
  	1,0,0,0,475,473,1,0,0,0,476,467,1,0,0,0,476,477,1,0,0,0,477,496,1,0,0,
  	0,478,479,3,228,114,0,479,485,3,170,85,0,480,483,5,36,0,0,481,484,5,61,
  	0,0,482,484,3,170,85,0,483,481,1,0,0,0,483,482,1,0,0,0,484,486,1,0,0,
  	0,485,480,1,0,0,0,485,486,1,0,0,0,486,497,1,0,0,0,487,488,3,226,113,0,
  	488,494,3,170,85,0,489,492,7,2,0,0,490,493,5,61,0,0,491,493,3,170,85,
  	0,492,490,1,0,0,0,492,491,1,0,0,0,493,495,1,0,0,0,494,489,1,0,0,0,494,
  	495,1,0,0,0,495,497,1,0,0,0,496,478,1,0,0,0,496,487,1,0,0,0,497,51,1,
  	0,0,0,498,500,3,232,116,0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,
  	0,0,501,503,3,234,117,0,502,504,3,174,87,0,503,502,1,0,0,0,503,504,1,
  	0,0,0,504,559,1,0,0,0,505,509,3,56,28,0,506,508,3,54,27,0,507,506,1,0,
  	0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,560,1,0,0,0,511,
  	509,1,0,0,0,512,513,5,12,0,0,513,515,3,190,95,0,514,512,1,0,0,0,515,516,
  	1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,521,1,0,0,0,518,520,3,172,
  	86,0,519,518,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,
  	522,560,1,0,0,0,523,521,1,0,0,0,524,525,5,56,0,0,525,527,3,74,37,0,526,
  	528,3,174,87,0,527,526,1,0,0,0,527,528,1,0,0,0,528,560,1,0,0,0,529,530,
  	5,57,0,0,530,532,3,174,87,0,531,533,3,76,38,0,532,531,1,0,0,0,533,534,
  	1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,536,538,3,174,
  	87,0,537,536,1,0,0,0,537,538,1,0,0,0,538,560,1,0,0,0,539,540,3,236,118,
  	0,540,542,3,174,87,0,541,543,3,78,39,0,542,541,1,0,0,0,543,544,1,0,0,
  	0,544,542,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,548,3,174,87,0,
  	547,546,1,0,0,0,547,548,1,0,0,0,548,560,1,0,0,0,549,550,5,54,0,0,550,
  	552,3,174,87,0,551,553,3,76,38,0,552,551,1,0,0,0,553,554,1,0,0,0,554,
  	552,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,0,556,558,3,174,87,0,557,556,
  	1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,505,1,0,0,0,559,514,1,0,0,
  	0,559,524,1,0,0,0,559,529,1,0,0,0,559,539,1,0,0,0,559,549,1,0,0,0,560,
  	53,1,0,0,0,561,563,3,176,88,0,562,564,3,56,28,0,563,562,1,0,0,0,563,564,
  	1,0,0,0,564,55,1,0,0,0,565,566,5,26,0,0,566,567,3,190,95,0,567,568,5,
  	27,0,0,568,571,1,0,0,0,569,571,3,58,29,0,570,565,1,0,0,0,570,569,1,0,
  	0,0,571,57,1,0,0,0,572,596,5,138,0,0,573,596,3,62,31,0,574,575,5,26,0,
  	0,575,576,5,138,0,0,576,577,5,138,0,0,577,578,5,138,0,0,578,579,5,138,
  	0,0,579,596,5,27,0,0,580,582,5,120,0,0,581,583,3,66,33,0,582,581,1,0,
  	0,0,583,584,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,
  	587,5,121,0,0,587,596,1,0,0,0,588,589,5,26,0,0,589,590,3,62,31,0,590,
  	591,3,62,31,0,591,592,3,62,31,0,592,593,3,62,31,0,593,594,5,27,0,0,594,
  	596,1,0,0,0,595,572,1,0,0,0,595,573,1,0,0,0,595,574,1,0,0,0,595,580,1,
  	0,0,0,595,588,1,0,0,0,596,59,1,0,0,0,597,600,5,138,0,0,598,600,3,62,31,
  	0,599,597,1,0,0,0,599,598,1,0,0,0,600,61,1,0,0,0,601,603,5,120,0,0,602,
  	604,3,64,32,0,603,602,1,0,0,0,604,605,1,0,0,0,605,603,1,0,0,0,605,606,
  	1,0,0,0,606,607,1,0,0,0,607,608,5,121,0,0,608,63,1,0,0,0,609,610,3,68,
  	34,0,610,611,5,127,0,0,611,612,5,138,0,0,612,65,1,0,0,0,613,614,3,68,
  	34,0,614,615,5,127,0,0,615,616,5,26,0,0,616,617,5,138,0,0,617,618,5,138,
  	0,0,618,619,5,138,0,0,619,620,5,138,0,0,620,621,5,27,0,0,621,67,1,0,0,
  	0,622,625,3,70,35,0,623,625,3,190,95,0,624,622,1,0,0,0,624,623,1,0,0,
  	0,625,69,1,0,0,0,626,631,3,72,36,0,627,628,5,126,0,0,628,630,3,72,36,
  	0,629,627,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,
  	71,1,0,0,0,633,631,1,0,0,0,634,635,3,192,96,0,635,636,5,124,0,0,636,637,
  	3,194,97,0,637,638,5,130,0,0,638,73,1,0,0,0,639,640,3,176,88,0,640,641,
  	3,168,84,0,641,642,3,168,84,0,642,75,1,0,0,0,643,644,3,168,84,0,644,645,
  	5,54,0,0,645,647,5,129,0,0,646,648,5,125,0,0,647,646,1,0,0,0,647,648,
  	1,0,0,0,648,77,1,0,0,0,649,652,3,168,84,0,650,651,5,54,0,0,651,653,5,
  	129,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,656,5,60,
  	0,0,655,654,1,0,0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,659,5,125,0,0,
  	658,657,1,0,0,0,658,659,1,0,0,0,659,79,1,0,0,0,660,662,5,40,0,0,661,663,
  	3,194,97,0,662,661,1,0,0,0,663,664,1,0,0,0,664,662,1,0,0,0,664,665,1,
  	0,0,0,665,81,1,0,0,0,666,673,5,48,0,0,667,671,3,196,98,0,668,669,3,196,
  	98,0,669,670,3,196,98,0,670,672,1,0,0,0,671,668,1,0,0,0,671,672,1,0,0,
  	0,672,674,1,0,0,0,673,667,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,
  	676,5,128,0,0,676,83,1,0,0,0,677,678,5,41,0,0,678,680,5,116,0,0,679,681,
  	3,156,78,0,680,679,1,0,0,0,681,682,1,0,0,0,682,680,1,0,0,0,682,683,1,
  	0,0,0,683,684,1,0,0,0,684,685,5,117,0,0,685,85,1,0,0,0,686,687,5,11,0,
  	0,687,87,1,0,0,0,688,689,5,62,0,0,689,691,5,116,0,0,690,692,3,90,45,0,
  	691,690,1,0,0,0,692,693,1,0,0,0,693,691,1,0,0,0,693,694,1,0,0,0,694,695,
  	1,0,0,0,695,696,5,117,0,0,696,697,5,62,0,0,697,698,5,123,0,0,698,89,1,
  	0,0,0,699,703,3,92,46,0,700,703,3,94,47,0,701,703,3,4,2,0,702,699,1,0,
  	0,0,702,700,1,0,0,0,702,701,1,0,0,0,703,704,1,0,0,0,704,705,5,123,0,0,
  	705,91,1,0,0,0,706,708,7,3,0,0,707,709,3,192,96,0,708,707,1,0,0,0,709,
  	710,1,0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,93,1,0,0,0,712,713,7,
  	4,0,0,713,718,3,96,48,0,714,715,5,126,0,0,715,717,3,96,48,0,716,714,1,
  	0,0,0,717,720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,95,1,0,0,0,
  	720,718,1,0,0,0,721,722,3,192,96,0,722,724,3,192,96,0,723,725,5,138,0,
  	0,724,723,1,0,0,0,725,726,1,0,0,0,726,724,1,0,0,0,726,727,1,0,0,0,727,
  	97,1,0,0,0,728,729,5,67,0,0,729,731,5,116,0,0,730,732,3,100,50,0,731,
  	730,1,0,0,0,732,733,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,735,1,
  	0,0,0,735,736,5,117,0,0,736,737,5,67,0,0,737,738,5,123,0,0,738,99,1,0,
  	0,0,739,745,3,102,51,0,740,745,3,104,52,0,741,745,3,106,53,0,742,745,
  	3,108,54,0,743,745,3,4,2,0,744,739,1,0,0,0,744,740,1,0,0,0,744,741,1,
  	0,0,0,744,742,1,0,0,0,744,743,1,0,0,0,745,746,1,0,0,0,746,747,5,123,0,
  	0,747,101,1,0,0,0,748,749,5,68,0,0,749,750,3,178,89,0,750,751,5,126,0,
  	0,751,752,3,178,89,0,752,753,5,126,0,0,753,754,3,178,89,0,754,755,5,126,
  	0,0,755,756,3,178,89,0,756,103,1,0,0,0,757,758,5,69,0,0,758,760,3,170,
  	85,0,759,761,5,138,0,0,760,759,1,0,0,0,761,762,1,0,0,0,762,760,1,0,0,
  	0,762,763,1,0,0,0,763,105,1,0,0,0,764,765,5,70,0,0,765,767,3,170,85,0,
  	766,768,3,60,30,0,767,766,1,0,0,0,768,769,1,0,0,0,769,767,1,0,0,0,769,
  	770,1,0,0,0,770,107,1,0,0,0,771,772,5,71,0,0,772,774,3,170,85,0,773,775,
  	5,138,0,0,774,773,1,0,0,0,775,776,1,0,0,0,776,774,1,0,0,0,776,777,1,0,
  	0,0,777,109,1,0,0,0,778,779,5,72,0,0,779,781,5,116,0,0,780,782,3,112,
  	56,0,781,780,1,0,0,0,782,783,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,
  	784,785,1,0,0,0,785,786,5,117,0,0,786,787,5,72,0,0,787,788,5,123,0,0,
  	788,111,1,0,0,0,789,792,3,114,57,0,790,792,3,4,2,0,791,789,1,0,0,0,791,
  	790,1,0,0,0,792,793,1,0,0,0,793,794,5,123,0,0,794,113,1,0,0,0,795,796,
  	5,73,0,0,796,797,5,135,0,0,797,115,1,0,0,0,798,799,5,74,0,0,799,803,5,
  	116,0,0,800,802,3,118,59,0,801,800,1,0,0,0,802,805,1,0,0,0,803,801,1,
  	0,0,0,803,804,1,0,0,0,804,806,1,0,0,0,805,803,1,0,0,0,806,807,5,117,0,
  	0,807,808,5,74,0,0,808,809,5,123,0,0,809,117,1,0,0,0,810,813,3,120,60,
  	0,811,813,3,4,2,0,812,810,1,0,0,0,812,811,1,0,0,0,813,814,1,0,0,0,814,
  	815,5,123,0,0,815,119,1,0,0,0,816,817,7,5,0,0,817,818,5,138,0,0,818,121,
  	1,0,0,0,819,820,5,109,0,0,820,824,5,116,0,0,821,823,3,124,62,0,822,821,
  	1,0,0,0,823,826,1,0,0,0,824,822,1,0,0,0,824,825,1,0,0,0,825,827,1,0,0,
  	0,826,824,1,0,0,0,827,828,5,117,0,0,828,829,5,109,0,0,829,830,5,123,0,
  	0,830,123,1,0,0,0,831,834,3,126,63,0,832,834,3,4,2,0,833,831,1,0,0,0,
  	833,832,1,0,0,0,834,835,1,0,0,0,835,836,5,123,0,0,836,125,1,0,0,0,837,
  	838,7,6,0,0,838,839,5,138,0,0,839,127,1,0,0,0,840,841,5,79,0,0,841,843,
  	5,116,0,0,842,844,3,130,65,0,843,842,1,0,0,0,844,845,1,0,0,0,845,843,
  	1,0,0,0,845,846,1,0,0,0,846,847,1,0,0,0,847,848,5,117,0,0,848,849,5,79,
  	0,0,849,850,5,123,0,0,850,129,1,0,0,0,851,854,3,132,66,0,852,854,3,4,
  	2,0,853,851,1,0,0,0,853,852,1,0,0,0,854,855,1,0,0,0,855,856,5,123,0,0,
  	856,131,1,0,0,0,857,858,5,80,0,0,858,865,3,196,98,0,859,863,3,196,98,
  	0,860,861,3,196,98,0,861,862,3,196,98,0,862,864,1,0,0,0,863,860,1,0,0,
  	0,863,864,1,0,0,0,864,866,1,0,0,0,865,859,1,0,0,0,865,866,1,0,0,0,866,
  	867,1,0,0,0,867,868,5,128,0,0,868,133,1,0,0,0,869,870,5,81,0,0,870,872,
  	5,116,0,0,871,873,3,136,68,0,872,871,1,0,0,0,873,874,1,0,0,0,874,872,
  	1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,877,5,117,0,0,877,878,5,81,
  	0,0,878,879,5,123,0,0,879,135,1,0,0,0,880,883,3,138,69,0,881,883,3,4,
  	2,0,882,880,1,0,0,0,882,881,1,0,0,0,883,884,1,0,0,0,884,885,5,123,0,0,
  	885,137,1,0,0,0,886,887,7,7,0,0,887,912,5,138,0,0,888,889,7,8,0,0,889,
  	912,5,138,0,0,890,891,5,99,0,0,891,912,3,196,98,0,892,893,5,96,0,0,893,
  	912,5,128,0,0,894,895,5,86,0,0,895,896,5,138,0,0,896,897,5,138,0,0,897,
  	898,5,138,0,0,898,899,5,138,0,0,899,900,5,138,0,0,900,901,5,138,0,0,901,
  	902,5,138,0,0,902,903,5,138,0,0,903,904,5,138,0,0,904,912,5,138,0,0,905,
  	907,7,9,0,0,906,908,5,138,0,0,907,906,1,0,0,0,908,909,1,0,0,0,909,907,
  	1,0,0,0,909,910,1,0,0,0,910,912,1,0,0,0,911,886,1,0,0,0,911,888,1,0,0,
  	0,911,890,1,0,0,0,911,892,1,0,0,0,911,894,1,0,0,0,911,905,1,0,0,0,912,
  	139,1,0,0,0,913,914,5,100,0,0,914,916,5,116,0,0,915,917,3,142,71,0,916,
  	915,1,0,0,0,917,918,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,920,1,
  	0,0,0,920,921,5,117,0,0,921,922,5,100,0,0,922,923,5,123,0,0,923,141,1,
  	0,0,0,924,930,3,144,72,0,925,930,3,146,73,0,926,930,3,154,77,0,927,930,
  	3,158,79,0,928,930,3,4,2,0,929,924,1,0,0,0,929,925,1,0,0,0,929,926,1,
  	0,0,0,929,927,1,0,0,0,929,928,1,0,0,0,930,931,1,0,0,0,931,932,5,123,0,
  	0,932,143,1,0,0,0,933,934,5,103,0,0,934,935,3,192,96,0,935,936,5,138,
  	0,0,936,938,5,116,0,0,937,939,3,156,78,0,938,937,1,0,0,0,939,940,1,0,
  	0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,943,5,117,0,0,
  	943,145,1,0,0,0,944,945,5,104,0,0,945,947,5,116,0,0,946,948,3,148,74,
  	0,947,946,1,0,0,0,948,949,1,0,0,0,949,947,1,0,0,0,949,950,1,0,0,0,950,
  	951,1,0,0,0,951,952,5,117,0,0,952,147,1,0,0,0,953,958,3,160,80,0,954,
  	958,3,150,75,0,955,958,3,152,76,0,956,958,3,4,2,0,957,953,1,0,0,0,957,
  	954,1,0,0,0,957,955,1,0,0,0,957,956,1,0,0,0,958,959,1,0,0,0,959,960,5,
  	123,0,0,960,149,1,0,0,0,961,962,5,106,0,0,962,963,3,192,96,0,963,968,
  	3,194,97,0,964,966,3,194,97,0,965,967,3,194,97,0,966,965,1,0,0,0,966,
  	967,1,0,0,0,967,969,1,0,0,0,968,964,1,0,0,0,968,969,1,0,0,0,969,151,1,
  	0,0,0,970,972,5,105,0,0,971,973,7,10,0,0,972,971,1,0,0,0,973,974,1,0,
  	0,0,974,972,1,0,0,0,974,975,1,0,0,0,975,153,1,0,0,0,976,977,5,101,0,0,
  	977,979,5,116,0,0,978,980,3,156,78,0,979,978,1,0,0,0,980,981,1,0,0,0,
  	981,979,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,984,5,117,0,0,984,
  	155,1,0,0,0,985,988,3,160,80,0,986,988,3,4,2,0,987,985,1,0,0,0,987,986,
  	1,0,0,0,988,989,1,0,0,0,989,990,5,123,0,0,990,157,1,0,0,0,991,992,5,102,
  	0,0,992,993,3,196,98,0,993,159,1,0,0,0,994,1001,5,79,0,0,995,999,3,196,
  	98,0,996,997,3,196,98,0,997,998,3,196,98,0,998,1000,1,0,0,0,999,996,1,
  	0,0,0,999,1000,1,0,0,0,1000,1002,1,0,0,0,1001,995,1,0,0,0,1001,1002,1,
  	0,0,0,1002,1003,1,0,0,0,1003,1004,5,128,0,0,1004,161,1,0,0,0,1005,1006,
  	5,113,0,0,1006,1008,5,116,0,0,1007,1009,3,164,82,0,1008,1007,1,0,0,0,
  	1009,1010,1,0,0,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,1012,1,0,0,
  	0,1012,1013,5,117,0,0,1013,1014,5,113,0,0,1014,1015,5,123,0,0,1015,163,
  	1,0,0,0,1016,1019,3,166,83,0,1017,1019,3,4,2,0,1018,1016,1,0,0,0,1018,
  	1017,1,0,0,0,1019,1020,1,0,0,0,1020,1021,5,123,0,0,1021,165,1,0,0,0,1022,
  	1023,7,11,0,0,1023,1024,3,186,93,0,1024,1025,5,138,0,0,1025,167,1,0,0,
  	0,1026,1027,5,26,0,0,1027,1036,5,50,0,0,1028,1029,5,138,0,0,1029,1032,
  	5,138,0,0,1030,1031,5,49,0,0,1031,1033,5,138,0,0,1032,1030,1,0,0,0,1032,
  	1033,1,0,0,0,1033,1037,1,0,0,0,1034,1037,5,61,0,0,1035,1037,3,190,95,
  	0,1036,1028,1,0,0,0,1036,1034,1,0,0,0,1036,1035,1,0,0,0,1037,1038,1,0,
  	0,0,1038,1039,5,27,0,0,1039,169,1,0,0,0,1040,1042,3,172,86,0,1041,1040,
  	1,0,0,0,1042,1043,1,0,0,0,1043,1041,1,0,0,0,1043,1044,1,0,0,0,1044,171,
  	1,0,0,0,1045,1050,3,176,88,0,1046,1047,5,12,0,0,1047,1049,3,190,95,0,
  	1048,1046,1,0,0,0,1049,1052,1,0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,
  	0,1051,173,1,0,0,0,1052,1050,1,0,0,0,1053,1055,3,176,88,0,1054,1053,1,
  	0,0,0,1055,1056,1,0,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,0,1057,175,
  	1,0,0,0,1058,1061,3,180,90,0,1059,1061,3,186,93,0,1060,1058,1,0,0,0,1060,
  	1059,1,0,0,0,1061,1063,1,0,0,0,1062,1064,5,125,0,0,1063,1062,1,0,0,0,
  	1063,1064,1,0,0,0,1064,177,1,0,0,0,1065,1067,3,180,90,0,1066,1065,1,0,
  	0,0,1066,1067,1,0,0,0,1067,179,1,0,0,0,1068,1071,5,129,0,0,1069,1071,
  	3,182,91,0,1070,1068,1,0,0,0,1070,1069,1,0,0,0,1071,181,1,0,0,0,1072,
  	1074,5,118,0,0,1073,1075,3,184,92,0,1074,1073,1,0,0,0,1075,1076,1,0,0,
  	0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,1079,5,119,
  	0,0,1079,183,1,0,0,0,1080,1083,3,186,93,0,1081,1082,5,122,0,0,1082,1084,
  	3,186,93,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,1087,1,0,0,0,1085,
  	1087,5,129,0,0,1086,1080,1,0,0,0,1086,1085,1,0,0,0,1087,185,1,0,0,0,1088,
  	1091,3,188,94,0,1089,1091,5,131,0,0,1090,1088,1,0,0,0,1090,1089,1,0,0,
  	0,1091,187,1,0,0,0,1092,1093,7,12,0,0,1093,189,1,0,0,0,1094,1095,7,13,
  	0,0,1095,191,1,0,0,0,1096,1097,7,14,0,0,1097,193,1,0,0,0,1098,1099,7,
  	15,0,0,1099,195,1,0,0,0,1100,1101,7,16,0,0,1101,197,1,0,0,0,1102,1104,
  	3,26,13,0,1103,1102,1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,1105,
  	1106,1,0,0,0,1106,1108,1,0,0,0,1107,1105,1,0,0,0,1108,1109,5,0,0,1,1109,
  	199,1,0,0,0,1110,1112,3,36,18,0,1111,1110,1,0,0,0,1112,1115,1,0,0,0,1113,
  	1111,1,0,0,0,1113,1114,1,0,0,0,1114,1116,1,0,0,0,1115,1113,1,0,0,0,1116,
  	1117,5,0,0,1,1117,201,1,0,0,0,1118,1120,3,32,16,0,1119,1118,1,0,0,0,1120,
  	1123,1,0,0,0,1121,1119,1,0,0,0,1121,1122,1,0,0,0,1122,1124,1,0,0,0,1123,
  	1121,1,0,0,0,1124,1125,5,0,0,1,1125,203,1,0,0,0,1126,1128,3,90,45,0,1127,
  	1126,1,0,0,0,1128,1131,1,0,0,0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,1130,
  	1132,1,0,0,0,1131,1129,1,0,0,0,1132,1133,5,0,0,1,1133,205,1,0,0,0,1134,
  	1136,3,112,56,0,1135,1134,1,0,0,0,1136,1139,1,0,0,0,1137,1135,1,0,0,0,
  	1137,1138,1,0,0,0,1138,1140,1,0,0,0,1139,1137,1,0,0,0,1140,1141,5,0,0,
  	1,1141,207,1,0,0,0,1142,1144,3,118,59,0,1143,1142,1,0,0,0,1144,1147,1,
  	0,0,0,1145,1143,1,0,0,0,1145,1146,1,0,0,0,1146,1148,1,0,0,0,1147,1145,
  	1,0,0,0,1148,1149,5,0,0,1,1149,209,1,0,0,0,1150,1152,3,124,62,0,1151,
  	1150,1,0,0,0,1152,1155,1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,
  	1156,1,0,0,0,1155,1153,1,0,0,0,1156,1157,5,0,0,1,1157,211,1,0,0,0,1158,
  	1160,3,100,50,0,1159,1158,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,
  	1161,1162,1,0,0,0,1162,1164,1,0,0,0,1163,1161,1,0,0,0,1164,1165,5,0,0,
  	1,1165,213,1,0,0,0,1166,1168,3,130,65,0,1167,1166,1,0,0,0,1168,1171,1,
  	0,0,0,1169,1167,1,0,0,0,1169,1170,1,0,0,0,1170,1172,1,0,0,0,1171,1169,
  	1,0,0,0,1172,1173,5,0,0,1,1173,215,1,0,0,0,1174,1176,3,164,82,0,1175,
  	1174,1,0,0,0,1176,1179,1,0,0,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,
  	1180,1,0,0,0,1179,1177,1,0,0,0,1180,1181,5,0,0,1,1181,217,1,0,0,0,1182,
  	1184,3,136,68,0,1183,1182,1,0,0,0,1184,1187,1,0,0,0,1185,1183,1,0,0,0,
  	1185,1186,1,0,0,0,1186,1188,1,0,0,0,1187,1185,1,0,0,0,1188,1189,5,0,0,
  	1,1189,219,1,0,0,0,1190,1192,3,142,71,0,1191,1190,1,0,0,0,1192,1195,1,
  	0,0,0,1193,1191,1,0,0,0,1193,1194,1,0,0,0,1194,1196,1,0,0,0,1195,1193,
  	1,0,0,0,1196,1197,5,0,0,1,1197,221,1,0,0,0,1198,1200,3,148,74,0,1199,
  	1198,1,0,0,0,1200,1203,1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,
  	1204,1,0,0,0,1203,1201,1,0,0,0,1204,1205,5,0,0,1,1205,223,1,0,0,0,1206,
  	1208,3,156,78,0,1207,1206,1,0,0,0,1208,1211,1,0,0,0,1209,1207,1,0,0,0,
  	1209,1210,1,0,0,0,1210,1212,1,0,0,0,1211,1209,1,0,0,0,1212,1213,5,0,0,
  	1,1213,225,1,0,0,0,1214,1215,7,17,0,0,1215,227,1,0,0,0,1216,1217,7,18,
  	0,0,1217,229,1,0,0,0,1218,1219,7,19,0,0,1219,231,1,0,0,0,1220,1221,7,
  	20,0,0,1221,233,1,0,0,0,1222,1223,7,21,0,0,1223,235,1,0,0,0,1224,1225,
  	7,22,0,0,1225,237,1,0,0,0,127,243,245,257,277,287,302,308,324,332,340,
  	346,355,360,366,371,380,388,397,403,419,432,439,441,451,457,464,473,476,
  	483,485,492,494,496,499,503,509,516,521,527,534,537,544,547,554,557,559,
  	563,570,584,595,599,605,624,631,647,652,655,658,664,671,673,682,693,702,
  	710,718,726,733,744,762,769,776,783,791,803,812,824,833,845,853,863,865,
  	874,882,909,911,918,929,940,949,957,966,968,974,981,987,999,1001,1010,
  	1018,1032,1036,1043,1050,1056,1060,1063,1066,1070,1076,1083,1086,1090,
  	1105,1113,1121,1129,1137,1145,1153,1161,1169,1177,1185,1193,1201,1209
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  featparserParserStaticData = staticData.release();
}

}

FeatParser::FeatParser(TokenStream *input) : FeatParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

FeatParser::FeatParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  FeatParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *featparserParserStaticData->atn, featparserParserStaticData->decisionToDFA, featparserParserStaticData->sharedContextCache, options);
}

FeatParser::~FeatParser() {
  delete _interpreter;
}

const atn::ATN& FeatParser::getATN() const {
  return *featparserParserStaticData->atn;
}

std::string FeatParser::getGrammarFileName() const {
  return "FeatParser.g4";
}

const std::vector<std::string>& FeatParser::getRuleNames() const {
  return featparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& FeatParser::getVocabulary() const {
  return featparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FeatParser::getSerializedATN() const {
  return featparserParserStaticData->serializedATN;
}


//----------------- FileContext ------------------------------------------------------------------

FeatParser::FileContext::FileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::TopLevelStatementContext *> FeatParser::FileContext::topLevelStatement() {
  return getRuleContexts<FeatParser::TopLevelStatementContext>();
}

FeatParser::TopLevelStatementContext* FeatParser::FileContext::topLevelStatement(size_t i) {
  return getRuleContext<FeatParser::TopLevelStatementContext>(i);
}

std::vector<FeatParser::FeatureBlockContext *> FeatParser::FileContext::featureBlock() {
  return getRuleContexts<FeatParser::FeatureBlockContext>();
}

FeatParser::FeatureBlockContext* FeatParser::FileContext::featureBlock(size_t i) {
  return getRuleContext<FeatParser::FeatureBlockContext>(i);
}

std::vector<FeatParser::TableBlockContext *> FeatParser::FileContext::tableBlock() {
  return getRuleContexts<FeatParser::TableBlockContext>();
}

FeatParser::TableBlockContext* FeatParser::FileContext::tableBlock(size_t i) {
  return getRuleContext<FeatParser::TableBlockContext>(i);
}

std::vector<FeatParser::AnonBlockContext *> FeatParser::FileContext::anonBlock() {
  return getRuleContexts<FeatParser::AnonBlockContext>();
}

FeatParser::AnonBlockContext* FeatParser::FileContext::anonBlock(size_t i) {
  return getRuleContext<FeatParser::AnonBlockContext>(i);
}

std::vector<FeatParser::LookupBlockTopLevelContext *> FeatParser::FileContext::lookupBlockTopLevel() {
  return getRuleContexts<FeatParser::LookupBlockTopLevelContext>();
}

FeatParser::LookupBlockTopLevelContext* FeatParser::FileContext::lookupBlockTopLevel(size_t i) {
  return getRuleContext<FeatParser::LookupBlockTopLevelContext>(i);
}


size_t FeatParser::FileContext::getRuleIndex() const {
  return FeatParser::RuleFile;
}


std::any FeatParser::FileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FileContext* FeatParser::file() {
  FileContext *_localctx = _tracker.createInstance<FileContext>(_ctx, getState());
  enterRule(_localctx, 0, FeatParser::RuleFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(245);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 51791395714766054) != 0) || _la == FeatParser::GCLASS) {
      setState(243);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FeatParser::INCLUDE:
        case FeatParser::LANGSYS:
        case FeatParser::ANCHOR_DEF:
        case FeatParser::VALUE_RECORD_DEF:
        case FeatParser::LOCATION_DEF:
        case FeatParser::MARK_CLASS:
        case FeatParser::GCLASS: {
          setState(238);
          topLevelStatement();
          break;
        }

        case FeatParser::FEATURE: {
          setState(239);
          featureBlock();
          break;
        }

        case FeatParser::TABLE: {
          setState(240);
          tableBlock();
          break;
        }

        case FeatParser::ANON:
        case FeatParser::ANON_v: {
          setState(241);
          anonBlock();
          break;
        }

        case FeatParser::LOOKUP: {
          setState(242);
          lookupBlockTopLevel();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(247);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(248);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopLevelStatementContext ------------------------------------------------------------------

FeatParser::TopLevelStatementContext::TopLevelStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::TopLevelStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::IncludeContext* FeatParser::TopLevelStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}

FeatParser::GlyphClassAssignContext* FeatParser::TopLevelStatementContext::glyphClassAssign() {
  return getRuleContext<FeatParser::GlyphClassAssignContext>(0);
}

FeatParser::LangsysAssignContext* FeatParser::TopLevelStatementContext::langsysAssign() {
  return getRuleContext<FeatParser::LangsysAssignContext>(0);
}

FeatParser::Mark_statementContext* FeatParser::TopLevelStatementContext::mark_statement() {
  return getRuleContext<FeatParser::Mark_statementContext>(0);
}

FeatParser::AnchorDefContext* FeatParser::TopLevelStatementContext::anchorDef() {
  return getRuleContext<FeatParser::AnchorDefContext>(0);
}

FeatParser::ValueRecordDefContext* FeatParser::TopLevelStatementContext::valueRecordDef() {
  return getRuleContext<FeatParser::ValueRecordDefContext>(0);
}

FeatParser::LocationDefContext* FeatParser::TopLevelStatementContext::locationDef() {
  return getRuleContext<FeatParser::LocationDefContext>(0);
}


size_t FeatParser::TopLevelStatementContext::getRuleIndex() const {
  return FeatParser::RuleTopLevelStatement;
}


std::any FeatParser::TopLevelStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTopLevelStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::TopLevelStatementContext* FeatParser::topLevelStatement() {
  TopLevelStatementContext *_localctx = _tracker.createInstance<TopLevelStatementContext>(_ctx, getState());
  enterRule(_localctx, 2, FeatParser::RuleTopLevelStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(257);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::INCLUDE: {
        setState(250);
        include();
        break;
      }

      case FeatParser::GCLASS: {
        setState(251);
        glyphClassAssign();
        break;
      }

      case FeatParser::LANGSYS: {
        setState(252);
        langsysAssign();
        break;
      }

      case FeatParser::MARK_CLASS: {
        setState(253);
        mark_statement();
        break;
      }

      case FeatParser::ANCHOR_DEF: {
        setState(254);
        anchorDef();
        break;
      }

      case FeatParser::VALUE_RECORD_DEF: {
        setState(255);
        valueRecordDef();
        break;
      }

      case FeatParser::LOCATION_DEF: {
        setState(256);
        locationDef();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(259);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IncludeContext ------------------------------------------------------------------

FeatParser::IncludeContext::IncludeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::IncludeContext::INCLUDE() {
  return getToken(FeatParser::INCLUDE, 0);
}

tree::TerminalNode* FeatParser::IncludeContext::I_RPAREN() {
  return getToken(FeatParser::I_RPAREN, 0);
}

tree::TerminalNode* FeatParser::IncludeContext::IFILE() {
  return getToken(FeatParser::IFILE, 0);
}

tree::TerminalNode* FeatParser::IncludeContext::I_LPAREN() {
  return getToken(FeatParser::I_LPAREN, 0);
}


size_t FeatParser::IncludeContext::getRuleIndex() const {
  return FeatParser::RuleInclude;
}


std::any FeatParser::IncludeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitInclude(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::IncludeContext* FeatParser::include() {
  IncludeContext *_localctx = _tracker.createInstance<IncludeContext>(_ctx, getState());
  enterRule(_localctx, 4, FeatParser::RuleInclude);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(261);
    match(FeatParser::INCLUDE);
    setState(262);
    match(FeatParser::I_RPAREN);
    setState(263);
    match(FeatParser::IFILE);
    setState(264);
    match(FeatParser::I_LPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlyphClassAssignContext ------------------------------------------------------------------

FeatParser::GlyphClassAssignContext::GlyphClassAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GlyphClassAssignContext::GCLASS() {
  return getToken(FeatParser::GCLASS, 0);
}

tree::TerminalNode* FeatParser::GlyphClassAssignContext::EQUALS() {
  return getToken(FeatParser::EQUALS, 0);
}

FeatParser::GlyphClassContext* FeatParser::GlyphClassAssignContext::glyphClass() {
  return getRuleContext<FeatParser::GlyphClassContext>(0);
}


size_t FeatParser::GlyphClassAssignContext::getRuleIndex() const {
  return FeatParser::RuleGlyphClassAssign;
}


std::any FeatParser::GlyphClassAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGlyphClassAssign(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GlyphClassAssignContext* FeatParser::glyphClassAssign() {
  GlyphClassAssignContext *_localctx = _tracker.createInstance<GlyphClassAssignContext>(_ctx, getState());
  enterRule(_localctx, 6, FeatParser::RuleGlyphClassAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(266);
    match(FeatParser::GCLASS);
    setState(267);
    match(FeatParser::EQUALS);
    setState(268);
    glyphClass();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LangsysAssignContext ------------------------------------------------------------------

FeatParser::LangsysAssignContext::LangsysAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LangsysAssignContext::LANGSYS() {
  return getToken(FeatParser::LANGSYS, 0);
}

std::vector<FeatParser::TagContext *> FeatParser::LangsysAssignContext::tag() {
  return getRuleContexts<FeatParser::TagContext>();
}

FeatParser::TagContext* FeatParser::LangsysAssignContext::tag(size_t i) {
  return getRuleContext<FeatParser::TagContext>(i);
}


size_t FeatParser::LangsysAssignContext::getRuleIndex() const {
  return FeatParser::RuleLangsysAssign;
}


std::any FeatParser::LangsysAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLangsysAssign(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LangsysAssignContext* FeatParser::langsysAssign() {
  LangsysAssignContext *_localctx = _tracker.createInstance<LangsysAssignContext>(_ctx, getState());
  enterRule(_localctx, 8, FeatParser::RuleLangsysAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(270);
    match(FeatParser::LANGSYS);
    setState(271);
    antlrcpp::downCast<LangsysAssignContext *>(_localctx)->script = tag();
    setState(272);
    antlrcpp::downCast<LangsysAssignContext *>(_localctx)->lang = tag();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mark_statementContext ------------------------------------------------------------------

FeatParser::Mark_statementContext::Mark_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::Mark_statementContext::MARK_CLASS() {
  return getToken(FeatParser::MARK_CLASS, 0);
}

FeatParser::AnchorContext* FeatParser::Mark_statementContext::anchor() {
  return getRuleContext<FeatParser::AnchorContext>(0);
}

tree::TerminalNode* FeatParser::Mark_statementContext::GCLASS() {
  return getToken(FeatParser::GCLASS, 0);
}

FeatParser::GlyphContext* FeatParser::Mark_statementContext::glyph() {
  return getRuleContext<FeatParser::GlyphContext>(0);
}

FeatParser::GlyphClassContext* FeatParser::Mark_statementContext::glyphClass() {
  return getRuleContext<FeatParser::GlyphClassContext>(0);
}


size_t FeatParser::Mark_statementContext::getRuleIndex() const {
  return FeatParser::RuleMark_statement;
}


std::any FeatParser::Mark_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitMark_statement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Mark_statementContext* FeatParser::mark_statement() {
  Mark_statementContext *_localctx = _tracker.createInstance<Mark_statementContext>(_ctx, getState());
  enterRule(_localctx, 10, FeatParser::RuleMark_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(274);
    match(FeatParser::MARK_CLASS);
    setState(277);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NOTDEF:
      case FeatParser::AXISUNIT:
      case FeatParser::CID:
      case FeatParser::ESCGNAME:
      case FeatParser::NAMELABEL:
      case FeatParser::EXTNAME: {
        setState(275);
        glyph();
        break;
      }

      case FeatParser::LBRACKET:
      case FeatParser::GCLASS: {
        setState(276);
        glyphClass();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(279);
    anchor();
    setState(280);
    match(FeatParser::GCLASS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnchorDefContext ------------------------------------------------------------------

FeatParser::AnchorDefContext::AnchorDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AnchorDefContext::ANCHOR_DEF() {
  return getToken(FeatParser::ANCHOR_DEF, 0);
}

std::vector<tree::TerminalNode *> FeatParser::AnchorDefContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::AnchorDefContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}

FeatParser::LabelContext* FeatParser::AnchorDefContext::label() {
  return getRuleContext<FeatParser::LabelContext>(0);
}

tree::TerminalNode* FeatParser::AnchorDefContext::CONTOURPOINT() {
  return getToken(FeatParser::CONTOURPOINT, 0);
}


size_t FeatParser::AnchorDefContext::getRuleIndex() const {
  return FeatParser::RuleAnchorDef;
}


std::any FeatParser::AnchorDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnchorDef(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnchorDefContext* FeatParser::anchorDef() {
  AnchorDefContext *_localctx = _tracker.createInstance<AnchorDefContext>(_ctx, getState());
  enterRule(_localctx, 12, FeatParser::RuleAnchorDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(282);
    match(FeatParser::ANCHOR_DEF);
    setState(283);
    antlrcpp::downCast<AnchorDefContext *>(_localctx)->xval = match(FeatParser::NUM);
    setState(284);
    antlrcpp::downCast<AnchorDefContext *>(_localctx)->yval = match(FeatParser::NUM);
    setState(287);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::CONTOURPOINT) {
      setState(285);
      match(FeatParser::CONTOURPOINT);
      setState(286);
      antlrcpp::downCast<AnchorDefContext *>(_localctx)->cp = match(FeatParser::NUM);
    }
    setState(289);
    antlrcpp::downCast<AnchorDefContext *>(_localctx)->name = label();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueRecordDefContext ------------------------------------------------------------------

FeatParser::ValueRecordDefContext::ValueRecordDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ValueRecordDefContext::VALUE_RECORD_DEF() {
  return getToken(FeatParser::VALUE_RECORD_DEF, 0);
}

FeatParser::ValueLiteralContext* FeatParser::ValueRecordDefContext::valueLiteral() {
  return getRuleContext<FeatParser::ValueLiteralContext>(0);
}

FeatParser::LabelContext* FeatParser::ValueRecordDefContext::label() {
  return getRuleContext<FeatParser::LabelContext>(0);
}


size_t FeatParser::ValueRecordDefContext::getRuleIndex() const {
  return FeatParser::RuleValueRecordDef;
}


std::any FeatParser::ValueRecordDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitValueRecordDef(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ValueRecordDefContext* FeatParser::valueRecordDef() {
  ValueRecordDefContext *_localctx = _tracker.createInstance<ValueRecordDefContext>(_ctx, getState());
  enterRule(_localctx, 14, FeatParser::RuleValueRecordDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(291);
    match(FeatParser::VALUE_RECORD_DEF);
    setState(292);
    valueLiteral();
    setState(293);
    label();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationDefContext ------------------------------------------------------------------

FeatParser::LocationDefContext::LocationDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LocationDefContext::LOCATION_DEF() {
  return getToken(FeatParser::LOCATION_DEF, 0);
}

FeatParser::LocationLiteralContext* FeatParser::LocationDefContext::locationLiteral() {
  return getRuleContext<FeatParser::LocationLiteralContext>(0);
}

FeatParser::LabelContext* FeatParser::LocationDefContext::label() {
  return getRuleContext<FeatParser::LabelContext>(0);
}


size_t FeatParser::LocationDefContext::getRuleIndex() const {
  return FeatParser::RuleLocationDef;
}


std::any FeatParser::LocationDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLocationDef(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LocationDefContext* FeatParser::locationDef() {
  LocationDefContext *_localctx = _tracker.createInstance<LocationDefContext>(_ctx, getState());
  enterRule(_localctx, 16, FeatParser::RuleLocationDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(295);
    match(FeatParser::LOCATION_DEF);
    setState(296);
    locationLiteral();
    setState(297);
    label();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureBlockContext ------------------------------------------------------------------

FeatParser::FeatureBlockContext::FeatureBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FeatureBlockContext::FEATURE() {
  return getToken(FeatParser::FEATURE, 0);
}

tree::TerminalNode* FeatParser::FeatureBlockContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::FeatureBlockContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::FeatureBlockContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::TagContext *> FeatParser::FeatureBlockContext::tag() {
  return getRuleContexts<FeatParser::TagContext>();
}

FeatParser::TagContext* FeatParser::FeatureBlockContext::tag(size_t i) {
  return getRuleContext<FeatParser::TagContext>(i);
}

tree::TerminalNode* FeatParser::FeatureBlockContext::USE_EXTENSION() {
  return getToken(FeatParser::USE_EXTENSION, 0);
}

std::vector<FeatParser::FeatureStatementContext *> FeatParser::FeatureBlockContext::featureStatement() {
  return getRuleContexts<FeatParser::FeatureStatementContext>();
}

FeatParser::FeatureStatementContext* FeatParser::FeatureBlockContext::featureStatement(size_t i) {
  return getRuleContext<FeatParser::FeatureStatementContext>(i);
}


size_t FeatParser::FeatureBlockContext::getRuleIndex() const {
  return FeatParser::RuleFeatureBlock;
}


std::any FeatParser::FeatureBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFeatureBlock(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FeatureBlockContext* FeatParser::featureBlock() {
  FeatureBlockContext *_localctx = _tracker.createInstance<FeatureBlockContext>(_ctx, getState());
  enterRule(_localctx, 18, FeatParser::RuleFeatureBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(299);
    match(FeatParser::FEATURE);
    setState(300);
    antlrcpp::downCast<FeatureBlockContext *>(_localctx)->starttag = tag();
    setState(302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::USE_EXTENSION) {
      setState(301);
      match(FeatParser::USE_EXTENSION);
    }
    setState(304);
    match(FeatParser::LCBRACE);
    setState(306); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(305);
      featureStatement();
      setState(308); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 36318861661846368) != 0) || _la == FeatParser::GCLASS);
    setState(310);
    match(FeatParser::RCBRACE);
    setState(311);
    antlrcpp::downCast<FeatureBlockContext *>(_localctx)->endtag = tag();
    setState(312);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableBlockContext ------------------------------------------------------------------

FeatParser::TableBlockContext::TableBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::TableBlockContext::TABLE() {
  return getToken(FeatParser::TABLE, 0);
}

FeatParser::Table_BASEContext* FeatParser::TableBlockContext::table_BASE() {
  return getRuleContext<FeatParser::Table_BASEContext>(0);
}

FeatParser::Table_GDEFContext* FeatParser::TableBlockContext::table_GDEF() {
  return getRuleContext<FeatParser::Table_GDEFContext>(0);
}

FeatParser::Table_headContext* FeatParser::TableBlockContext::table_head() {
  return getRuleContext<FeatParser::Table_headContext>(0);
}

FeatParser::Table_hheaContext* FeatParser::TableBlockContext::table_hhea() {
  return getRuleContext<FeatParser::Table_hheaContext>(0);
}

FeatParser::Table_vheaContext* FeatParser::TableBlockContext::table_vhea() {
  return getRuleContext<FeatParser::Table_vheaContext>(0);
}

FeatParser::Table_nameContext* FeatParser::TableBlockContext::table_name() {
  return getRuleContext<FeatParser::Table_nameContext>(0);
}

FeatParser::Table_OS_2Context* FeatParser::TableBlockContext::table_OS_2() {
  return getRuleContext<FeatParser::Table_OS_2Context>(0);
}

FeatParser::Table_STATContext* FeatParser::TableBlockContext::table_STAT() {
  return getRuleContext<FeatParser::Table_STATContext>(0);
}

FeatParser::Table_vmtxContext* FeatParser::TableBlockContext::table_vmtx() {
  return getRuleContext<FeatParser::Table_vmtxContext>(0);
}


size_t FeatParser::TableBlockContext::getRuleIndex() const {
  return FeatParser::RuleTableBlock;
}


std::any FeatParser::TableBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTableBlock(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::TableBlockContext* FeatParser::tableBlock() {
  TableBlockContext *_localctx = _tracker.createInstance<TableBlockContext>(_ctx, getState());
  enterRule(_localctx, 20, FeatParser::RuleTableBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(314);
    match(FeatParser::TABLE);
    setState(324);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::BASE: {
        setState(315);
        table_BASE();
        break;
      }

      case FeatParser::GDEF: {
        setState(316);
        table_GDEF();
        break;
      }

      case FeatParser::HEAD: {
        setState(317);
        table_head();
        break;
      }

      case FeatParser::HHEA: {
        setState(318);
        table_hhea();
        break;
      }

      case FeatParser::VHEA: {
        setState(319);
        table_vhea();
        break;
      }

      case FeatParser::NAME: {
        setState(320);
        table_name();
        break;
      }

      case FeatParser::OS_2: {
        setState(321);
        table_OS_2();
        break;
      }

      case FeatParser::STAT: {
        setState(322);
        table_STAT();
        break;
      }

      case FeatParser::VMTX: {
        setState(323);
        table_vmtx();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnonBlockContext ------------------------------------------------------------------

FeatParser::AnonBlockContext::AnonBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::AnontokContext* FeatParser::AnonBlockContext::anontok() {
  return getRuleContext<FeatParser::AnontokContext>(0);
}

tree::TerminalNode* FeatParser::AnonBlockContext::A_LABEL() {
  return getToken(FeatParser::A_LABEL, 0);
}

tree::TerminalNode* FeatParser::AnonBlockContext::A_LBRACE() {
  return getToken(FeatParser::A_LBRACE, 0);
}

tree::TerminalNode* FeatParser::AnonBlockContext::A_CLOSE() {
  return getToken(FeatParser::A_CLOSE, 0);
}

std::vector<tree::TerminalNode *> FeatParser::AnonBlockContext::A_LINE() {
  return getTokens(FeatParser::A_LINE);
}

tree::TerminalNode* FeatParser::AnonBlockContext::A_LINE(size_t i) {
  return getToken(FeatParser::A_LINE, i);
}


size_t FeatParser::AnonBlockContext::getRuleIndex() const {
  return FeatParser::RuleAnonBlock;
}


std::any FeatParser::AnonBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnonBlock(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnonBlockContext* FeatParser::anonBlock() {
  AnonBlockContext *_localctx = _tracker.createInstance<AnonBlockContext>(_ctx, getState());
  enterRule(_localctx, 22, FeatParser::RuleAnonBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(326);
    anontok();
    setState(327);
    match(FeatParser::A_LABEL);
    setState(328);
    match(FeatParser::A_LBRACE);
    setState(332);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::A_LINE) {
      setState(329);
      match(FeatParser::A_LINE);
      setState(334);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(335);
    match(FeatParser::A_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupBlockTopLevelContext ------------------------------------------------------------------

FeatParser::LookupBlockTopLevelContext::LookupBlockTopLevelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LookupBlockTopLevelContext::LOOKUP() {
  return getToken(FeatParser::LOOKUP, 0);
}

tree::TerminalNode* FeatParser::LookupBlockTopLevelContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::LookupBlockTopLevelContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::LookupBlockTopLevelContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::LabelContext *> FeatParser::LookupBlockTopLevelContext::label() {
  return getRuleContexts<FeatParser::LabelContext>();
}

FeatParser::LabelContext* FeatParser::LookupBlockTopLevelContext::label(size_t i) {
  return getRuleContext<FeatParser::LabelContext>(i);
}

tree::TerminalNode* FeatParser::LookupBlockTopLevelContext::USE_EXTENSION() {
  return getToken(FeatParser::USE_EXTENSION, 0);
}

std::vector<FeatParser::StatementContext *> FeatParser::LookupBlockTopLevelContext::statement() {
  return getRuleContexts<FeatParser::StatementContext>();
}

FeatParser::StatementContext* FeatParser::LookupBlockTopLevelContext::statement(size_t i) {
  return getRuleContext<FeatParser::StatementContext>(i);
}


size_t FeatParser::LookupBlockTopLevelContext::getRuleIndex() const {
  return FeatParser::RuleLookupBlockTopLevel;
}


std::any FeatParser::LookupBlockTopLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupBlockTopLevel(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupBlockTopLevelContext* FeatParser::lookupBlockTopLevel() {
  LookupBlockTopLevelContext *_localctx = _tracker.createInstance<LookupBlockTopLevelContext>(_ctx, getState());
  enterRule(_localctx, 24, FeatParser::RuleLookupBlockTopLevel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(337);
    match(FeatParser::LOOKUP);
    setState(338);
    antlrcpp::downCast<LookupBlockTopLevelContext *>(_localctx)->startlabel = label();
    setState(340);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::USE_EXTENSION) {
      setState(339);
      match(FeatParser::USE_EXTENSION);
    }
    setState(342);
    match(FeatParser::LCBRACE);
    setState(344); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(343);
      statement();
      setState(346); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 36314463615331168) != 0) || _la == FeatParser::GCLASS);
    setState(348);
    match(FeatParser::RCBRACE);
    setState(349);
    antlrcpp::downCast<LookupBlockTopLevelContext *>(_localctx)->endlabel = label();
    setState(350);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureStatementContext ------------------------------------------------------------------

FeatParser::FeatureStatementContext::FeatureStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::StatementContext* FeatParser::FeatureStatementContext::statement() {
  return getRuleContext<FeatParser::StatementContext>(0);
}

FeatParser::LookupBlockOrUseContext* FeatParser::FeatureStatementContext::lookupBlockOrUse() {
  return getRuleContext<FeatParser::LookupBlockOrUseContext>(0);
}

FeatParser::CvParameterBlockContext* FeatParser::FeatureStatementContext::cvParameterBlock() {
  return getRuleContext<FeatParser::CvParameterBlockContext>(0);
}


size_t FeatParser::FeatureStatementContext::getRuleIndex() const {
  return FeatParser::RuleFeatureStatement;
}


std::any FeatParser::FeatureStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFeatureStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FeatureStatementContext* FeatParser::featureStatement() {
  FeatureStatementContext *_localctx = _tracker.createInstance<FeatureStatementContext>(_ctx, getState());
  enterRule(_localctx, 26, FeatParser::RuleFeatureStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(355);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::INCLUDE:
      case FeatParser::FEATURE:
      case FeatParser::SCRIPT:
      case FeatParser::LANGUAGE:
      case FeatParser::SUBTABLE:
      case FeatParser::LOOKUPFLAG:
      case FeatParser::ENUMERATE:
      case FeatParser::ENUMERATE_v:
      case FeatParser::EXCEPT:
      case FeatParser::IGNORE:
      case FeatParser::SUBSTITUTE:
      case FeatParser::SUBSTITUTE_v:
      case FeatParser::REVERSE:
      case FeatParser::REVERSE_v:
      case FeatParser::POSITION:
      case FeatParser::POSITION_v:
      case FeatParser::PARAMETERS:
      case FeatParser::FEATURE_NAMES:
      case FeatParser::SIZEMENUNAME:
      case FeatParser::MARK_CLASS:
      case FeatParser::GCLASS: {
        enterOuterAlt(_localctx, 1);
        setState(352);
        statement();
        break;
      }

      case FeatParser::LOOKUP: {
        enterOuterAlt(_localctx, 2);
        setState(353);
        lookupBlockOrUse();
        break;
      }

      case FeatParser::CV_PARAMETERS: {
        enterOuterAlt(_localctx, 3);
        setState(354);
        cvParameterBlock();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupBlockOrUseContext ------------------------------------------------------------------

FeatParser::LookupBlockOrUseContext::LookupBlockOrUseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LookupBlockOrUseContext::LOOKUP() {
  return getToken(FeatParser::LOOKUP, 0);
}

tree::TerminalNode* FeatParser::LookupBlockOrUseContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::LabelContext *> FeatParser::LookupBlockOrUseContext::label() {
  return getRuleContexts<FeatParser::LabelContext>();
}

FeatParser::LabelContext* FeatParser::LookupBlockOrUseContext::label(size_t i) {
  return getRuleContext<FeatParser::LabelContext>(i);
}

tree::TerminalNode* FeatParser::LookupBlockOrUseContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::LookupBlockOrUseContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::LookupBlockOrUseContext::USE_EXTENSION() {
  return getToken(FeatParser::USE_EXTENSION, 0);
}

std::vector<FeatParser::StatementContext *> FeatParser::LookupBlockOrUseContext::statement() {
  return getRuleContexts<FeatParser::StatementContext>();
}

FeatParser::StatementContext* FeatParser::LookupBlockOrUseContext::statement(size_t i) {
  return getRuleContext<FeatParser::StatementContext>(i);
}


size_t FeatParser::LookupBlockOrUseContext::getRuleIndex() const {
  return FeatParser::RuleLookupBlockOrUse;
}


std::any FeatParser::LookupBlockOrUseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupBlockOrUse(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupBlockOrUseContext* FeatParser::lookupBlockOrUse() {
  LookupBlockOrUseContext *_localctx = _tracker.createInstance<LookupBlockOrUseContext>(_ctx, getState());
  enterRule(_localctx, 28, FeatParser::RuleLookupBlockOrUse);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(357);
    match(FeatParser::LOOKUP);
    setState(358);
    antlrcpp::downCast<LookupBlockOrUseContext *>(_localctx)->startlabel = label();
    setState(371);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::USE_EXTENSION || _la == FeatParser::LCBRACE) {
      setState(360);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FeatParser::USE_EXTENSION) {
        setState(359);
        match(FeatParser::USE_EXTENSION);
      }
      setState(362);
      match(FeatParser::LCBRACE);
      setState(364); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(363);
        statement();
        setState(366); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 36314463615331168) != 0) || _la == FeatParser::GCLASS);
      setState(368);
      match(FeatParser::RCBRACE);
      setState(369);
      antlrcpp::downCast<LookupBlockOrUseContext *>(_localctx)->endlabel = label();
    }
    setState(373);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvParameterBlockContext ------------------------------------------------------------------

FeatParser::CvParameterBlockContext::CvParameterBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::CvParameterBlockContext::CV_PARAMETERS() {
  return getToken(FeatParser::CV_PARAMETERS, 0);
}

tree::TerminalNode* FeatParser::CvParameterBlockContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::CvParameterBlockContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::CvParameterBlockContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::CvParameterStatementContext *> FeatParser::CvParameterBlockContext::cvParameterStatement() {
  return getRuleContexts<FeatParser::CvParameterStatementContext>();
}

FeatParser::CvParameterStatementContext* FeatParser::CvParameterBlockContext::cvParameterStatement(size_t i) {
  return getRuleContext<FeatParser::CvParameterStatementContext>(i);
}


size_t FeatParser::CvParameterBlockContext::getRuleIndex() const {
  return FeatParser::RuleCvParameterBlock;
}


std::any FeatParser::CvParameterBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitCvParameterBlock(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::CvParameterBlockContext* FeatParser::cvParameterBlock() {
  CvParameterBlockContext *_localctx = _tracker.createInstance<CvParameterBlockContext>(_ctx, getState());
  enterRule(_localctx, 30, FeatParser::RuleCvParameterBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(375);
    match(FeatParser::CV_PARAMETERS);
    setState(376);
    match(FeatParser::LCBRACE);
    setState(380);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 272678883688480) != 0)) {
      setState(377);
      cvParameterStatement();
      setState(382);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(383);
    match(FeatParser::RCBRACE);
    setState(384);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvParameterStatementContext ------------------------------------------------------------------

FeatParser::CvParameterStatementContext::CvParameterStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::CvParameterStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::CvParameterContext* FeatParser::CvParameterStatementContext::cvParameter() {
  return getRuleContext<FeatParser::CvParameterContext>(0);
}

FeatParser::IncludeContext* FeatParser::CvParameterStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::CvParameterStatementContext::getRuleIndex() const {
  return FeatParser::RuleCvParameterStatement;
}


std::any FeatParser::CvParameterStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitCvParameterStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::CvParameterStatementContext* FeatParser::cvParameterStatement() {
  CvParameterStatementContext *_localctx = _tracker.createInstance<CvParameterStatementContext>(_ctx, getState());
  enterRule(_localctx, 32, FeatParser::RuleCvParameterStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(388);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::CV_UI_LABEL:
      case FeatParser::CV_TOOLTIP:
      case FeatParser::CV_SAMPLE_TEXT:
      case FeatParser::CV_PARAM_LABEL:
      case FeatParser::CV_CHARACTER: {
        setState(386);
        cvParameter();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(387);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(390);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvParameterContext ------------------------------------------------------------------

FeatParser::CvParameterContext::CvParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::CvParameterContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::CvParameterContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::CvParameterContext::CV_UI_LABEL() {
  return getToken(FeatParser::CV_UI_LABEL, 0);
}

tree::TerminalNode* FeatParser::CvParameterContext::CV_TOOLTIP() {
  return getToken(FeatParser::CV_TOOLTIP, 0);
}

tree::TerminalNode* FeatParser::CvParameterContext::CV_SAMPLE_TEXT() {
  return getToken(FeatParser::CV_SAMPLE_TEXT, 0);
}

tree::TerminalNode* FeatParser::CvParameterContext::CV_PARAM_LABEL() {
  return getToken(FeatParser::CV_PARAM_LABEL, 0);
}

std::vector<FeatParser::NameEntryStatementContext *> FeatParser::CvParameterContext::nameEntryStatement() {
  return getRuleContexts<FeatParser::NameEntryStatementContext>();
}

FeatParser::NameEntryStatementContext* FeatParser::CvParameterContext::nameEntryStatement(size_t i) {
  return getRuleContext<FeatParser::NameEntryStatementContext>(i);
}

tree::TerminalNode* FeatParser::CvParameterContext::CV_CHARACTER() {
  return getToken(FeatParser::CV_CHARACTER, 0);
}

FeatParser::GenNumContext* FeatParser::CvParameterContext::genNum() {
  return getRuleContext<FeatParser::GenNumContext>(0);
}


size_t FeatParser::CvParameterContext::getRuleIndex() const {
  return FeatParser::RuleCvParameter;
}


std::any FeatParser::CvParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitCvParameter(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::CvParameterContext* FeatParser::cvParameter() {
  CvParameterContext *_localctx = _tracker.createInstance<CvParameterContext>(_ctx, getState());
  enterRule(_localctx, 34, FeatParser::RuleCvParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(403);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::CV_UI_LABEL:
      case FeatParser::CV_TOOLTIP:
      case FeatParser::CV_SAMPLE_TEXT:
      case FeatParser::CV_PARAM_LABEL: {
        enterOuterAlt(_localctx, 1);
        setState(392);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 131941395333120) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(393);
        match(FeatParser::LCBRACE);
        setState(395); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(394);
          nameEntryStatement();
          setState(397); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::INCLUDE || _la == FeatParser::NAME);
        setState(399);
        match(FeatParser::RCBRACE);
        break;
      }

      case FeatParser::CV_CHARACTER: {
        enterOuterAlt(_localctx, 2);
        setState(401);
        match(FeatParser::CV_CHARACTER);
        setState(402);
        genNum();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

FeatParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::StatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::FeatureUseContext* FeatParser::StatementContext::featureUse() {
  return getRuleContext<FeatParser::FeatureUseContext>(0);
}

FeatParser::ScriptAssignContext* FeatParser::StatementContext::scriptAssign() {
  return getRuleContext<FeatParser::ScriptAssignContext>(0);
}

FeatParser::LangAssignContext* FeatParser::StatementContext::langAssign() {
  return getRuleContext<FeatParser::LangAssignContext>(0);
}

FeatParser::LookupflagAssignContext* FeatParser::StatementContext::lookupflagAssign() {
  return getRuleContext<FeatParser::LookupflagAssignContext>(0);
}

FeatParser::GlyphClassAssignContext* FeatParser::StatementContext::glyphClassAssign() {
  return getRuleContext<FeatParser::GlyphClassAssignContext>(0);
}

FeatParser::IgnoreSubOrPosContext* FeatParser::StatementContext::ignoreSubOrPos() {
  return getRuleContext<FeatParser::IgnoreSubOrPosContext>(0);
}

FeatParser::SubstituteContext* FeatParser::StatementContext::substitute() {
  return getRuleContext<FeatParser::SubstituteContext>(0);
}

FeatParser::Mark_statementContext* FeatParser::StatementContext::mark_statement() {
  return getRuleContext<FeatParser::Mark_statementContext>(0);
}

FeatParser::PositionContext* FeatParser::StatementContext::position() {
  return getRuleContext<FeatParser::PositionContext>(0);
}

FeatParser::ParametersContext* FeatParser::StatementContext::parameters() {
  return getRuleContext<FeatParser::ParametersContext>(0);
}

FeatParser::SizemenunameContext* FeatParser::StatementContext::sizemenuname() {
  return getRuleContext<FeatParser::SizemenunameContext>(0);
}

FeatParser::FeatureNamesContext* FeatParser::StatementContext::featureNames() {
  return getRuleContext<FeatParser::FeatureNamesContext>(0);
}

FeatParser::SubtableContext* FeatParser::StatementContext::subtable() {
  return getRuleContext<FeatParser::SubtableContext>(0);
}

FeatParser::IncludeContext* FeatParser::StatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::StatementContext::getRuleIndex() const {
  return FeatParser::RuleStatement;
}


std::any FeatParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::StatementContext* FeatParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 36, FeatParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(419);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::FEATURE: {
        setState(405);
        featureUse();
        break;
      }

      case FeatParser::SCRIPT: {
        setState(406);
        scriptAssign();
        break;
      }

      case FeatParser::LANGUAGE: {
        setState(407);
        langAssign();
        break;
      }

      case FeatParser::LOOKUPFLAG: {
        setState(408);
        lookupflagAssign();
        break;
      }

      case FeatParser::GCLASS: {
        setState(409);
        glyphClassAssign();
        break;
      }

      case FeatParser::IGNORE: {
        setState(410);
        ignoreSubOrPos();
        break;
      }

      case FeatParser::EXCEPT:
      case FeatParser::SUBSTITUTE:
      case FeatParser::SUBSTITUTE_v:
      case FeatParser::REVERSE:
      case FeatParser::REVERSE_v: {
        setState(411);
        substitute();
        break;
      }

      case FeatParser::MARK_CLASS: {
        setState(412);
        mark_statement();
        break;
      }

      case FeatParser::ENUMERATE:
      case FeatParser::ENUMERATE_v:
      case FeatParser::POSITION:
      case FeatParser::POSITION_v: {
        setState(413);
        position();
        break;
      }

      case FeatParser::PARAMETERS: {
        setState(414);
        parameters();
        break;
      }

      case FeatParser::SIZEMENUNAME: {
        setState(415);
        sizemenuname();
        break;
      }

      case FeatParser::FEATURE_NAMES: {
        setState(416);
        featureNames();
        break;
      }

      case FeatParser::SUBTABLE: {
        setState(417);
        subtable();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(418);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(421);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureUseContext ------------------------------------------------------------------

FeatParser::FeatureUseContext::FeatureUseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FeatureUseContext::FEATURE() {
  return getToken(FeatParser::FEATURE, 0);
}

FeatParser::TagContext* FeatParser::FeatureUseContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}


size_t FeatParser::FeatureUseContext::getRuleIndex() const {
  return FeatParser::RuleFeatureUse;
}


std::any FeatParser::FeatureUseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFeatureUse(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FeatureUseContext* FeatParser::featureUse() {
  FeatureUseContext *_localctx = _tracker.createInstance<FeatureUseContext>(_ctx, getState());
  enterRule(_localctx, 38, FeatParser::RuleFeatureUse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(423);
    match(FeatParser::FEATURE);
    setState(424);
    tag();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScriptAssignContext ------------------------------------------------------------------

FeatParser::ScriptAssignContext::ScriptAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ScriptAssignContext::SCRIPT() {
  return getToken(FeatParser::SCRIPT, 0);
}

FeatParser::TagContext* FeatParser::ScriptAssignContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}


size_t FeatParser::ScriptAssignContext::getRuleIndex() const {
  return FeatParser::RuleScriptAssign;
}


std::any FeatParser::ScriptAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitScriptAssign(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ScriptAssignContext* FeatParser::scriptAssign() {
  ScriptAssignContext *_localctx = _tracker.createInstance<ScriptAssignContext>(_ctx, getState());
  enterRule(_localctx, 40, FeatParser::RuleScriptAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(426);
    match(FeatParser::SCRIPT);
    setState(427);
    tag();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LangAssignContext ------------------------------------------------------------------

FeatParser::LangAssignContext::LangAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LangAssignContext::LANGUAGE() {
  return getToken(FeatParser::LANGUAGE, 0);
}

FeatParser::TagContext* FeatParser::LangAssignContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}

tree::TerminalNode* FeatParser::LangAssignContext::EXCLUDE_DFLT() {
  return getToken(FeatParser::EXCLUDE_DFLT, 0);
}

tree::TerminalNode* FeatParser::LangAssignContext::INCLUDE_DFLT() {
  return getToken(FeatParser::INCLUDE_DFLT, 0);
}

tree::TerminalNode* FeatParser::LangAssignContext::EXCLUDE_dflt() {
  return getToken(FeatParser::EXCLUDE_dflt, 0);
}

tree::TerminalNode* FeatParser::LangAssignContext::INCLUDE_dflt() {
  return getToken(FeatParser::INCLUDE_dflt, 0);
}


size_t FeatParser::LangAssignContext::getRuleIndex() const {
  return FeatParser::RuleLangAssign;
}


std::any FeatParser::LangAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLangAssign(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LangAssignContext* FeatParser::langAssign() {
  LangAssignContext *_localctx = _tracker.createInstance<LangAssignContext>(_ctx, getState());
  enterRule(_localctx, 42, FeatParser::RuleLangAssign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(429);
    match(FeatParser::LANGUAGE);
    setState(430);
    tag();
    setState(432);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 31457280) != 0)) {
      setState(431);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 31457280) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupflagAssignContext ------------------------------------------------------------------

FeatParser::LookupflagAssignContext::LookupflagAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LookupflagAssignContext::LOOKUPFLAG() {
  return getToken(FeatParser::LOOKUPFLAG, 0);
}

tree::TerminalNode* FeatParser::LookupflagAssignContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

std::vector<FeatParser::LookupflagElementContext *> FeatParser::LookupflagAssignContext::lookupflagElement() {
  return getRuleContexts<FeatParser::LookupflagElementContext>();
}

FeatParser::LookupflagElementContext* FeatParser::LookupflagAssignContext::lookupflagElement(size_t i) {
  return getRuleContext<FeatParser::LookupflagElementContext>(i);
}


size_t FeatParser::LookupflagAssignContext::getRuleIndex() const {
  return FeatParser::RuleLookupflagAssign;
}


std::any FeatParser::LookupflagAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupflagAssign(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupflagAssignContext* FeatParser::lookupflagAssign() {
  LookupflagAssignContext *_localctx = _tracker.createInstance<LookupflagAssignContext>(_ctx, getState());
  enterRule(_localctx, 44, FeatParser::RuleLookupflagAssign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(434);
    match(FeatParser::LOOKUPFLAG);
    setState(441);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NUM: {
        setState(435);
        match(FeatParser::NUM);
        break;
      }

      case FeatParser::RIGHT_TO_LEFT:
      case FeatParser::IGNORE_BASE_GLYPHS:
      case FeatParser::IGNORE_LIGATURES:
      case FeatParser::IGNORE_MARKS:
      case FeatParser::USE_MARK_FILTERING_SET:
      case FeatParser::MARK_ATTACHMENT_TYPE: {
        setState(437); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(436);
          lookupflagElement();
          setState(439); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2064384) != 0));
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupflagElementContext ------------------------------------------------------------------

FeatParser::LookupflagElementContext::LookupflagElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LookupflagElementContext::RIGHT_TO_LEFT() {
  return getToken(FeatParser::RIGHT_TO_LEFT, 0);
}

tree::TerminalNode* FeatParser::LookupflagElementContext::IGNORE_BASE_GLYPHS() {
  return getToken(FeatParser::IGNORE_BASE_GLYPHS, 0);
}

tree::TerminalNode* FeatParser::LookupflagElementContext::IGNORE_LIGATURES() {
  return getToken(FeatParser::IGNORE_LIGATURES, 0);
}

tree::TerminalNode* FeatParser::LookupflagElementContext::IGNORE_MARKS() {
  return getToken(FeatParser::IGNORE_MARKS, 0);
}

tree::TerminalNode* FeatParser::LookupflagElementContext::MARK_ATTACHMENT_TYPE() {
  return getToken(FeatParser::MARK_ATTACHMENT_TYPE, 0);
}

FeatParser::GlyphClassContext* FeatParser::LookupflagElementContext::glyphClass() {
  return getRuleContext<FeatParser::GlyphClassContext>(0);
}

tree::TerminalNode* FeatParser::LookupflagElementContext::USE_MARK_FILTERING_SET() {
  return getToken(FeatParser::USE_MARK_FILTERING_SET, 0);
}


size_t FeatParser::LookupflagElementContext::getRuleIndex() const {
  return FeatParser::RuleLookupflagElement;
}


std::any FeatParser::LookupflagElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupflagElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupflagElementContext* FeatParser::lookupflagElement() {
  LookupflagElementContext *_localctx = _tracker.createInstance<LookupflagElementContext>(_ctx, getState());
  enterRule(_localctx, 46, FeatParser::RuleLookupflagElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(451);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::RIGHT_TO_LEFT: {
        enterOuterAlt(_localctx, 1);
        setState(443);
        match(FeatParser::RIGHT_TO_LEFT);
        break;
      }

      case FeatParser::IGNORE_BASE_GLYPHS: {
        enterOuterAlt(_localctx, 2);
        setState(444);
        match(FeatParser::IGNORE_BASE_GLYPHS);
        break;
      }

      case FeatParser::IGNORE_LIGATURES: {
        enterOuterAlt(_localctx, 3);
        setState(445);
        match(FeatParser::IGNORE_LIGATURES);
        break;
      }

      case FeatParser::IGNORE_MARKS: {
        enterOuterAlt(_localctx, 4);
        setState(446);
        match(FeatParser::IGNORE_MARKS);
        break;
      }

      case FeatParser::MARK_ATTACHMENT_TYPE: {
        enterOuterAlt(_localctx, 5);
        setState(447);
        match(FeatParser::MARK_ATTACHMENT_TYPE);
        setState(448);
        glyphClass();
        break;
      }

      case FeatParser::USE_MARK_FILTERING_SET: {
        enterOuterAlt(_localctx, 6);
        setState(449);
        match(FeatParser::USE_MARK_FILTERING_SET);
        setState(450);
        glyphClass();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IgnoreSubOrPosContext ------------------------------------------------------------------

FeatParser::IgnoreSubOrPosContext::IgnoreSubOrPosContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::IgnoreSubOrPosContext::IGNORE() {
  return getToken(FeatParser::IGNORE, 0);
}

std::vector<FeatParser::LookupPatternContext *> FeatParser::IgnoreSubOrPosContext::lookupPattern() {
  return getRuleContexts<FeatParser::LookupPatternContext>();
}

FeatParser::LookupPatternContext* FeatParser::IgnoreSubOrPosContext::lookupPattern(size_t i) {
  return getRuleContext<FeatParser::LookupPatternContext>(i);
}

FeatParser::SubtokContext* FeatParser::IgnoreSubOrPosContext::subtok() {
  return getRuleContext<FeatParser::SubtokContext>(0);
}

FeatParser::RevtokContext* FeatParser::IgnoreSubOrPosContext::revtok() {
  return getRuleContext<FeatParser::RevtokContext>(0);
}

FeatParser::PostokContext* FeatParser::IgnoreSubOrPosContext::postok() {
  return getRuleContext<FeatParser::PostokContext>(0);
}

std::vector<tree::TerminalNode *> FeatParser::IgnoreSubOrPosContext::COMMA() {
  return getTokens(FeatParser::COMMA);
}

tree::TerminalNode* FeatParser::IgnoreSubOrPosContext::COMMA(size_t i) {
  return getToken(FeatParser::COMMA, i);
}


size_t FeatParser::IgnoreSubOrPosContext::getRuleIndex() const {
  return FeatParser::RuleIgnoreSubOrPos;
}


std::any FeatParser::IgnoreSubOrPosContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitIgnoreSubOrPos(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::IgnoreSubOrPosContext* FeatParser::ignoreSubOrPos() {
  IgnoreSubOrPosContext *_localctx = _tracker.createInstance<IgnoreSubOrPosContext>(_ctx, getState());
  enterRule(_localctx, 48, FeatParser::RuleIgnoreSubOrPos);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(453);
    match(FeatParser::IGNORE);
    setState(457);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::SUBSTITUTE:
      case FeatParser::SUBSTITUTE_v: {
        setState(454);
        subtok();
        break;
      }

      case FeatParser::REVERSE:
      case FeatParser::REVERSE_v: {
        setState(455);
        revtok();
        break;
      }

      case FeatParser::POSITION:
      case FeatParser::POSITION_v: {
        setState(456);
        postok();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(459);
    lookupPattern();
    setState(464);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::COMMA) {
      setState(460);
      match(FeatParser::COMMA);
      setState(461);
      lookupPattern();
      setState(466);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubstituteContext ------------------------------------------------------------------

FeatParser::SubstituteContext::SubstituteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::RevtokContext* FeatParser::SubstituteContext::revtok() {
  return getRuleContext<FeatParser::RevtokContext>(0);
}

FeatParser::SubtokContext* FeatParser::SubstituteContext::subtok() {
  return getRuleContext<FeatParser::SubtokContext>(0);
}

tree::TerminalNode* FeatParser::SubstituteContext::EXCEPT() {
  return getToken(FeatParser::EXCEPT, 0);
}

std::vector<FeatParser::LookupPatternContext *> FeatParser::SubstituteContext::lookupPattern() {
  return getRuleContexts<FeatParser::LookupPatternContext>();
}

FeatParser::LookupPatternContext* FeatParser::SubstituteContext::lookupPattern(size_t i) {
  return getRuleContext<FeatParser::LookupPatternContext>(i);
}

tree::TerminalNode* FeatParser::SubstituteContext::BY() {
  return getToken(FeatParser::BY, 0);
}

std::vector<tree::TerminalNode *> FeatParser::SubstituteContext::COMMA() {
  return getTokens(FeatParser::COMMA);
}

tree::TerminalNode* FeatParser::SubstituteContext::COMMA(size_t i) {
  return getToken(FeatParser::COMMA, i);
}

tree::TerminalNode* FeatParser::SubstituteContext::FROM() {
  return getToken(FeatParser::FROM, 0);
}

tree::TerminalNode* FeatParser::SubstituteContext::KNULL() {
  return getToken(FeatParser::KNULL, 0);
}


size_t FeatParser::SubstituteContext::getRuleIndex() const {
  return FeatParser::RuleSubstitute;
}


std::any FeatParser::SubstituteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitSubstitute(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::SubstituteContext* FeatParser::substitute() {
  SubstituteContext *_localctx = _tracker.createInstance<SubstituteContext>(_ctx, getState());
  enterRule(_localctx, 50, FeatParser::RuleSubstitute);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(476);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::EXCEPT) {
      setState(467);
      match(FeatParser::EXCEPT);
      setState(468);
      lookupPattern();
      setState(473);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FeatParser::COMMA) {
        setState(469);
        match(FeatParser::COMMA);
        setState(470);
        lookupPattern();
        setState(475);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(496);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::REVERSE:
      case FeatParser::REVERSE_v: {
        setState(478);
        revtok();
        setState(479);
        antlrcpp::downCast<SubstituteContext *>(_localctx)->startpat = lookupPattern();
        setState(485);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::BY) {
          setState(480);
          match(FeatParser::BY);
          setState(483);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FeatParser::KNULL: {
              setState(481);
              match(FeatParser::KNULL);
              break;
            }

            case FeatParser::NOTDEF:
            case FeatParser::LBRACKET:
            case FeatParser::GCLASS:
            case FeatParser::AXISUNIT:
            case FeatParser::CID:
            case FeatParser::ESCGNAME:
            case FeatParser::NAMELABEL:
            case FeatParser::EXTNAME: {
              setState(482);
              antlrcpp::downCast<SubstituteContext *>(_localctx)->endpat = lookupPattern();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
        }
        break;
      }

      case FeatParser::SUBSTITUTE:
      case FeatParser::SUBSTITUTE_v: {
        setState(487);
        subtok();
        setState(488);
        antlrcpp::downCast<SubstituteContext *>(_localctx)->startpat = lookupPattern();
        setState(494);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::BY

        || _la == FeatParser::FROM) {
          setState(489);
          _la = _input->LA(1);
          if (!(_la == FeatParser::BY

          || _la == FeatParser::FROM)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(492);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FeatParser::KNULL: {
              setState(490);
              match(FeatParser::KNULL);
              break;
            }

            case FeatParser::NOTDEF:
            case FeatParser::LBRACKET:
            case FeatParser::GCLASS:
            case FeatParser::AXISUNIT:
            case FeatParser::CID:
            case FeatParser::ESCGNAME:
            case FeatParser::NAMELABEL:
            case FeatParser::EXTNAME: {
              setState(491);
              antlrcpp::downCast<SubstituteContext *>(_localctx)->endpat = lookupPattern();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PositionContext ------------------------------------------------------------------

FeatParser::PositionContext::PositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::PostokContext* FeatParser::PositionContext::postok() {
  return getRuleContext<FeatParser::PostokContext>(0);
}

FeatParser::EnumtokContext* FeatParser::PositionContext::enumtok() {
  return getRuleContext<FeatParser::EnumtokContext>(0);
}

std::vector<FeatParser::PatternContext *> FeatParser::PositionContext::pattern() {
  return getRuleContexts<FeatParser::PatternContext>();
}

FeatParser::PatternContext* FeatParser::PositionContext::pattern(size_t i) {
  return getRuleContext<FeatParser::PatternContext>(i);
}

FeatParser::ValueRecordContext* FeatParser::PositionContext::valueRecord() {
  return getRuleContext<FeatParser::ValueRecordContext>(0);
}

tree::TerminalNode* FeatParser::PositionContext::CURSIVE() {
  return getToken(FeatParser::CURSIVE, 0);
}

FeatParser::CursiveElementContext* FeatParser::PositionContext::cursiveElement() {
  return getRuleContext<FeatParser::CursiveElementContext>(0);
}

tree::TerminalNode* FeatParser::PositionContext::MARKBASE() {
  return getToken(FeatParser::MARKBASE, 0);
}

FeatParser::MarkligtokContext* FeatParser::PositionContext::markligtok() {
  return getRuleContext<FeatParser::MarkligtokContext>(0);
}

tree::TerminalNode* FeatParser::PositionContext::MARK() {
  return getToken(FeatParser::MARK, 0);
}

std::vector<FeatParser::ValuePatternContext *> FeatParser::PositionContext::valuePattern() {
  return getRuleContexts<FeatParser::ValuePatternContext>();
}

FeatParser::ValuePatternContext* FeatParser::PositionContext::valuePattern(size_t i) {
  return getRuleContext<FeatParser::ValuePatternContext>(i);
}

std::vector<tree::TerminalNode *> FeatParser::PositionContext::LOOKUP() {
  return getTokens(FeatParser::LOOKUP);
}

tree::TerminalNode* FeatParser::PositionContext::LOOKUP(size_t i) {
  return getToken(FeatParser::LOOKUP, i);
}

std::vector<FeatParser::LabelContext *> FeatParser::PositionContext::label() {
  return getRuleContexts<FeatParser::LabelContext>();
}

FeatParser::LabelContext* FeatParser::PositionContext::label(size_t i) {
  return getRuleContext<FeatParser::LabelContext>(i);
}

std::vector<FeatParser::LookupPatternElementContext *> FeatParser::PositionContext::lookupPatternElement() {
  return getRuleContexts<FeatParser::LookupPatternElementContext>();
}

FeatParser::LookupPatternElementContext* FeatParser::PositionContext::lookupPatternElement(size_t i) {
  return getRuleContext<FeatParser::LookupPatternElementContext>(i);
}

std::vector<FeatParser::BaseToMarkElementContext *> FeatParser::PositionContext::baseToMarkElement() {
  return getRuleContexts<FeatParser::BaseToMarkElementContext>();
}

FeatParser::BaseToMarkElementContext* FeatParser::PositionContext::baseToMarkElement(size_t i) {
  return getRuleContext<FeatParser::BaseToMarkElementContext>(i);
}

std::vector<FeatParser::LigatureMarkElementContext *> FeatParser::PositionContext::ligatureMarkElement() {
  return getRuleContexts<FeatParser::LigatureMarkElementContext>();
}

FeatParser::LigatureMarkElementContext* FeatParser::PositionContext::ligatureMarkElement(size_t i) {
  return getRuleContext<FeatParser::LigatureMarkElementContext>(i);
}


size_t FeatParser::PositionContext::getRuleIndex() const {
  return FeatParser::RulePosition;
}


std::any FeatParser::PositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitPosition(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::PositionContext* FeatParser::position() {
  PositionContext *_localctx = _tracker.createInstance<PositionContext>(_ctx, getState());
  enterRule(_localctx, 52, FeatParser::RulePosition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(499);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::ENUMERATE

    || _la == FeatParser::ENUMERATE_v) {
      setState(498);
      enumtok();
    }
    setState(501);
    postok();
    setState(503);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::NOTDEF || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 129025) != 0)) {
      setState(502);
      antlrcpp::downCast<PositionContext *>(_localctx)->startpat = pattern();
    }
    setState(559);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::BEGINVALUE:
      case FeatParser::LPAREN:
      case FeatParser::NUM: {
        setState(505);
        valueRecord();
        setState(509);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FeatParser::NOTDEF || ((((_la - 118) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 118)) & 129025) != 0)) {
          setState(506);
          valuePattern();
          setState(511);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FeatParser::LOOKUP: {
        setState(514); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(512);
          match(FeatParser::LOOKUP);
          setState(513);
          label();
          setState(516); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::LOOKUP);
        setState(521);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FeatParser::NOTDEF || ((((_la - 118) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 118)) & 129025) != 0)) {
          setState(518);
          lookupPatternElement();
          setState(523);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FeatParser::CURSIVE: {
        setState(524);
        match(FeatParser::CURSIVE);
        setState(525);
        cursiveElement();
        setState(527);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::NOTDEF || ((((_la - 118) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 118)) & 129025) != 0)) {
          setState(526);
          antlrcpp::downCast<PositionContext *>(_localctx)->endpat = pattern();
        }
        break;
      }

      case FeatParser::MARKBASE: {
        setState(529);
        match(FeatParser::MARKBASE);
        setState(530);
        antlrcpp::downCast<PositionContext *>(_localctx)->midpat = pattern();
        setState(532); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(531);
          baseToMarkElement();
          setState(534); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::BEGINVALUE);
        setState(537);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::NOTDEF || ((((_la - 118) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 118)) & 129025) != 0)) {
          setState(536);
          antlrcpp::downCast<PositionContext *>(_localctx)->endpat = pattern();
        }
        break;
      }

      case FeatParser::MARKLIG:
      case FeatParser::MARKLIG_v: {
        setState(539);
        markligtok();
        setState(540);
        antlrcpp::downCast<PositionContext *>(_localctx)->midpat = pattern();
        setState(542); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(541);
          ligatureMarkElement();
          setState(544); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::BEGINVALUE);
        setState(547);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::NOTDEF || ((((_la - 118) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 118)) & 129025) != 0)) {
          setState(546);
          antlrcpp::downCast<PositionContext *>(_localctx)->endpat = pattern();
        }
        break;
      }

      case FeatParser::MARK: {
        setState(549);
        match(FeatParser::MARK);
        setState(550);
        antlrcpp::downCast<PositionContext *>(_localctx)->midpat = pattern();
        setState(552); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(551);
          baseToMarkElement();
          setState(554); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::BEGINVALUE);
        setState(557);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::NOTDEF || ((((_la - 118) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 118)) & 129025) != 0)) {
          setState(556);
          antlrcpp::downCast<PositionContext *>(_localctx)->endpat = pattern();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValuePatternContext ------------------------------------------------------------------

FeatParser::ValuePatternContext::ValuePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::PatternElementContext* FeatParser::ValuePatternContext::patternElement() {
  return getRuleContext<FeatParser::PatternElementContext>(0);
}

FeatParser::ValueRecordContext* FeatParser::ValuePatternContext::valueRecord() {
  return getRuleContext<FeatParser::ValueRecordContext>(0);
}


size_t FeatParser::ValuePatternContext::getRuleIndex() const {
  return FeatParser::RuleValuePattern;
}


std::any FeatParser::ValuePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitValuePattern(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ValuePatternContext* FeatParser::valuePattern() {
  ValuePatternContext *_localctx = _tracker.createInstance<ValuePatternContext>(_ctx, getState());
  enterRule(_localctx, 54, FeatParser::RuleValuePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(561);
    patternElement();
    setState(563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::BEGINVALUE || _la == FeatParser::LPAREN

    || _la == FeatParser::NUM) {
      setState(562);
      valueRecord();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueRecordContext ------------------------------------------------------------------

FeatParser::ValueRecordContext::ValueRecordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ValueRecordContext::BEGINVALUE() {
  return getToken(FeatParser::BEGINVALUE, 0);
}

tree::TerminalNode* FeatParser::ValueRecordContext::ENDVALUE() {
  return getToken(FeatParser::ENDVALUE, 0);
}

FeatParser::LabelContext* FeatParser::ValueRecordContext::label() {
  return getRuleContext<FeatParser::LabelContext>(0);
}

FeatParser::ValueLiteralContext* FeatParser::ValueRecordContext::valueLiteral() {
  return getRuleContext<FeatParser::ValueLiteralContext>(0);
}


size_t FeatParser::ValueRecordContext::getRuleIndex() const {
  return FeatParser::RuleValueRecord;
}


std::any FeatParser::ValueRecordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitValueRecord(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ValueRecordContext* FeatParser::valueRecord() {
  ValueRecordContext *_localctx = _tracker.createInstance<ValueRecordContext>(_ctx, getState());
  enterRule(_localctx, 56, FeatParser::RuleValueRecord);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(570);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(565);
      match(FeatParser::BEGINVALUE);
      setState(566);
      antlrcpp::downCast<ValueRecordContext *>(_localctx)->valuename = label();
      setState(567);
      match(FeatParser::ENDVALUE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(569);
      valueLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueLiteralContext ------------------------------------------------------------------

FeatParser::ValueLiteralContext::ValueLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::ValueLiteralContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::ValueLiteralContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}

std::vector<FeatParser::ParenLocationValueContext *> FeatParser::ValueLiteralContext::parenLocationValue() {
  return getRuleContexts<FeatParser::ParenLocationValueContext>();
}

FeatParser::ParenLocationValueContext* FeatParser::ValueLiteralContext::parenLocationValue(size_t i) {
  return getRuleContext<FeatParser::ParenLocationValueContext>(i);
}

tree::TerminalNode* FeatParser::ValueLiteralContext::BEGINVALUE() {
  return getToken(FeatParser::BEGINVALUE, 0);
}

tree::TerminalNode* FeatParser::ValueLiteralContext::ENDVALUE() {
  return getToken(FeatParser::ENDVALUE, 0);
}

tree::TerminalNode* FeatParser::ValueLiteralContext::LPAREN() {
  return getToken(FeatParser::LPAREN, 0);
}

tree::TerminalNode* FeatParser::ValueLiteralContext::RPAREN() {
  return getToken(FeatParser::RPAREN, 0);
}

std::vector<FeatParser::LocationMultiValueLiteralContext *> FeatParser::ValueLiteralContext::locationMultiValueLiteral() {
  return getRuleContexts<FeatParser::LocationMultiValueLiteralContext>();
}

FeatParser::LocationMultiValueLiteralContext* FeatParser::ValueLiteralContext::locationMultiValueLiteral(size_t i) {
  return getRuleContext<FeatParser::LocationMultiValueLiteralContext>(i);
}


size_t FeatParser::ValueLiteralContext::getRuleIndex() const {
  return FeatParser::RuleValueLiteral;
}


std::any FeatParser::ValueLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitValueLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ValueLiteralContext* FeatParser::valueLiteral() {
  ValueLiteralContext *_localctx = _tracker.createInstance<ValueLiteralContext>(_ctx, getState());
  enterRule(_localctx, 58, FeatParser::RuleValueLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(595);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(572);
      match(FeatParser::NUM);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(573);
      parenLocationValue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(574);
      match(FeatParser::BEGINVALUE);
      setState(575);
      match(FeatParser::NUM);
      setState(576);
      match(FeatParser::NUM);
      setState(577);
      match(FeatParser::NUM);
      setState(578);
      match(FeatParser::NUM);
      setState(579);
      match(FeatParser::ENDVALUE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(580);
      match(FeatParser::LPAREN);
      setState(582); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(581);
        locationMultiValueLiteral();
        setState(584); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FeatParser::MARK || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 101) != 0));
      setState(586);
      match(FeatParser::RPAREN);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(588);
      match(FeatParser::BEGINVALUE);
      setState(589);
      parenLocationValue();
      setState(590);
      parenLocationValue();
      setState(591);
      parenLocationValue();
      setState(592);
      parenLocationValue();
      setState(593);
      match(FeatParser::ENDVALUE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleValueLiteralContext ------------------------------------------------------------------

FeatParser::SingleValueLiteralContext::SingleValueLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::SingleValueLiteralContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

FeatParser::ParenLocationValueContext* FeatParser::SingleValueLiteralContext::parenLocationValue() {
  return getRuleContext<FeatParser::ParenLocationValueContext>(0);
}


size_t FeatParser::SingleValueLiteralContext::getRuleIndex() const {
  return FeatParser::RuleSingleValueLiteral;
}


std::any FeatParser::SingleValueLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitSingleValueLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::SingleValueLiteralContext* FeatParser::singleValueLiteral() {
  SingleValueLiteralContext *_localctx = _tracker.createInstance<SingleValueLiteralContext>(_ctx, getState());
  enterRule(_localctx, 60, FeatParser::RuleSingleValueLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(599);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NUM: {
        enterOuterAlt(_localctx, 1);
        setState(597);
        match(FeatParser::NUM);
        break;
      }

      case FeatParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(598);
        parenLocationValue();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParenLocationValueContext ------------------------------------------------------------------

FeatParser::ParenLocationValueContext::ParenLocationValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ParenLocationValueContext::LPAREN() {
  return getToken(FeatParser::LPAREN, 0);
}

tree::TerminalNode* FeatParser::ParenLocationValueContext::RPAREN() {
  return getToken(FeatParser::RPAREN, 0);
}

std::vector<FeatParser::LocationValueLiteralContext *> FeatParser::ParenLocationValueContext::locationValueLiteral() {
  return getRuleContexts<FeatParser::LocationValueLiteralContext>();
}

FeatParser::LocationValueLiteralContext* FeatParser::ParenLocationValueContext::locationValueLiteral(size_t i) {
  return getRuleContext<FeatParser::LocationValueLiteralContext>(i);
}


size_t FeatParser::ParenLocationValueContext::getRuleIndex() const {
  return FeatParser::RuleParenLocationValue;
}


std::any FeatParser::ParenLocationValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitParenLocationValue(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ParenLocationValueContext* FeatParser::parenLocationValue() {
  ParenLocationValueContext *_localctx = _tracker.createInstance<ParenLocationValueContext>(_ctx, getState());
  enterRule(_localctx, 62, FeatParser::RuleParenLocationValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(601);
    match(FeatParser::LPAREN);
    setState(603); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(602);
      locationValueLiteral();
      setState(605); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::MARK || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 101) != 0));
    setState(607);
    match(FeatParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationValueLiteralContext ------------------------------------------------------------------

FeatParser::LocationValueLiteralContext::LocationValueLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::LocationSpecifierContext* FeatParser::LocationValueLiteralContext::locationSpecifier() {
  return getRuleContext<FeatParser::LocationSpecifierContext>(0);
}

tree::TerminalNode* FeatParser::LocationValueLiteralContext::COLON() {
  return getToken(FeatParser::COLON, 0);
}

tree::TerminalNode* FeatParser::LocationValueLiteralContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}


size_t FeatParser::LocationValueLiteralContext::getRuleIndex() const {
  return FeatParser::RuleLocationValueLiteral;
}


std::any FeatParser::LocationValueLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLocationValueLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LocationValueLiteralContext* FeatParser::locationValueLiteral() {
  LocationValueLiteralContext *_localctx = _tracker.createInstance<LocationValueLiteralContext>(_ctx, getState());
  enterRule(_localctx, 64, FeatParser::RuleLocationValueLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(609);
    locationSpecifier();
    setState(610);
    match(FeatParser::COLON);
    setState(611);
    match(FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationMultiValueLiteralContext ------------------------------------------------------------------

FeatParser::LocationMultiValueLiteralContext::LocationMultiValueLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::LocationSpecifierContext* FeatParser::LocationMultiValueLiteralContext::locationSpecifier() {
  return getRuleContext<FeatParser::LocationSpecifierContext>(0);
}

tree::TerminalNode* FeatParser::LocationMultiValueLiteralContext::COLON() {
  return getToken(FeatParser::COLON, 0);
}

tree::TerminalNode* FeatParser::LocationMultiValueLiteralContext::BEGINVALUE() {
  return getToken(FeatParser::BEGINVALUE, 0);
}

std::vector<tree::TerminalNode *> FeatParser::LocationMultiValueLiteralContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::LocationMultiValueLiteralContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}

tree::TerminalNode* FeatParser::LocationMultiValueLiteralContext::ENDVALUE() {
  return getToken(FeatParser::ENDVALUE, 0);
}


size_t FeatParser::LocationMultiValueLiteralContext::getRuleIndex() const {
  return FeatParser::RuleLocationMultiValueLiteral;
}


std::any FeatParser::LocationMultiValueLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLocationMultiValueLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LocationMultiValueLiteralContext* FeatParser::locationMultiValueLiteral() {
  LocationMultiValueLiteralContext *_localctx = _tracker.createInstance<LocationMultiValueLiteralContext>(_ctx, getState());
  enterRule(_localctx, 66, FeatParser::RuleLocationMultiValueLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(613);
    locationSpecifier();
    setState(614);
    match(FeatParser::COLON);
    setState(615);
    match(FeatParser::BEGINVALUE);
    setState(616);
    match(FeatParser::NUM);
    setState(617);
    match(FeatParser::NUM);
    setState(618);
    match(FeatParser::NUM);
    setState(619);
    match(FeatParser::NUM);
    setState(620);
    match(FeatParser::ENDVALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationSpecifierContext ------------------------------------------------------------------

FeatParser::LocationSpecifierContext::LocationSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::LocationLiteralContext* FeatParser::LocationSpecifierContext::locationLiteral() {
  return getRuleContext<FeatParser::LocationLiteralContext>(0);
}

FeatParser::LabelContext* FeatParser::LocationSpecifierContext::label() {
  return getRuleContext<FeatParser::LabelContext>(0);
}


size_t FeatParser::LocationSpecifierContext::getRuleIndex() const {
  return FeatParser::RuleLocationSpecifier;
}


std::any FeatParser::LocationSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLocationSpecifier(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LocationSpecifierContext* FeatParser::locationSpecifier() {
  LocationSpecifierContext *_localctx = _tracker.createInstance<LocationSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 68, FeatParser::RuleLocationSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(624);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(622);
      locationLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(623);
      label();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationLiteralContext ------------------------------------------------------------------

FeatParser::LocationLiteralContext::LocationLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::AxisLocationLiteralContext *> FeatParser::LocationLiteralContext::axisLocationLiteral() {
  return getRuleContexts<FeatParser::AxisLocationLiteralContext>();
}

FeatParser::AxisLocationLiteralContext* FeatParser::LocationLiteralContext::axisLocationLiteral(size_t i) {
  return getRuleContext<FeatParser::AxisLocationLiteralContext>(i);
}

std::vector<tree::TerminalNode *> FeatParser::LocationLiteralContext::COMMA() {
  return getTokens(FeatParser::COMMA);
}

tree::TerminalNode* FeatParser::LocationLiteralContext::COMMA(size_t i) {
  return getToken(FeatParser::COMMA, i);
}


size_t FeatParser::LocationLiteralContext::getRuleIndex() const {
  return FeatParser::RuleLocationLiteral;
}


std::any FeatParser::LocationLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLocationLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LocationLiteralContext* FeatParser::locationLiteral() {
  LocationLiteralContext *_localctx = _tracker.createInstance<LocationLiteralContext>(_ctx, getState());
  enterRule(_localctx, 70, FeatParser::RuleLocationLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(626);
    axisLocationLiteral();
    setState(631);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::COMMA) {
      setState(627);
      match(FeatParser::COMMA);
      setState(628);
      axisLocationLiteral();
      setState(633);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisLocationLiteralContext ------------------------------------------------------------------

FeatParser::AxisLocationLiteralContext::AxisLocationLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::TagContext* FeatParser::AxisLocationLiteralContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}

tree::TerminalNode* FeatParser::AxisLocationLiteralContext::EQUALS() {
  return getToken(FeatParser::EQUALS, 0);
}

FeatParser::FixedNumContext* FeatParser::AxisLocationLiteralContext::fixedNum() {
  return getRuleContext<FeatParser::FixedNumContext>(0);
}

tree::TerminalNode* FeatParser::AxisLocationLiteralContext::AXISUNIT() {
  return getToken(FeatParser::AXISUNIT, 0);
}


size_t FeatParser::AxisLocationLiteralContext::getRuleIndex() const {
  return FeatParser::RuleAxisLocationLiteral;
}


std::any FeatParser::AxisLocationLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisLocationLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisLocationLiteralContext* FeatParser::axisLocationLiteral() {
  AxisLocationLiteralContext *_localctx = _tracker.createInstance<AxisLocationLiteralContext>(_ctx, getState());
  enterRule(_localctx, 72, FeatParser::RuleAxisLocationLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(634);
    tag();
    setState(635);
    match(FeatParser::EQUALS);
    setState(636);
    fixedNum();
    setState(637);
    match(FeatParser::AXISUNIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CursiveElementContext ------------------------------------------------------------------

FeatParser::CursiveElementContext::CursiveElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::PatternElementContext* FeatParser::CursiveElementContext::patternElement() {
  return getRuleContext<FeatParser::PatternElementContext>(0);
}

std::vector<FeatParser::AnchorContext *> FeatParser::CursiveElementContext::anchor() {
  return getRuleContexts<FeatParser::AnchorContext>();
}

FeatParser::AnchorContext* FeatParser::CursiveElementContext::anchor(size_t i) {
  return getRuleContext<FeatParser::AnchorContext>(i);
}


size_t FeatParser::CursiveElementContext::getRuleIndex() const {
  return FeatParser::RuleCursiveElement;
}


std::any FeatParser::CursiveElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitCursiveElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::CursiveElementContext* FeatParser::cursiveElement() {
  CursiveElementContext *_localctx = _tracker.createInstance<CursiveElementContext>(_ctx, getState());
  enterRule(_localctx, 74, FeatParser::RuleCursiveElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(639);
    patternElement();
    setState(640);
    anchor();
    setState(641);
    anchor();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseToMarkElementContext ------------------------------------------------------------------

FeatParser::BaseToMarkElementContext::BaseToMarkElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::AnchorContext* FeatParser::BaseToMarkElementContext::anchor() {
  return getRuleContext<FeatParser::AnchorContext>(0);
}

tree::TerminalNode* FeatParser::BaseToMarkElementContext::MARK() {
  return getToken(FeatParser::MARK, 0);
}

tree::TerminalNode* FeatParser::BaseToMarkElementContext::GCLASS() {
  return getToken(FeatParser::GCLASS, 0);
}

tree::TerminalNode* FeatParser::BaseToMarkElementContext::MARKER() {
  return getToken(FeatParser::MARKER, 0);
}


size_t FeatParser::BaseToMarkElementContext::getRuleIndex() const {
  return FeatParser::RuleBaseToMarkElement;
}


std::any FeatParser::BaseToMarkElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitBaseToMarkElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::BaseToMarkElementContext* FeatParser::baseToMarkElement() {
  BaseToMarkElementContext *_localctx = _tracker.createInstance<BaseToMarkElementContext>(_ctx, getState());
  enterRule(_localctx, 76, FeatParser::RuleBaseToMarkElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(643);
    anchor();
    setState(644);
    match(FeatParser::MARK);
    setState(645);
    match(FeatParser::GCLASS);
    setState(647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARKER) {
      setState(646);
      match(FeatParser::MARKER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LigatureMarkElementContext ------------------------------------------------------------------

FeatParser::LigatureMarkElementContext::LigatureMarkElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::AnchorContext* FeatParser::LigatureMarkElementContext::anchor() {
  return getRuleContext<FeatParser::AnchorContext>(0);
}

tree::TerminalNode* FeatParser::LigatureMarkElementContext::MARK() {
  return getToken(FeatParser::MARK, 0);
}

tree::TerminalNode* FeatParser::LigatureMarkElementContext::GCLASS() {
  return getToken(FeatParser::GCLASS, 0);
}

tree::TerminalNode* FeatParser::LigatureMarkElementContext::LIG_COMPONENT() {
  return getToken(FeatParser::LIG_COMPONENT, 0);
}

tree::TerminalNode* FeatParser::LigatureMarkElementContext::MARKER() {
  return getToken(FeatParser::MARKER, 0);
}


size_t FeatParser::LigatureMarkElementContext::getRuleIndex() const {
  return FeatParser::RuleLigatureMarkElement;
}


std::any FeatParser::LigatureMarkElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLigatureMarkElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LigatureMarkElementContext* FeatParser::ligatureMarkElement() {
  LigatureMarkElementContext *_localctx = _tracker.createInstance<LigatureMarkElementContext>(_ctx, getState());
  enterRule(_localctx, 78, FeatParser::RuleLigatureMarkElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(649);
    anchor();
    setState(652);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARK) {
      setState(650);
      match(FeatParser::MARK);
      setState(651);
      match(FeatParser::GCLASS);
    }
    setState(655);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::LIG_COMPONENT) {
      setState(654);
      match(FeatParser::LIG_COMPONENT);
    }
    setState(658);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARKER) {
      setState(657);
      match(FeatParser::MARKER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParametersContext ------------------------------------------------------------------

FeatParser::ParametersContext::ParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ParametersContext::PARAMETERS() {
  return getToken(FeatParser::PARAMETERS, 0);
}

std::vector<FeatParser::FixedNumContext *> FeatParser::ParametersContext::fixedNum() {
  return getRuleContexts<FeatParser::FixedNumContext>();
}

FeatParser::FixedNumContext* FeatParser::ParametersContext::fixedNum(size_t i) {
  return getRuleContext<FeatParser::FixedNumContext>(i);
}


size_t FeatParser::ParametersContext::getRuleIndex() const {
  return FeatParser::RuleParameters;
}


std::any FeatParser::ParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitParameters(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ParametersContext* FeatParser::parameters() {
  ParametersContext *_localctx = _tracker.createInstance<ParametersContext>(_ctx, getState());
  enterRule(_localctx, 80, FeatParser::RuleParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(660);
    match(FeatParser::PARAMETERS);
    setState(662); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(661);
      fixedNum();
      setState(664); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::POINTNUM

    || _la == FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SizemenunameContext ------------------------------------------------------------------

FeatParser::SizemenunameContext::SizemenunameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::SizemenunameContext::SIZEMENUNAME() {
  return getToken(FeatParser::SIZEMENUNAME, 0);
}

tree::TerminalNode* FeatParser::SizemenunameContext::STRVAL() {
  return getToken(FeatParser::STRVAL, 0);
}

std::vector<FeatParser::GenNumContext *> FeatParser::SizemenunameContext::genNum() {
  return getRuleContexts<FeatParser::GenNumContext>();
}

FeatParser::GenNumContext* FeatParser::SizemenunameContext::genNum(size_t i) {
  return getRuleContext<FeatParser::GenNumContext>(i);
}


size_t FeatParser::SizemenunameContext::getRuleIndex() const {
  return FeatParser::RuleSizemenuname;
}


std::any FeatParser::SizemenunameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitSizemenuname(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::SizemenunameContext* FeatParser::sizemenuname() {
  SizemenunameContext *_localctx = _tracker.createInstance<SizemenunameContext>(_ctx, getState());
  enterRule(_localctx, 82, FeatParser::RuleSizemenuname);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(666);
    match(FeatParser::SIZEMENUNAME);
    setState(673);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 7) != 0)) {
      setState(667);
      genNum();
      setState(671);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 136) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 136)) & 7) != 0)) {
        setState(668);
        genNum();
        setState(669);
        genNum();
      }
    }
    setState(675);
    match(FeatParser::STRVAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureNamesContext ------------------------------------------------------------------

FeatParser::FeatureNamesContext::FeatureNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FeatureNamesContext::FEATURE_NAMES() {
  return getToken(FeatParser::FEATURE_NAMES, 0);
}

tree::TerminalNode* FeatParser::FeatureNamesContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::FeatureNamesContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

std::vector<FeatParser::NameEntryStatementContext *> FeatParser::FeatureNamesContext::nameEntryStatement() {
  return getRuleContexts<FeatParser::NameEntryStatementContext>();
}

FeatParser::NameEntryStatementContext* FeatParser::FeatureNamesContext::nameEntryStatement(size_t i) {
  return getRuleContext<FeatParser::NameEntryStatementContext>(i);
}


size_t FeatParser::FeatureNamesContext::getRuleIndex() const {
  return FeatParser::RuleFeatureNames;
}


std::any FeatParser::FeatureNamesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFeatureNames(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FeatureNamesContext* FeatParser::featureNames() {
  FeatureNamesContext *_localctx = _tracker.createInstance<FeatureNamesContext>(_ctx, getState());
  enterRule(_localctx, 84, FeatParser::RuleFeatureNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(677);
    match(FeatParser::FEATURE_NAMES);
    setState(678);
    match(FeatParser::LCBRACE);
    setState(680); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(679);
      nameEntryStatement();
      setState(682); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::NAME);
    setState(684);
    match(FeatParser::RCBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtableContext ------------------------------------------------------------------

FeatParser::SubtableContext::SubtableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::SubtableContext::SUBTABLE() {
  return getToken(FeatParser::SUBTABLE, 0);
}


size_t FeatParser::SubtableContext::getRuleIndex() const {
  return FeatParser::RuleSubtable;
}


std::any FeatParser::SubtableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitSubtable(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::SubtableContext* FeatParser::subtable() {
  SubtableContext *_localctx = _tracker.createInstance<SubtableContext>(_ctx, getState());
  enterRule(_localctx, 86, FeatParser::RuleSubtable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(686);
    match(FeatParser::SUBTABLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_BASEContext ------------------------------------------------------------------

FeatParser::Table_BASEContext::Table_BASEContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_BASEContext::BASE() {
  return getTokens(FeatParser::BASE);
}

tree::TerminalNode* FeatParser::Table_BASEContext::BASE(size_t i) {
  return getToken(FeatParser::BASE, i);
}

tree::TerminalNode* FeatParser::Table_BASEContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_BASEContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_BASEContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::BaseStatementContext *> FeatParser::Table_BASEContext::baseStatement() {
  return getRuleContexts<FeatParser::BaseStatementContext>();
}

FeatParser::BaseStatementContext* FeatParser::Table_BASEContext::baseStatement(size_t i) {
  return getRuleContext<FeatParser::BaseStatementContext>(i);
}


size_t FeatParser::Table_BASEContext::getRuleIndex() const {
  return FeatParser::RuleTable_BASE;
}


std::any FeatParser::Table_BASEContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_BASE(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_BASEContext* FeatParser::table_BASE() {
  Table_BASEContext *_localctx = _tracker.createInstance<Table_BASEContext>(_ctx, getState());
  enterRule(_localctx, 88, FeatParser::RuleTable_BASE);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(688);
    match(FeatParser::BASE);
    setState(689);
    match(FeatParser::LCBRACE);
    setState(691); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(690);
      baseStatement();
      setState(693); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 5) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 5)) & 4323455642275676161) != 0));
    setState(695);
    match(FeatParser::RCBRACE);
    setState(696);
    match(FeatParser::BASE);
    setState(697);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseStatementContext ------------------------------------------------------------------

FeatParser::BaseStatementContext::BaseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::BaseStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::AxisTagsContext* FeatParser::BaseStatementContext::axisTags() {
  return getRuleContext<FeatParser::AxisTagsContext>(0);
}

FeatParser::AxisScriptsContext* FeatParser::BaseStatementContext::axisScripts() {
  return getRuleContext<FeatParser::AxisScriptsContext>(0);
}

FeatParser::IncludeContext* FeatParser::BaseStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::BaseStatementContext::getRuleIndex() const {
  return FeatParser::RuleBaseStatement;
}


std::any FeatParser::BaseStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitBaseStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::BaseStatementContext* FeatParser::baseStatement() {
  BaseStatementContext *_localctx = _tracker.createInstance<BaseStatementContext>(_ctx, getState());
  enterRule(_localctx, 90, FeatParser::RuleBaseStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(702);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::HA_BTL:
      case FeatParser::VA_BTL: {
        setState(699);
        axisTags();
        break;
      }

      case FeatParser::HA_BSL:
      case FeatParser::VA_BSL: {
        setState(700);
        axisScripts();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(701);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(704);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisTagsContext ------------------------------------------------------------------

FeatParser::AxisTagsContext::AxisTagsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisTagsContext::HA_BTL() {
  return getToken(FeatParser::HA_BTL, 0);
}

tree::TerminalNode* FeatParser::AxisTagsContext::VA_BTL() {
  return getToken(FeatParser::VA_BTL, 0);
}

std::vector<FeatParser::TagContext *> FeatParser::AxisTagsContext::tag() {
  return getRuleContexts<FeatParser::TagContext>();
}

FeatParser::TagContext* FeatParser::AxisTagsContext::tag(size_t i) {
  return getRuleContext<FeatParser::TagContext>(i);
}


size_t FeatParser::AxisTagsContext::getRuleIndex() const {
  return FeatParser::RuleAxisTags;
}


std::any FeatParser::AxisTagsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisTags(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisTagsContext* FeatParser::axisTags() {
  AxisTagsContext *_localctx = _tracker.createInstance<AxisTagsContext>(_ctx, getState());
  enterRule(_localctx, 92, FeatParser::RuleAxisTags);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(706);
    _la = _input->LA(1);
    if (!(_la == FeatParser::HA_BTL

    || _la == FeatParser::VA_BTL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(708); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(707);
      tag();
      setState(710); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::MARK || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 101) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisScriptsContext ------------------------------------------------------------------

FeatParser::AxisScriptsContext::AxisScriptsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::BaseScriptContext *> FeatParser::AxisScriptsContext::baseScript() {
  return getRuleContexts<FeatParser::BaseScriptContext>();
}

FeatParser::BaseScriptContext* FeatParser::AxisScriptsContext::baseScript(size_t i) {
  return getRuleContext<FeatParser::BaseScriptContext>(i);
}

tree::TerminalNode* FeatParser::AxisScriptsContext::HA_BSL() {
  return getToken(FeatParser::HA_BSL, 0);
}

tree::TerminalNode* FeatParser::AxisScriptsContext::VA_BSL() {
  return getToken(FeatParser::VA_BSL, 0);
}

std::vector<tree::TerminalNode *> FeatParser::AxisScriptsContext::COMMA() {
  return getTokens(FeatParser::COMMA);
}

tree::TerminalNode* FeatParser::AxisScriptsContext::COMMA(size_t i) {
  return getToken(FeatParser::COMMA, i);
}


size_t FeatParser::AxisScriptsContext::getRuleIndex() const {
  return FeatParser::RuleAxisScripts;
}


std::any FeatParser::AxisScriptsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisScripts(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisScriptsContext* FeatParser::axisScripts() {
  AxisScriptsContext *_localctx = _tracker.createInstance<AxisScriptsContext>(_ctx, getState());
  enterRule(_localctx, 94, FeatParser::RuleAxisScripts);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(712);
    _la = _input->LA(1);
    if (!(_la == FeatParser::HA_BSL

    || _la == FeatParser::VA_BSL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(713);
    baseScript();
    setState(718);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::COMMA) {
      setState(714);
      match(FeatParser::COMMA);
      setState(715);
      baseScript();
      setState(720);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseScriptContext ------------------------------------------------------------------

FeatParser::BaseScriptContext::BaseScriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::TagContext *> FeatParser::BaseScriptContext::tag() {
  return getRuleContexts<FeatParser::TagContext>();
}

FeatParser::TagContext* FeatParser::BaseScriptContext::tag(size_t i) {
  return getRuleContext<FeatParser::TagContext>(i);
}

std::vector<tree::TerminalNode *> FeatParser::BaseScriptContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::BaseScriptContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}


size_t FeatParser::BaseScriptContext::getRuleIndex() const {
  return FeatParser::RuleBaseScript;
}


std::any FeatParser::BaseScriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitBaseScript(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::BaseScriptContext* FeatParser::baseScript() {
  BaseScriptContext *_localctx = _tracker.createInstance<BaseScriptContext>(_ctx, getState());
  enterRule(_localctx, 96, FeatParser::RuleBaseScript);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(721);
    antlrcpp::downCast<BaseScriptContext *>(_localctx)->script = tag();
    setState(722);
    antlrcpp::downCast<BaseScriptContext *>(_localctx)->db = tag();
    setState(724); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(723);
      match(FeatParser::NUM);
      setState(726); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_GDEFContext ------------------------------------------------------------------

FeatParser::Table_GDEFContext::Table_GDEFContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_GDEFContext::GDEF() {
  return getTokens(FeatParser::GDEF);
}

tree::TerminalNode* FeatParser::Table_GDEFContext::GDEF(size_t i) {
  return getToken(FeatParser::GDEF, i);
}

tree::TerminalNode* FeatParser::Table_GDEFContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_GDEFContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_GDEFContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::GdefStatementContext *> FeatParser::Table_GDEFContext::gdefStatement() {
  return getRuleContexts<FeatParser::GdefStatementContext>();
}

FeatParser::GdefStatementContext* FeatParser::Table_GDEFContext::gdefStatement(size_t i) {
  return getRuleContext<FeatParser::GdefStatementContext>(i);
}


size_t FeatParser::Table_GDEFContext::getRuleIndex() const {
  return FeatParser::RuleTable_GDEF;
}


std::any FeatParser::Table_GDEFContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_GDEF(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_GDEFContext* FeatParser::table_GDEF() {
  Table_GDEFContext *_localctx = _tracker.createInstance<Table_GDEFContext>(_ctx, getState());
  enterRule(_localctx, 98, FeatParser::RuleTable_GDEF);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(728);
    match(FeatParser::GDEF);
    setState(729);
    match(FeatParser::LCBRACE);
    setState(731); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(730);
      gdefStatement();
      setState(733); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 15) != 0));
    setState(735);
    match(FeatParser::RCBRACE);
    setState(736);
    match(FeatParser::GDEF);
    setState(737);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefStatementContext ------------------------------------------------------------------

FeatParser::GdefStatementContext::GdefStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::GdefGlyphClassContext* FeatParser::GdefStatementContext::gdefGlyphClass() {
  return getRuleContext<FeatParser::GdefGlyphClassContext>(0);
}

FeatParser::GdefAttachContext* FeatParser::GdefStatementContext::gdefAttach() {
  return getRuleContext<FeatParser::GdefAttachContext>(0);
}

FeatParser::GdefLigCaretPosContext* FeatParser::GdefStatementContext::gdefLigCaretPos() {
  return getRuleContext<FeatParser::GdefLigCaretPosContext>(0);
}

FeatParser::GdefLigCaretIndexContext* FeatParser::GdefStatementContext::gdefLigCaretIndex() {
  return getRuleContext<FeatParser::GdefLigCaretIndexContext>(0);
}

FeatParser::IncludeContext* FeatParser::GdefStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::GdefStatementContext::getRuleIndex() const {
  return FeatParser::RuleGdefStatement;
}


std::any FeatParser::GdefStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefStatementContext* FeatParser::gdefStatement() {
  GdefStatementContext *_localctx = _tracker.createInstance<GdefStatementContext>(_ctx, getState());
  enterRule(_localctx, 100, FeatParser::RuleGdefStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(744);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::GLYPH_CLASS_DEF: {
        setState(739);
        gdefGlyphClass();
        break;
      }

      case FeatParser::ATTACH: {
        setState(740);
        gdefAttach();
        break;
      }

      case FeatParser::LIG_CARET_BY_POS: {
        setState(741);
        gdefLigCaretPos();
        break;
      }

      case FeatParser::LIG_CARET_BY_IDX: {
        setState(742);
        gdefLigCaretIndex();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(743);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(746);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefGlyphClassContext ------------------------------------------------------------------

FeatParser::GdefGlyphClassContext::GdefGlyphClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefGlyphClassContext::GLYPH_CLASS_DEF() {
  return getToken(FeatParser::GLYPH_CLASS_DEF, 0);
}

std::vector<FeatParser::GlyphClassOptionalContext *> FeatParser::GdefGlyphClassContext::glyphClassOptional() {
  return getRuleContexts<FeatParser::GlyphClassOptionalContext>();
}

FeatParser::GlyphClassOptionalContext* FeatParser::GdefGlyphClassContext::glyphClassOptional(size_t i) {
  return getRuleContext<FeatParser::GlyphClassOptionalContext>(i);
}

std::vector<tree::TerminalNode *> FeatParser::GdefGlyphClassContext::COMMA() {
  return getTokens(FeatParser::COMMA);
}

tree::TerminalNode* FeatParser::GdefGlyphClassContext::COMMA(size_t i) {
  return getToken(FeatParser::COMMA, i);
}


size_t FeatParser::GdefGlyphClassContext::getRuleIndex() const {
  return FeatParser::RuleGdefGlyphClass;
}


std::any FeatParser::GdefGlyphClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefGlyphClass(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefGlyphClassContext* FeatParser::gdefGlyphClass() {
  GdefGlyphClassContext *_localctx = _tracker.createInstance<GdefGlyphClassContext>(_ctx, getState());
  enterRule(_localctx, 102, FeatParser::RuleGdefGlyphClass);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(748);
    match(FeatParser::GLYPH_CLASS_DEF);
    setState(749);
    glyphClassOptional();
    setState(750);
    match(FeatParser::COMMA);
    setState(751);
    glyphClassOptional();
    setState(752);
    match(FeatParser::COMMA);
    setState(753);
    glyphClassOptional();
    setState(754);
    match(FeatParser::COMMA);
    setState(755);
    glyphClassOptional();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefAttachContext ------------------------------------------------------------------

FeatParser::GdefAttachContext::GdefAttachContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefAttachContext::ATTACH() {
  return getToken(FeatParser::ATTACH, 0);
}

FeatParser::LookupPatternContext* FeatParser::GdefAttachContext::lookupPattern() {
  return getRuleContext<FeatParser::LookupPatternContext>(0);
}

std::vector<tree::TerminalNode *> FeatParser::GdefAttachContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::GdefAttachContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}


size_t FeatParser::GdefAttachContext::getRuleIndex() const {
  return FeatParser::RuleGdefAttach;
}


std::any FeatParser::GdefAttachContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefAttach(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefAttachContext* FeatParser::gdefAttach() {
  GdefAttachContext *_localctx = _tracker.createInstance<GdefAttachContext>(_ctx, getState());
  enterRule(_localctx, 104, FeatParser::RuleGdefAttach);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(757);
    match(FeatParser::ATTACH);
    setState(758);
    lookupPattern();
    setState(760); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(759);
      match(FeatParser::NUM);
      setState(762); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefLigCaretPosContext ------------------------------------------------------------------

FeatParser::GdefLigCaretPosContext::GdefLigCaretPosContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefLigCaretPosContext::LIG_CARET_BY_POS() {
  return getToken(FeatParser::LIG_CARET_BY_POS, 0);
}

FeatParser::LookupPatternContext* FeatParser::GdefLigCaretPosContext::lookupPattern() {
  return getRuleContext<FeatParser::LookupPatternContext>(0);
}

std::vector<FeatParser::SingleValueLiteralContext *> FeatParser::GdefLigCaretPosContext::singleValueLiteral() {
  return getRuleContexts<FeatParser::SingleValueLiteralContext>();
}

FeatParser::SingleValueLiteralContext* FeatParser::GdefLigCaretPosContext::singleValueLiteral(size_t i) {
  return getRuleContext<FeatParser::SingleValueLiteralContext>(i);
}


size_t FeatParser::GdefLigCaretPosContext::getRuleIndex() const {
  return FeatParser::RuleGdefLigCaretPos;
}


std::any FeatParser::GdefLigCaretPosContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefLigCaretPos(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefLigCaretPosContext* FeatParser::gdefLigCaretPos() {
  GdefLigCaretPosContext *_localctx = _tracker.createInstance<GdefLigCaretPosContext>(_ctx, getState());
  enterRule(_localctx, 106, FeatParser::RuleGdefLigCaretPos);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(764);
    match(FeatParser::LIG_CARET_BY_POS);
    setState(765);
    lookupPattern();
    setState(767); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(766);
      singleValueLiteral();
      setState(769); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::LPAREN

    || _la == FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefLigCaretIndexContext ------------------------------------------------------------------

FeatParser::GdefLigCaretIndexContext::GdefLigCaretIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefLigCaretIndexContext::LIG_CARET_BY_IDX() {
  return getToken(FeatParser::LIG_CARET_BY_IDX, 0);
}

FeatParser::LookupPatternContext* FeatParser::GdefLigCaretIndexContext::lookupPattern() {
  return getRuleContext<FeatParser::LookupPatternContext>(0);
}

std::vector<tree::TerminalNode *> FeatParser::GdefLigCaretIndexContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::GdefLigCaretIndexContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}


size_t FeatParser::GdefLigCaretIndexContext::getRuleIndex() const {
  return FeatParser::RuleGdefLigCaretIndex;
}


std::any FeatParser::GdefLigCaretIndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefLigCaretIndex(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefLigCaretIndexContext* FeatParser::gdefLigCaretIndex() {
  GdefLigCaretIndexContext *_localctx = _tracker.createInstance<GdefLigCaretIndexContext>(_ctx, getState());
  enterRule(_localctx, 108, FeatParser::RuleGdefLigCaretIndex);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(771);
    match(FeatParser::LIG_CARET_BY_IDX);
    setState(772);
    lookupPattern();
    setState(774); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(773);
      match(FeatParser::NUM);
      setState(776); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_headContext ------------------------------------------------------------------

FeatParser::Table_headContext::Table_headContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_headContext::HEAD() {
  return getTokens(FeatParser::HEAD);
}

tree::TerminalNode* FeatParser::Table_headContext::HEAD(size_t i) {
  return getToken(FeatParser::HEAD, i);
}

tree::TerminalNode* FeatParser::Table_headContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_headContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_headContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::HeadStatementContext *> FeatParser::Table_headContext::headStatement() {
  return getRuleContexts<FeatParser::HeadStatementContext>();
}

FeatParser::HeadStatementContext* FeatParser::Table_headContext::headStatement(size_t i) {
  return getRuleContext<FeatParser::HeadStatementContext>(i);
}


size_t FeatParser::Table_headContext::getRuleIndex() const {
  return FeatParser::RuleTable_head;
}


std::any FeatParser::Table_headContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_head(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_headContext* FeatParser::table_head() {
  Table_headContext *_localctx = _tracker.createInstance<Table_headContext>(_ctx, getState());
  enterRule(_localctx, 110, FeatParser::RuleTable_head);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(778);
    match(FeatParser::HEAD);
    setState(779);
    match(FeatParser::LCBRACE);
    setState(781); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(780);
      headStatement();
      setState(783); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::FONT_REVISION);
    setState(785);
    match(FeatParser::RCBRACE);
    setState(786);
    match(FeatParser::HEAD);
    setState(787);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HeadStatementContext ------------------------------------------------------------------

FeatParser::HeadStatementContext::HeadStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HeadStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::HeadContext* FeatParser::HeadStatementContext::head() {
  return getRuleContext<FeatParser::HeadContext>(0);
}

FeatParser::IncludeContext* FeatParser::HeadStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::HeadStatementContext::getRuleIndex() const {
  return FeatParser::RuleHeadStatement;
}


std::any FeatParser::HeadStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHeadStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HeadStatementContext* FeatParser::headStatement() {
  HeadStatementContext *_localctx = _tracker.createInstance<HeadStatementContext>(_ctx, getState());
  enterRule(_localctx, 112, FeatParser::RuleHeadStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(791);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::FONT_REVISION: {
        setState(789);
        head();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(790);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(793);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HeadContext ------------------------------------------------------------------

FeatParser::HeadContext::HeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HeadContext::FONT_REVISION() {
  return getToken(FeatParser::FONT_REVISION, 0);
}

tree::TerminalNode* FeatParser::HeadContext::POINTNUM() {
  return getToken(FeatParser::POINTNUM, 0);
}


size_t FeatParser::HeadContext::getRuleIndex() const {
  return FeatParser::RuleHead;
}


std::any FeatParser::HeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHead(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HeadContext* FeatParser::head() {
  HeadContext *_localctx = _tracker.createInstance<HeadContext>(_ctx, getState());
  enterRule(_localctx, 114, FeatParser::RuleHead);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(795);
    match(FeatParser::FONT_REVISION);
    setState(796);
    match(FeatParser::POINTNUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_hheaContext ------------------------------------------------------------------

FeatParser::Table_hheaContext::Table_hheaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_hheaContext::HHEA() {
  return getTokens(FeatParser::HHEA);
}

tree::TerminalNode* FeatParser::Table_hheaContext::HHEA(size_t i) {
  return getToken(FeatParser::HHEA, i);
}

tree::TerminalNode* FeatParser::Table_hheaContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_hheaContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_hheaContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::HheaStatementContext *> FeatParser::Table_hheaContext::hheaStatement() {
  return getRuleContexts<FeatParser::HheaStatementContext>();
}

FeatParser::HheaStatementContext* FeatParser::Table_hheaContext::hheaStatement(size_t i) {
  return getRuleContext<FeatParser::HheaStatementContext>(i);
}


size_t FeatParser::Table_hheaContext::getRuleIndex() const {
  return FeatParser::RuleTable_hhea;
}


std::any FeatParser::Table_hheaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_hhea(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_hheaContext* FeatParser::table_hhea() {
  Table_hheaContext *_localctx = _tracker.createInstance<Table_hheaContext>(_ctx, getState());
  enterRule(_localctx, 116, FeatParser::RuleTable_hhea);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(798);
    match(FeatParser::HHEA);
    setState(799);
    match(FeatParser::LCBRACE);
    setState(803);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 15) != 0)) {
      setState(800);
      hheaStatement();
      setState(805);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(806);
    match(FeatParser::RCBRACE);
    setState(807);
    match(FeatParser::HHEA);
    setState(808);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HheaStatementContext ------------------------------------------------------------------

FeatParser::HheaStatementContext::HheaStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HheaStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::HheaContext* FeatParser::HheaStatementContext::hhea() {
  return getRuleContext<FeatParser::HheaContext>(0);
}

FeatParser::IncludeContext* FeatParser::HheaStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::HheaStatementContext::getRuleIndex() const {
  return FeatParser::RuleHheaStatement;
}


std::any FeatParser::HheaStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHheaStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HheaStatementContext* FeatParser::hheaStatement() {
  HheaStatementContext *_localctx = _tracker.createInstance<HheaStatementContext>(_ctx, getState());
  enterRule(_localctx, 118, FeatParser::RuleHheaStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(812);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::ASCENDER:
      case FeatParser::DESCENDER:
      case FeatParser::LINE_GAP:
      case FeatParser::CARET_OFFSET: {
        setState(810);
        hhea();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(811);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(814);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HheaContext ------------------------------------------------------------------

FeatParser::HheaContext::HheaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HheaContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

tree::TerminalNode* FeatParser::HheaContext::CARET_OFFSET() {
  return getToken(FeatParser::CARET_OFFSET, 0);
}

tree::TerminalNode* FeatParser::HheaContext::ASCENDER() {
  return getToken(FeatParser::ASCENDER, 0);
}

tree::TerminalNode* FeatParser::HheaContext::DESCENDER() {
  return getToken(FeatParser::DESCENDER, 0);
}

tree::TerminalNode* FeatParser::HheaContext::LINE_GAP() {
  return getToken(FeatParser::LINE_GAP, 0);
}


size_t FeatParser::HheaContext::getRuleIndex() const {
  return FeatParser::RuleHhea;
}


std::any FeatParser::HheaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHhea(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HheaContext* FeatParser::hhea() {
  HheaContext *_localctx = _tracker.createInstance<HheaContext>(_ctx, getState());
  enterRule(_localctx, 120, FeatParser::RuleHhea);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(816);
    _la = _input->LA(1);
    if (!(((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(817);
    match(FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_vheaContext ------------------------------------------------------------------

FeatParser::Table_vheaContext::Table_vheaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_vheaContext::VHEA() {
  return getTokens(FeatParser::VHEA);
}

tree::TerminalNode* FeatParser::Table_vheaContext::VHEA(size_t i) {
  return getToken(FeatParser::VHEA, i);
}

tree::TerminalNode* FeatParser::Table_vheaContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_vheaContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_vheaContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::VheaStatementContext *> FeatParser::Table_vheaContext::vheaStatement() {
  return getRuleContexts<FeatParser::VheaStatementContext>();
}

FeatParser::VheaStatementContext* FeatParser::Table_vheaContext::vheaStatement(size_t i) {
  return getRuleContext<FeatParser::VheaStatementContext>(i);
}


size_t FeatParser::Table_vheaContext::getRuleIndex() const {
  return FeatParser::RuleTable_vhea;
}


std::any FeatParser::Table_vheaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_vhea(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_vheaContext* FeatParser::table_vhea() {
  Table_vheaContext *_localctx = _tracker.createInstance<Table_vheaContext>(_ctx, getState());
  enterRule(_localctx, 122, FeatParser::RuleTable_vhea);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(819);
    match(FeatParser::VHEA);
    setState(820);
    match(FeatParser::LCBRACE);
    setState(824);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 110) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 110)) & 7) != 0)) {
      setState(821);
      vheaStatement();
      setState(826);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(827);
    match(FeatParser::RCBRACE);
    setState(828);
    match(FeatParser::VHEA);
    setState(829);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VheaStatementContext ------------------------------------------------------------------

FeatParser::VheaStatementContext::VheaStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::VheaStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::VheaContext* FeatParser::VheaStatementContext::vhea() {
  return getRuleContext<FeatParser::VheaContext>(0);
}

FeatParser::IncludeContext* FeatParser::VheaStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::VheaStatementContext::getRuleIndex() const {
  return FeatParser::RuleVheaStatement;
}


std::any FeatParser::VheaStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVheaStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VheaStatementContext* FeatParser::vheaStatement() {
  VheaStatementContext *_localctx = _tracker.createInstance<VheaStatementContext>(_ctx, getState());
  enterRule(_localctx, 124, FeatParser::RuleVheaStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(833);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::VERT_TYPO_ASCENDER:
      case FeatParser::VERT_TYPO_DESCENDER:
      case FeatParser::VERT_TYPO_LINE_GAP: {
        setState(831);
        vhea();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(832);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(835);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VheaContext ------------------------------------------------------------------

FeatParser::VheaContext::VheaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::VheaContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

tree::TerminalNode* FeatParser::VheaContext::VERT_TYPO_ASCENDER() {
  return getToken(FeatParser::VERT_TYPO_ASCENDER, 0);
}

tree::TerminalNode* FeatParser::VheaContext::VERT_TYPO_DESCENDER() {
  return getToken(FeatParser::VERT_TYPO_DESCENDER, 0);
}

tree::TerminalNode* FeatParser::VheaContext::VERT_TYPO_LINE_GAP() {
  return getToken(FeatParser::VERT_TYPO_LINE_GAP, 0);
}


size_t FeatParser::VheaContext::getRuleIndex() const {
  return FeatParser::RuleVhea;
}


std::any FeatParser::VheaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVhea(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VheaContext* FeatParser::vhea() {
  VheaContext *_localctx = _tracker.createInstance<VheaContext>(_ctx, getState());
  enterRule(_localctx, 126, FeatParser::RuleVhea);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(837);
    _la = _input->LA(1);
    if (!(((((_la - 110) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 110)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(838);
    match(FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_nameContext ------------------------------------------------------------------

FeatParser::Table_nameContext::Table_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_nameContext::NAME() {
  return getTokens(FeatParser::NAME);
}

tree::TerminalNode* FeatParser::Table_nameContext::NAME(size_t i) {
  return getToken(FeatParser::NAME, i);
}

tree::TerminalNode* FeatParser::Table_nameContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_nameContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_nameContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::NameStatementContext *> FeatParser::Table_nameContext::nameStatement() {
  return getRuleContexts<FeatParser::NameStatementContext>();
}

FeatParser::NameStatementContext* FeatParser::Table_nameContext::nameStatement(size_t i) {
  return getRuleContext<FeatParser::NameStatementContext>(i);
}


size_t FeatParser::Table_nameContext::getRuleIndex() const {
  return FeatParser::RuleTable_name;
}


std::any FeatParser::Table_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_name(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_nameContext* FeatParser::table_name() {
  Table_nameContext *_localctx = _tracker.createInstance<Table_nameContext>(_ctx, getState());
  enterRule(_localctx, 128, FeatParser::RuleTable_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(840);
    match(FeatParser::NAME);
    setState(841);
    match(FeatParser::LCBRACE);
    setState(843); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(842);
      nameStatement();
      setState(845); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::NAMEID);
    setState(847);
    match(FeatParser::RCBRACE);
    setState(848);
    match(FeatParser::NAME);
    setState(849);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameStatementContext ------------------------------------------------------------------

FeatParser::NameStatementContext::NameStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::NameIDContext* FeatParser::NameStatementContext::nameID() {
  return getRuleContext<FeatParser::NameIDContext>(0);
}

FeatParser::IncludeContext* FeatParser::NameStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::NameStatementContext::getRuleIndex() const {
  return FeatParser::RuleNameStatement;
}


std::any FeatParser::NameStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameStatementContext* FeatParser::nameStatement() {
  NameStatementContext *_localctx = _tracker.createInstance<NameStatementContext>(_ctx, getState());
  enterRule(_localctx, 130, FeatParser::RuleNameStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(853);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NAMEID: {
        setState(851);
        nameID();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(852);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(855);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameIDContext ------------------------------------------------------------------

FeatParser::NameIDContext::NameIDContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameIDContext::NAMEID() {
  return getToken(FeatParser::NAMEID, 0);
}

tree::TerminalNode* FeatParser::NameIDContext::STRVAL() {
  return getToken(FeatParser::STRVAL, 0);
}

std::vector<FeatParser::GenNumContext *> FeatParser::NameIDContext::genNum() {
  return getRuleContexts<FeatParser::GenNumContext>();
}

FeatParser::GenNumContext* FeatParser::NameIDContext::genNum(size_t i) {
  return getRuleContext<FeatParser::GenNumContext>(i);
}


size_t FeatParser::NameIDContext::getRuleIndex() const {
  return FeatParser::RuleNameID;
}


std::any FeatParser::NameIDContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameID(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameIDContext* FeatParser::nameID() {
  NameIDContext *_localctx = _tracker.createInstance<NameIDContext>(_ctx, getState());
  enterRule(_localctx, 132, FeatParser::RuleNameID);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(857);
    match(FeatParser::NAMEID);
    setState(858);
    antlrcpp::downCast<NameIDContext *>(_localctx)->id = genNum();
    setState(865);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 7) != 0)) {
      setState(859);
      antlrcpp::downCast<NameIDContext *>(_localctx)->plat = genNum();
      setState(863);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 136) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 136)) & 7) != 0)) {
        setState(860);
        antlrcpp::downCast<NameIDContext *>(_localctx)->spec = genNum();
        setState(861);
        antlrcpp::downCast<NameIDContext *>(_localctx)->lang = genNum();
      }
    }
    setState(867);
    match(FeatParser::STRVAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_OS_2Context ------------------------------------------------------------------

FeatParser::Table_OS_2Context::Table_OS_2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_OS_2Context::OS_2() {
  return getTokens(FeatParser::OS_2);
}

tree::TerminalNode* FeatParser::Table_OS_2Context::OS_2(size_t i) {
  return getToken(FeatParser::OS_2, i);
}

tree::TerminalNode* FeatParser::Table_OS_2Context::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_OS_2Context::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_OS_2Context::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::Os_2StatementContext *> FeatParser::Table_OS_2Context::os_2Statement() {
  return getRuleContexts<FeatParser::Os_2StatementContext>();
}

FeatParser::Os_2StatementContext* FeatParser::Table_OS_2Context::os_2Statement(size_t i) {
  return getRuleContext<FeatParser::Os_2StatementContext>(i);
}


size_t FeatParser::Table_OS_2Context::getRuleIndex() const {
  return FeatParser::RuleTable_OS_2;
}


std::any FeatParser::Table_OS_2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_OS_2(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_OS_2Context* FeatParser::table_OS_2() {
  Table_OS_2Context *_localctx = _tracker.createInstance<Table_OS_2Context>(_ctx, getState());
  enterRule(_localctx, 134, FeatParser::RuleTable_OS_2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(869);
    match(FeatParser::OS_2);
    setState(870);
    match(FeatParser::LCBRACE);
    setState(872); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(871);
      os_2Statement();
      setState(874); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || ((((_la - 82) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 82)) & 262143) != 0));
    setState(876);
    match(FeatParser::RCBRACE);
    setState(877);
    match(FeatParser::OS_2);
    setState(878);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Os_2StatementContext ------------------------------------------------------------------

FeatParser::Os_2StatementContext::Os_2StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::Os_2StatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::Os_2Context* FeatParser::Os_2StatementContext::os_2() {
  return getRuleContext<FeatParser::Os_2Context>(0);
}

FeatParser::IncludeContext* FeatParser::Os_2StatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::Os_2StatementContext::getRuleIndex() const {
  return FeatParser::RuleOs_2Statement;
}


std::any FeatParser::Os_2StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitOs_2Statement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Os_2StatementContext* FeatParser::os_2Statement() {
  Os_2StatementContext *_localctx = _tracker.createInstance<Os_2StatementContext>(_ctx, getState());
  enterRule(_localctx, 136, FeatParser::RuleOs_2Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(882);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::FS_TYPE:
      case FeatParser::FS_TYPE_v:
      case FeatParser::OS2_LOWER_OP_SIZE:
      case FeatParser::OS2_UPPER_OP_SIZE:
      case FeatParser::PANOSE:
      case FeatParser::TYPO_ASCENDER:
      case FeatParser::TYPO_DESCENDER:
      case FeatParser::TYPO_LINE_GAP:
      case FeatParser::WIN_ASCENT:
      case FeatParser::WIN_DESCENT:
      case FeatParser::X_HEIGHT:
      case FeatParser::CAP_HEIGHT:
      case FeatParser::WEIGHT_CLASS:
      case FeatParser::WIDTH_CLASS:
      case FeatParser::VENDOR:
      case FeatParser::UNICODE_RANGE:
      case FeatParser::CODE_PAGE_RANGE:
      case FeatParser::FAMILY_CLASS: {
        setState(880);
        os_2();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(881);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(884);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Os_2Context ------------------------------------------------------------------

FeatParser::Os_2Context::Os_2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::Os_2Context::TYPO_ASCENDER() {
  return getToken(FeatParser::TYPO_ASCENDER, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::TYPO_DESCENDER() {
  return getToken(FeatParser::TYPO_DESCENDER, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::TYPO_LINE_GAP() {
  return getToken(FeatParser::TYPO_LINE_GAP, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::WIN_ASCENT() {
  return getToken(FeatParser::WIN_ASCENT, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::WIN_DESCENT() {
  return getToken(FeatParser::WIN_DESCENT, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::X_HEIGHT() {
  return getToken(FeatParser::X_HEIGHT, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::CAP_HEIGHT() {
  return getToken(FeatParser::CAP_HEIGHT, 0);
}

std::vector<tree::TerminalNode *> FeatParser::Os_2Context::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::Os_2Context::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}

tree::TerminalNode* FeatParser::Os_2Context::FS_TYPE() {
  return getToken(FeatParser::FS_TYPE, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::FS_TYPE_v() {
  return getToken(FeatParser::FS_TYPE_v, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::WEIGHT_CLASS() {
  return getToken(FeatParser::WEIGHT_CLASS, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::WIDTH_CLASS() {
  return getToken(FeatParser::WIDTH_CLASS, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::OS2_LOWER_OP_SIZE() {
  return getToken(FeatParser::OS2_LOWER_OP_SIZE, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::OS2_UPPER_OP_SIZE() {
  return getToken(FeatParser::OS2_UPPER_OP_SIZE, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::FAMILY_CLASS() {
  return getToken(FeatParser::FAMILY_CLASS, 0);
}

FeatParser::GenNumContext* FeatParser::Os_2Context::genNum() {
  return getRuleContext<FeatParser::GenNumContext>(0);
}

tree::TerminalNode* FeatParser::Os_2Context::VENDOR() {
  return getToken(FeatParser::VENDOR, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::STRVAL() {
  return getToken(FeatParser::STRVAL, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::PANOSE() {
  return getToken(FeatParser::PANOSE, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::UNICODE_RANGE() {
  return getToken(FeatParser::UNICODE_RANGE, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::CODE_PAGE_RANGE() {
  return getToken(FeatParser::CODE_PAGE_RANGE, 0);
}


size_t FeatParser::Os_2Context::getRuleIndex() const {
  return FeatParser::RuleOs_2;
}


std::any FeatParser::Os_2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitOs_2(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Os_2Context* FeatParser::os_2() {
  Os_2Context *_localctx = _tracker.createInstance<Os_2Context>(_ctx, getState());
  enterRule(_localctx, 138, FeatParser::RuleOs_2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(911);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::TYPO_ASCENDER:
      case FeatParser::TYPO_DESCENDER:
      case FeatParser::TYPO_LINE_GAP:
      case FeatParser::WIN_ASCENT:
      case FeatParser::WIN_DESCENT:
      case FeatParser::X_HEIGHT:
      case FeatParser::CAP_HEIGHT: {
        enterOuterAlt(_localctx, 1);
        setState(886);
        _la = _input->LA(1);
        if (!(((((_la - 87) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 87)) & 127) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(887);
        antlrcpp::downCast<Os_2Context *>(_localctx)->num = match(FeatParser::NUM);
        break;
      }

      case FeatParser::FS_TYPE:
      case FeatParser::FS_TYPE_v:
      case FeatParser::OS2_LOWER_OP_SIZE:
      case FeatParser::OS2_UPPER_OP_SIZE:
      case FeatParser::WEIGHT_CLASS:
      case FeatParser::WIDTH_CLASS: {
        enterOuterAlt(_localctx, 2);
        setState(888);
        _la = _input->LA(1);
        if (!(((((_la - 82) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 82)) & 12303) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(889);
        antlrcpp::downCast<Os_2Context *>(_localctx)->unum = match(FeatParser::NUM);
        break;
      }

      case FeatParser::FAMILY_CLASS: {
        enterOuterAlt(_localctx, 3);
        setState(890);
        match(FeatParser::FAMILY_CLASS);
        setState(891);
        antlrcpp::downCast<Os_2Context *>(_localctx)->gnum = genNum();
        break;
      }

      case FeatParser::VENDOR: {
        enterOuterAlt(_localctx, 4);
        setState(892);
        match(FeatParser::VENDOR);
        setState(893);
        match(FeatParser::STRVAL);
        break;
      }

      case FeatParser::PANOSE: {
        enterOuterAlt(_localctx, 5);
        setState(894);
        match(FeatParser::PANOSE);
        setState(895);
        match(FeatParser::NUM);
        setState(896);
        match(FeatParser::NUM);
        setState(897);
        match(FeatParser::NUM);
        setState(898);
        match(FeatParser::NUM);
        setState(899);
        match(FeatParser::NUM);
        setState(900);
        match(FeatParser::NUM);
        setState(901);
        match(FeatParser::NUM);
        setState(902);
        match(FeatParser::NUM);
        setState(903);
        match(FeatParser::NUM);
        setState(904);
        match(FeatParser::NUM);
        break;
      }

      case FeatParser::UNICODE_RANGE:
      case FeatParser::CODE_PAGE_RANGE: {
        enterOuterAlt(_localctx, 6);
        setState(905);
        _la = _input->LA(1);
        if (!(_la == FeatParser::UNICODE_RANGE

        || _la == FeatParser::CODE_PAGE_RANGE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(907); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(906);
          match(FeatParser::NUM);
          setState(909); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::NUM);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_STATContext ------------------------------------------------------------------

FeatParser::Table_STATContext::Table_STATContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_STATContext::STAT() {
  return getTokens(FeatParser::STAT);
}

tree::TerminalNode* FeatParser::Table_STATContext::STAT(size_t i) {
  return getToken(FeatParser::STAT, i);
}

tree::TerminalNode* FeatParser::Table_STATContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_STATContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_STATContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::StatStatementContext *> FeatParser::Table_STATContext::statStatement() {
  return getRuleContexts<FeatParser::StatStatementContext>();
}

FeatParser::StatStatementContext* FeatParser::Table_STATContext::statStatement(size_t i) {
  return getRuleContext<FeatParser::StatStatementContext>(i);
}


size_t FeatParser::Table_STATContext::getRuleIndex() const {
  return FeatParser::RuleTable_STAT;
}


std::any FeatParser::Table_STATContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_STAT(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_STATContext* FeatParser::table_STAT() {
  Table_STATContext *_localctx = _tracker.createInstance<Table_STATContext>(_ctx, getState());
  enterRule(_localctx, 140, FeatParser::RuleTable_STAT);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(913);
    match(FeatParser::STAT);
    setState(914);
    match(FeatParser::LCBRACE);
    setState(916); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(915);
      statStatement();
      setState(918); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || ((((_la - 101) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 101)) & 15) != 0));
    setState(920);
    match(FeatParser::RCBRACE);
    setState(921);
    match(FeatParser::STAT);
    setState(922);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatStatementContext ------------------------------------------------------------------

FeatParser::StatStatementContext::StatStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::StatStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::DesignAxisContext* FeatParser::StatStatementContext::designAxis() {
  return getRuleContext<FeatParser::DesignAxisContext>(0);
}

FeatParser::AxisValueContext* FeatParser::StatStatementContext::axisValue() {
  return getRuleContext<FeatParser::AxisValueContext>(0);
}

FeatParser::ElidedFallbackNameContext* FeatParser::StatStatementContext::elidedFallbackName() {
  return getRuleContext<FeatParser::ElidedFallbackNameContext>(0);
}

FeatParser::ElidedFallbackNameIDContext* FeatParser::StatStatementContext::elidedFallbackNameID() {
  return getRuleContext<FeatParser::ElidedFallbackNameIDContext>(0);
}

FeatParser::IncludeContext* FeatParser::StatStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::StatStatementContext::getRuleIndex() const {
  return FeatParser::RuleStatStatement;
}


std::any FeatParser::StatStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitStatStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::StatStatementContext* FeatParser::statStatement() {
  StatStatementContext *_localctx = _tracker.createInstance<StatStatementContext>(_ctx, getState());
  enterRule(_localctx, 142, FeatParser::RuleStatStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(929);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::DESIGN_AXIS: {
        setState(924);
        designAxis();
        break;
      }

      case FeatParser::AXIS_VALUE: {
        setState(925);
        axisValue();
        break;
      }

      case FeatParser::ELIDED_FALLBACK_NAME: {
        setState(926);
        elidedFallbackName();
        break;
      }

      case FeatParser::ELIDED_FALLBACK_NAME_ID: {
        setState(927);
        elidedFallbackNameID();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(928);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(931);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignAxisContext ------------------------------------------------------------------

FeatParser::DesignAxisContext::DesignAxisContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::DesignAxisContext::DESIGN_AXIS() {
  return getToken(FeatParser::DESIGN_AXIS, 0);
}

FeatParser::TagContext* FeatParser::DesignAxisContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}

tree::TerminalNode* FeatParser::DesignAxisContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

tree::TerminalNode* FeatParser::DesignAxisContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::DesignAxisContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

std::vector<FeatParser::NameEntryStatementContext *> FeatParser::DesignAxisContext::nameEntryStatement() {
  return getRuleContexts<FeatParser::NameEntryStatementContext>();
}

FeatParser::NameEntryStatementContext* FeatParser::DesignAxisContext::nameEntryStatement(size_t i) {
  return getRuleContext<FeatParser::NameEntryStatementContext>(i);
}


size_t FeatParser::DesignAxisContext::getRuleIndex() const {
  return FeatParser::RuleDesignAxis;
}


std::any FeatParser::DesignAxisContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitDesignAxis(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::DesignAxisContext* FeatParser::designAxis() {
  DesignAxisContext *_localctx = _tracker.createInstance<DesignAxisContext>(_ctx, getState());
  enterRule(_localctx, 144, FeatParser::RuleDesignAxis);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(933);
    match(FeatParser::DESIGN_AXIS);
    setState(934);
    tag();
    setState(935);
    match(FeatParser::NUM);
    setState(936);
    match(FeatParser::LCBRACE);
    setState(938); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(937);
      nameEntryStatement();
      setState(940); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::NAME);
    setState(942);
    match(FeatParser::RCBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisValueContext ------------------------------------------------------------------

FeatParser::AxisValueContext::AxisValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisValueContext::AXIS_VALUE() {
  return getToken(FeatParser::AXIS_VALUE, 0);
}

tree::TerminalNode* FeatParser::AxisValueContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::AxisValueContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

std::vector<FeatParser::AxisValueStatementContext *> FeatParser::AxisValueContext::axisValueStatement() {
  return getRuleContexts<FeatParser::AxisValueStatementContext>();
}

FeatParser::AxisValueStatementContext* FeatParser::AxisValueContext::axisValueStatement(size_t i) {
  return getRuleContext<FeatParser::AxisValueStatementContext>(i);
}


size_t FeatParser::AxisValueContext::getRuleIndex() const {
  return FeatParser::RuleAxisValue;
}


std::any FeatParser::AxisValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisValue(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisValueContext* FeatParser::axisValue() {
  AxisValueContext *_localctx = _tracker.createInstance<AxisValueContext>(_ctx, getState());
  enterRule(_localctx, 146, FeatParser::RuleAxisValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(944);
    match(FeatParser::AXIS_VALUE);
    setState(945);
    match(FeatParser::LCBRACE);
    setState(947); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(946);
      axisValueStatement();
      setState(949); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || ((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & 201326593) != 0));
    setState(951);
    match(FeatParser::RCBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisValueStatementContext ------------------------------------------------------------------

FeatParser::AxisValueStatementContext::AxisValueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisValueStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::NameEntryContext* FeatParser::AxisValueStatementContext::nameEntry() {
  return getRuleContext<FeatParser::NameEntryContext>(0);
}

FeatParser::AxisValueLocationContext* FeatParser::AxisValueStatementContext::axisValueLocation() {
  return getRuleContext<FeatParser::AxisValueLocationContext>(0);
}

FeatParser::AxisValueFlagsContext* FeatParser::AxisValueStatementContext::axisValueFlags() {
  return getRuleContext<FeatParser::AxisValueFlagsContext>(0);
}

FeatParser::IncludeContext* FeatParser::AxisValueStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::AxisValueStatementContext::getRuleIndex() const {
  return FeatParser::RuleAxisValueStatement;
}


std::any FeatParser::AxisValueStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisValueStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisValueStatementContext* FeatParser::axisValueStatement() {
  AxisValueStatementContext *_localctx = _tracker.createInstance<AxisValueStatementContext>(_ctx, getState());
  enterRule(_localctx, 148, FeatParser::RuleAxisValueStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(957);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NAME: {
        setState(953);
        nameEntry();
        break;
      }

      case FeatParser::LOCATION: {
        setState(954);
        axisValueLocation();
        break;
      }

      case FeatParser::FLAG: {
        setState(955);
        axisValueFlags();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(956);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(959);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisValueLocationContext ------------------------------------------------------------------

FeatParser::AxisValueLocationContext::AxisValueLocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisValueLocationContext::LOCATION() {
  return getToken(FeatParser::LOCATION, 0);
}

FeatParser::TagContext* FeatParser::AxisValueLocationContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}

std::vector<FeatParser::FixedNumContext *> FeatParser::AxisValueLocationContext::fixedNum() {
  return getRuleContexts<FeatParser::FixedNumContext>();
}

FeatParser::FixedNumContext* FeatParser::AxisValueLocationContext::fixedNum(size_t i) {
  return getRuleContext<FeatParser::FixedNumContext>(i);
}


size_t FeatParser::AxisValueLocationContext::getRuleIndex() const {
  return FeatParser::RuleAxisValueLocation;
}


std::any FeatParser::AxisValueLocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisValueLocation(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisValueLocationContext* FeatParser::axisValueLocation() {
  AxisValueLocationContext *_localctx = _tracker.createInstance<AxisValueLocationContext>(_ctx, getState());
  enterRule(_localctx, 150, FeatParser::RuleAxisValueLocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(961);
    match(FeatParser::LOCATION);
    setState(962);
    tag();
    setState(963);
    fixedNum();
    setState(968);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::POINTNUM

    || _la == FeatParser::NUM) {
      setState(964);
      fixedNum();
      setState(966);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FeatParser::POINTNUM

      || _la == FeatParser::NUM) {
        setState(965);
        fixedNum();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisValueFlagsContext ------------------------------------------------------------------

FeatParser::AxisValueFlagsContext::AxisValueFlagsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisValueFlagsContext::FLAG() {
  return getToken(FeatParser::FLAG, 0);
}

std::vector<tree::TerminalNode *> FeatParser::AxisValueFlagsContext::AXIS_OSFA() {
  return getTokens(FeatParser::AXIS_OSFA);
}

tree::TerminalNode* FeatParser::AxisValueFlagsContext::AXIS_OSFA(size_t i) {
  return getToken(FeatParser::AXIS_OSFA, i);
}

std::vector<tree::TerminalNode *> FeatParser::AxisValueFlagsContext::AXIS_EAVN() {
  return getTokens(FeatParser::AXIS_EAVN);
}

tree::TerminalNode* FeatParser::AxisValueFlagsContext::AXIS_EAVN(size_t i) {
  return getToken(FeatParser::AXIS_EAVN, i);
}


size_t FeatParser::AxisValueFlagsContext::getRuleIndex() const {
  return FeatParser::RuleAxisValueFlags;
}


std::any FeatParser::AxisValueFlagsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisValueFlags(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisValueFlagsContext* FeatParser::axisValueFlags() {
  AxisValueFlagsContext *_localctx = _tracker.createInstance<AxisValueFlagsContext>(_ctx, getState());
  enterRule(_localctx, 152, FeatParser::RuleAxisValueFlags);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(970);
    match(FeatParser::FLAG);
    setState(972); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(971);
      _la = _input->LA(1);
      if (!(_la == FeatParser::AXIS_EAVN

      || _la == FeatParser::AXIS_OSFA)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(974); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::AXIS_EAVN

    || _la == FeatParser::AXIS_OSFA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElidedFallbackNameContext ------------------------------------------------------------------

FeatParser::ElidedFallbackNameContext::ElidedFallbackNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ElidedFallbackNameContext::ELIDED_FALLBACK_NAME() {
  return getToken(FeatParser::ELIDED_FALLBACK_NAME, 0);
}

tree::TerminalNode* FeatParser::ElidedFallbackNameContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::ElidedFallbackNameContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

std::vector<FeatParser::NameEntryStatementContext *> FeatParser::ElidedFallbackNameContext::nameEntryStatement() {
  return getRuleContexts<FeatParser::NameEntryStatementContext>();
}

FeatParser::NameEntryStatementContext* FeatParser::ElidedFallbackNameContext::nameEntryStatement(size_t i) {
  return getRuleContext<FeatParser::NameEntryStatementContext>(i);
}


size_t FeatParser::ElidedFallbackNameContext::getRuleIndex() const {
  return FeatParser::RuleElidedFallbackName;
}


std::any FeatParser::ElidedFallbackNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitElidedFallbackName(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ElidedFallbackNameContext* FeatParser::elidedFallbackName() {
  ElidedFallbackNameContext *_localctx = _tracker.createInstance<ElidedFallbackNameContext>(_ctx, getState());
  enterRule(_localctx, 154, FeatParser::RuleElidedFallbackName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(976);
    match(FeatParser::ELIDED_FALLBACK_NAME);
    setState(977);
    match(FeatParser::LCBRACE);
    setState(979); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(978);
      nameEntryStatement();
      setState(981); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::NAME);
    setState(983);
    match(FeatParser::RCBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameEntryStatementContext ------------------------------------------------------------------

FeatParser::NameEntryStatementContext::NameEntryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameEntryStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::NameEntryContext* FeatParser::NameEntryStatementContext::nameEntry() {
  return getRuleContext<FeatParser::NameEntryContext>(0);
}

FeatParser::IncludeContext* FeatParser::NameEntryStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::NameEntryStatementContext::getRuleIndex() const {
  return FeatParser::RuleNameEntryStatement;
}


std::any FeatParser::NameEntryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameEntryStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameEntryStatementContext* FeatParser::nameEntryStatement() {
  NameEntryStatementContext *_localctx = _tracker.createInstance<NameEntryStatementContext>(_ctx, getState());
  enterRule(_localctx, 156, FeatParser::RuleNameEntryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(987);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NAME: {
        setState(985);
        nameEntry();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(986);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(989);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElidedFallbackNameIDContext ------------------------------------------------------------------

FeatParser::ElidedFallbackNameIDContext::ElidedFallbackNameIDContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ElidedFallbackNameIDContext::ELIDED_FALLBACK_NAME_ID() {
  return getToken(FeatParser::ELIDED_FALLBACK_NAME_ID, 0);
}

FeatParser::GenNumContext* FeatParser::ElidedFallbackNameIDContext::genNum() {
  return getRuleContext<FeatParser::GenNumContext>(0);
}


size_t FeatParser::ElidedFallbackNameIDContext::getRuleIndex() const {
  return FeatParser::RuleElidedFallbackNameID;
}


std::any FeatParser::ElidedFallbackNameIDContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitElidedFallbackNameID(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ElidedFallbackNameIDContext* FeatParser::elidedFallbackNameID() {
  ElidedFallbackNameIDContext *_localctx = _tracker.createInstance<ElidedFallbackNameIDContext>(_ctx, getState());
  enterRule(_localctx, 158, FeatParser::RuleElidedFallbackNameID);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(991);
    match(FeatParser::ELIDED_FALLBACK_NAME_ID);
    setState(992);
    genNum();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameEntryContext ------------------------------------------------------------------

FeatParser::NameEntryContext::NameEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameEntryContext::NAME() {
  return getToken(FeatParser::NAME, 0);
}

tree::TerminalNode* FeatParser::NameEntryContext::STRVAL() {
  return getToken(FeatParser::STRVAL, 0);
}

std::vector<FeatParser::GenNumContext *> FeatParser::NameEntryContext::genNum() {
  return getRuleContexts<FeatParser::GenNumContext>();
}

FeatParser::GenNumContext* FeatParser::NameEntryContext::genNum(size_t i) {
  return getRuleContext<FeatParser::GenNumContext>(i);
}


size_t FeatParser::NameEntryContext::getRuleIndex() const {
  return FeatParser::RuleNameEntry;
}


std::any FeatParser::NameEntryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameEntry(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameEntryContext* FeatParser::nameEntry() {
  NameEntryContext *_localctx = _tracker.createInstance<NameEntryContext>(_ctx, getState());
  enterRule(_localctx, 160, FeatParser::RuleNameEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(994);
    match(FeatParser::NAME);
    setState(1001);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 7) != 0)) {
      setState(995);
      genNum();
      setState(999);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 136) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 136)) & 7) != 0)) {
        setState(996);
        genNum();
        setState(997);
        genNum();
      }
    }
    setState(1003);
    match(FeatParser::STRVAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_vmtxContext ------------------------------------------------------------------

FeatParser::Table_vmtxContext::Table_vmtxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_vmtxContext::VMTX() {
  return getTokens(FeatParser::VMTX);
}

tree::TerminalNode* FeatParser::Table_vmtxContext::VMTX(size_t i) {
  return getToken(FeatParser::VMTX, i);
}

tree::TerminalNode* FeatParser::Table_vmtxContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_vmtxContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_vmtxContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::VmtxStatementContext *> FeatParser::Table_vmtxContext::vmtxStatement() {
  return getRuleContexts<FeatParser::VmtxStatementContext>();
}

FeatParser::VmtxStatementContext* FeatParser::Table_vmtxContext::vmtxStatement(size_t i) {
  return getRuleContext<FeatParser::VmtxStatementContext>(i);
}


size_t FeatParser::Table_vmtxContext::getRuleIndex() const {
  return FeatParser::RuleTable_vmtx;
}


std::any FeatParser::Table_vmtxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_vmtx(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_vmtxContext* FeatParser::table_vmtx() {
  Table_vmtxContext *_localctx = _tracker.createInstance<Table_vmtxContext>(_ctx, getState());
  enterRule(_localctx, 162, FeatParser::RuleTable_vmtx);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1005);
    match(FeatParser::VMTX);
    setState(1006);
    match(FeatParser::LCBRACE);
    setState(1008); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1007);
      vmtxStatement();
      setState(1010); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::VERT_ORIGIN_Y

    || _la == FeatParser::VERT_ADVANCE_Y);
    setState(1012);
    match(FeatParser::RCBRACE);
    setState(1013);
    match(FeatParser::VMTX);
    setState(1014);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VmtxStatementContext ------------------------------------------------------------------

FeatParser::VmtxStatementContext::VmtxStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::VmtxStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::VmtxContext* FeatParser::VmtxStatementContext::vmtx() {
  return getRuleContext<FeatParser::VmtxContext>(0);
}

FeatParser::IncludeContext* FeatParser::VmtxStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::VmtxStatementContext::getRuleIndex() const {
  return FeatParser::RuleVmtxStatement;
}


std::any FeatParser::VmtxStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVmtxStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VmtxStatementContext* FeatParser::vmtxStatement() {
  VmtxStatementContext *_localctx = _tracker.createInstance<VmtxStatementContext>(_ctx, getState());
  enterRule(_localctx, 164, FeatParser::RuleVmtxStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1018);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::VERT_ORIGIN_Y:
      case FeatParser::VERT_ADVANCE_Y: {
        setState(1016);
        vmtx();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(1017);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1020);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VmtxContext ------------------------------------------------------------------

FeatParser::VmtxContext::VmtxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::GlyphContext* FeatParser::VmtxContext::glyph() {
  return getRuleContext<FeatParser::GlyphContext>(0);
}

tree::TerminalNode* FeatParser::VmtxContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

tree::TerminalNode* FeatParser::VmtxContext::VERT_ORIGIN_Y() {
  return getToken(FeatParser::VERT_ORIGIN_Y, 0);
}

tree::TerminalNode* FeatParser::VmtxContext::VERT_ADVANCE_Y() {
  return getToken(FeatParser::VERT_ADVANCE_Y, 0);
}


size_t FeatParser::VmtxContext::getRuleIndex() const {
  return FeatParser::RuleVmtx;
}


std::any FeatParser::VmtxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVmtx(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VmtxContext* FeatParser::vmtx() {
  VmtxContext *_localctx = _tracker.createInstance<VmtxContext>(_ctx, getState());
  enterRule(_localctx, 166, FeatParser::RuleVmtx);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1022);
    _la = _input->LA(1);
    if (!(_la == FeatParser::VERT_ORIGIN_Y

    || _la == FeatParser::VERT_ADVANCE_Y)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1023);
    glyph();
    setState(1024);
    match(FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnchorContext ------------------------------------------------------------------

FeatParser::AnchorContext::AnchorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AnchorContext::BEGINVALUE() {
  return getToken(FeatParser::BEGINVALUE, 0);
}

tree::TerminalNode* FeatParser::AnchorContext::ANCHOR() {
  return getToken(FeatParser::ANCHOR, 0);
}

tree::TerminalNode* FeatParser::AnchorContext::ENDVALUE() {
  return getToken(FeatParser::ENDVALUE, 0);
}

tree::TerminalNode* FeatParser::AnchorContext::KNULL() {
  return getToken(FeatParser::KNULL, 0);
}

FeatParser::LabelContext* FeatParser::AnchorContext::label() {
  return getRuleContext<FeatParser::LabelContext>(0);
}

std::vector<tree::TerminalNode *> FeatParser::AnchorContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::AnchorContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}

tree::TerminalNode* FeatParser::AnchorContext::CONTOURPOINT() {
  return getToken(FeatParser::CONTOURPOINT, 0);
}


size_t FeatParser::AnchorContext::getRuleIndex() const {
  return FeatParser::RuleAnchor;
}


std::any FeatParser::AnchorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnchor(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnchorContext* FeatParser::anchor() {
  AnchorContext *_localctx = _tracker.createInstance<AnchorContext>(_ctx, getState());
  enterRule(_localctx, 168, FeatParser::RuleAnchor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1026);
    match(FeatParser::BEGINVALUE);
    setState(1027);
    match(FeatParser::ANCHOR);
    setState(1036);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NUM: {
        setState(1028);
        antlrcpp::downCast<AnchorContext *>(_localctx)->xval = match(FeatParser::NUM);
        setState(1029);
        antlrcpp::downCast<AnchorContext *>(_localctx)->yval = match(FeatParser::NUM);
        setState(1032);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::CONTOURPOINT) {
          setState(1030);
          match(FeatParser::CONTOURPOINT);
          setState(1031);
          antlrcpp::downCast<AnchorContext *>(_localctx)->cp = match(FeatParser::NUM);
        }
        break;
      }

      case FeatParser::KNULL: {
        setState(1034);
        match(FeatParser::KNULL);
        break;
      }

      case FeatParser::MARK:
      case FeatParser::AXISUNIT:
      case FeatParser::NAMELABEL: {
        setState(1035);
        antlrcpp::downCast<AnchorContext *>(_localctx)->name = label();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1038);
    match(FeatParser::ENDVALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupPatternContext ------------------------------------------------------------------

FeatParser::LookupPatternContext::LookupPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::LookupPatternElementContext *> FeatParser::LookupPatternContext::lookupPatternElement() {
  return getRuleContexts<FeatParser::LookupPatternElementContext>();
}

FeatParser::LookupPatternElementContext* FeatParser::LookupPatternContext::lookupPatternElement(size_t i) {
  return getRuleContext<FeatParser::LookupPatternElementContext>(i);
}


size_t FeatParser::LookupPatternContext::getRuleIndex() const {
  return FeatParser::RuleLookupPattern;
}


std::any FeatParser::LookupPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupPattern(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupPatternContext* FeatParser::lookupPattern() {
  LookupPatternContext *_localctx = _tracker.createInstance<LookupPatternContext>(_ctx, getState());
  enterRule(_localctx, 170, FeatParser::RuleLookupPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1041); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1040);
      lookupPatternElement();
      setState(1043); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NOTDEF || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 129025) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupPatternElementContext ------------------------------------------------------------------

FeatParser::LookupPatternElementContext::LookupPatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::PatternElementContext* FeatParser::LookupPatternElementContext::patternElement() {
  return getRuleContext<FeatParser::PatternElementContext>(0);
}

std::vector<tree::TerminalNode *> FeatParser::LookupPatternElementContext::LOOKUP() {
  return getTokens(FeatParser::LOOKUP);
}

tree::TerminalNode* FeatParser::LookupPatternElementContext::LOOKUP(size_t i) {
  return getToken(FeatParser::LOOKUP, i);
}

std::vector<FeatParser::LabelContext *> FeatParser::LookupPatternElementContext::label() {
  return getRuleContexts<FeatParser::LabelContext>();
}

FeatParser::LabelContext* FeatParser::LookupPatternElementContext::label(size_t i) {
  return getRuleContext<FeatParser::LabelContext>(i);
}


size_t FeatParser::LookupPatternElementContext::getRuleIndex() const {
  return FeatParser::RuleLookupPatternElement;
}


std::any FeatParser::LookupPatternElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupPatternElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupPatternElementContext* FeatParser::lookupPatternElement() {
  LookupPatternElementContext *_localctx = _tracker.createInstance<LookupPatternElementContext>(_ctx, getState());
  enterRule(_localctx, 172, FeatParser::RuleLookupPatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1045);
    patternElement();
    setState(1050);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::LOOKUP) {
      setState(1046);
      match(FeatParser::LOOKUP);
      setState(1047);
      label();
      setState(1052);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

FeatParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::PatternElementContext *> FeatParser::PatternContext::patternElement() {
  return getRuleContexts<FeatParser::PatternElementContext>();
}

FeatParser::PatternElementContext* FeatParser::PatternContext::patternElement(size_t i) {
  return getRuleContext<FeatParser::PatternElementContext>(i);
}


size_t FeatParser::PatternContext::getRuleIndex() const {
  return FeatParser::RulePattern;
}


std::any FeatParser::PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitPattern(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::PatternContext* FeatParser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 174, FeatParser::RulePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1054); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1053);
      patternElement();
      setState(1056); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NOTDEF || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 129025) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternElementContext ------------------------------------------------------------------

FeatParser::PatternElementContext::PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::GlyphClassContext* FeatParser::PatternElementContext::glyphClass() {
  return getRuleContext<FeatParser::GlyphClassContext>(0);
}

FeatParser::GlyphContext* FeatParser::PatternElementContext::glyph() {
  return getRuleContext<FeatParser::GlyphContext>(0);
}

tree::TerminalNode* FeatParser::PatternElementContext::MARKER() {
  return getToken(FeatParser::MARKER, 0);
}


size_t FeatParser::PatternElementContext::getRuleIndex() const {
  return FeatParser::RulePatternElement;
}


std::any FeatParser::PatternElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitPatternElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::PatternElementContext* FeatParser::patternElement() {
  PatternElementContext *_localctx = _tracker.createInstance<PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 176, FeatParser::RulePatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1060);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::LBRACKET:
      case FeatParser::GCLASS: {
        setState(1058);
        glyphClass();
        break;
      }

      case FeatParser::NOTDEF:
      case FeatParser::AXISUNIT:
      case FeatParser::CID:
      case FeatParser::ESCGNAME:
      case FeatParser::NAMELABEL:
      case FeatParser::EXTNAME: {
        setState(1059);
        glyph();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1063);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARKER) {
      setState(1062);
      match(FeatParser::MARKER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlyphClassOptionalContext ------------------------------------------------------------------

FeatParser::GlyphClassOptionalContext::GlyphClassOptionalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::GlyphClassContext* FeatParser::GlyphClassOptionalContext::glyphClass() {
  return getRuleContext<FeatParser::GlyphClassContext>(0);
}


size_t FeatParser::GlyphClassOptionalContext::getRuleIndex() const {
  return FeatParser::RuleGlyphClassOptional;
}


std::any FeatParser::GlyphClassOptionalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGlyphClassOptional(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GlyphClassOptionalContext* FeatParser::glyphClassOptional() {
  GlyphClassOptionalContext *_localctx = _tracker.createInstance<GlyphClassOptionalContext>(_ctx, getState());
  enterRule(_localctx, 178, FeatParser::RuleGlyphClassOptional);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1066);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::LBRACKET

    || _la == FeatParser::GCLASS) {
      setState(1065);
      glyphClass();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlyphClassContext ------------------------------------------------------------------

FeatParser::GlyphClassContext::GlyphClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GlyphClassContext::GCLASS() {
  return getToken(FeatParser::GCLASS, 0);
}

FeatParser::GcLiteralContext* FeatParser::GlyphClassContext::gcLiteral() {
  return getRuleContext<FeatParser::GcLiteralContext>(0);
}


size_t FeatParser::GlyphClassContext::getRuleIndex() const {
  return FeatParser::RuleGlyphClass;
}


std::any FeatParser::GlyphClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGlyphClass(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GlyphClassContext* FeatParser::glyphClass() {
  GlyphClassContext *_localctx = _tracker.createInstance<GlyphClassContext>(_ctx, getState());
  enterRule(_localctx, 180, FeatParser::RuleGlyphClass);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1070);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::GCLASS: {
        enterOuterAlt(_localctx, 1);
        setState(1068);
        match(FeatParser::GCLASS);
        break;
      }

      case FeatParser::LBRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(1069);
        gcLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GcLiteralContext ------------------------------------------------------------------

FeatParser::GcLiteralContext::GcLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GcLiteralContext::LBRACKET() {
  return getToken(FeatParser::LBRACKET, 0);
}

tree::TerminalNode* FeatParser::GcLiteralContext::RBRACKET() {
  return getToken(FeatParser::RBRACKET, 0);
}

std::vector<FeatParser::GcLiteralElementContext *> FeatParser::GcLiteralContext::gcLiteralElement() {
  return getRuleContexts<FeatParser::GcLiteralElementContext>();
}

FeatParser::GcLiteralElementContext* FeatParser::GcLiteralContext::gcLiteralElement(size_t i) {
  return getRuleContext<FeatParser::GcLiteralElementContext>(i);
}


size_t FeatParser::GcLiteralContext::getRuleIndex() const {
  return FeatParser::RuleGcLiteral;
}


std::any FeatParser::GcLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGcLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GcLiteralContext* FeatParser::gcLiteral() {
  GcLiteralContext *_localctx = _tracker.createInstance<GcLiteralContext>(_ctx, getState());
  enterRule(_localctx, 182, FeatParser::RuleGcLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1072);
    match(FeatParser::LBRACKET);
    setState(1074); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1073);
      gcLiteralElement();
      setState(1076); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NOTDEF || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 63) != 0));
    setState(1078);
    match(FeatParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GcLiteralElementContext ------------------------------------------------------------------

FeatParser::GcLiteralElementContext::GcLiteralElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::GlyphContext *> FeatParser::GcLiteralElementContext::glyph() {
  return getRuleContexts<FeatParser::GlyphContext>();
}

FeatParser::GlyphContext* FeatParser::GcLiteralElementContext::glyph(size_t i) {
  return getRuleContext<FeatParser::GlyphContext>(i);
}

tree::TerminalNode* FeatParser::GcLiteralElementContext::HYPHEN() {
  return getToken(FeatParser::HYPHEN, 0);
}

tree::TerminalNode* FeatParser::GcLiteralElementContext::GCLASS() {
  return getToken(FeatParser::GCLASS, 0);
}


size_t FeatParser::GcLiteralElementContext::getRuleIndex() const {
  return FeatParser::RuleGcLiteralElement;
}


std::any FeatParser::GcLiteralElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGcLiteralElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GcLiteralElementContext* FeatParser::gcLiteralElement() {
  GcLiteralElementContext *_localctx = _tracker.createInstance<GcLiteralElementContext>(_ctx, getState());
  enterRule(_localctx, 184, FeatParser::RuleGcLiteralElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1086);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NOTDEF:
      case FeatParser::AXISUNIT:
      case FeatParser::CID:
      case FeatParser::ESCGNAME:
      case FeatParser::NAMELABEL:
      case FeatParser::EXTNAME: {
        enterOuterAlt(_localctx, 1);
        setState(1080);
        antlrcpp::downCast<GcLiteralElementContext *>(_localctx)->startg = glyph();
        setState(1083);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::HYPHEN) {
          setState(1081);
          match(FeatParser::HYPHEN);
          setState(1082);
          antlrcpp::downCast<GcLiteralElementContext *>(_localctx)->endg = glyph();
        }
        break;
      }

      case FeatParser::GCLASS: {
        enterOuterAlt(_localctx, 2);
        setState(1085);
        match(FeatParser::GCLASS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlyphContext ------------------------------------------------------------------

FeatParser::GlyphContext::GlyphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::GlyphNameContext* FeatParser::GlyphContext::glyphName() {
  return getRuleContext<FeatParser::GlyphNameContext>(0);
}

tree::TerminalNode* FeatParser::GlyphContext::CID() {
  return getToken(FeatParser::CID, 0);
}


size_t FeatParser::GlyphContext::getRuleIndex() const {
  return FeatParser::RuleGlyph;
}


std::any FeatParser::GlyphContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGlyph(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GlyphContext* FeatParser::glyph() {
  GlyphContext *_localctx = _tracker.createInstance<GlyphContext>(_ctx, getState());
  enterRule(_localctx, 186, FeatParser::RuleGlyph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1090);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NOTDEF:
      case FeatParser::AXISUNIT:
      case FeatParser::ESCGNAME:
      case FeatParser::NAMELABEL:
      case FeatParser::EXTNAME: {
        enterOuterAlt(_localctx, 1);
        setState(1088);
        glyphName();
        break;
      }

      case FeatParser::CID: {
        enterOuterAlt(_localctx, 2);
        setState(1089);
        match(FeatParser::CID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlyphNameContext ------------------------------------------------------------------

FeatParser::GlyphNameContext::GlyphNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GlyphNameContext::ESCGNAME() {
  return getToken(FeatParser::ESCGNAME, 0);
}

tree::TerminalNode* FeatParser::GlyphNameContext::NAMELABEL() {
  return getToken(FeatParser::NAMELABEL, 0);
}

tree::TerminalNode* FeatParser::GlyphNameContext::EXTNAME() {
  return getToken(FeatParser::EXTNAME, 0);
}

tree::TerminalNode* FeatParser::GlyphNameContext::AXISUNIT() {
  return getToken(FeatParser::AXISUNIT, 0);
}

tree::TerminalNode* FeatParser::GlyphNameContext::NOTDEF() {
  return getToken(FeatParser::NOTDEF, 0);
}


size_t FeatParser::GlyphNameContext::getRuleIndex() const {
  return FeatParser::RuleGlyphName;
}


std::any FeatParser::GlyphNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGlyphName(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GlyphNameContext* FeatParser::glyphName() {
  GlyphNameContext *_localctx = _tracker.createInstance<GlyphNameContext>(_ctx, getState());
  enterRule(_localctx, 188, FeatParser::RuleGlyphName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1092);
    _la = _input->LA(1);
    if (!(_la == FeatParser::NOTDEF || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 29) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

FeatParser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LabelContext::NAMELABEL() {
  return getToken(FeatParser::NAMELABEL, 0);
}

tree::TerminalNode* FeatParser::LabelContext::MARK() {
  return getToken(FeatParser::MARK, 0);
}

tree::TerminalNode* FeatParser::LabelContext::AXISUNIT() {
  return getToken(FeatParser::AXISUNIT, 0);
}


size_t FeatParser::LabelContext::getRuleIndex() const {
  return FeatParser::RuleLabel;
}


std::any FeatParser::LabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLabel(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LabelContext* FeatParser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 190, FeatParser::RuleLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1094);
    _la = _input->LA(1);
    if (!(_la == FeatParser::MARK || _la == FeatParser::AXISUNIT

    || _la == FeatParser::NAMELABEL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TagContext ------------------------------------------------------------------

FeatParser::TagContext::TagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::TagContext::NAMELABEL() {
  return getToken(FeatParser::NAMELABEL, 0);
}

tree::TerminalNode* FeatParser::TagContext::EXTNAME() {
  return getToken(FeatParser::EXTNAME, 0);
}

tree::TerminalNode* FeatParser::TagContext::STRVAL() {
  return getToken(FeatParser::STRVAL, 0);
}

tree::TerminalNode* FeatParser::TagContext::AXISUNIT() {
  return getToken(FeatParser::AXISUNIT, 0);
}

tree::TerminalNode* FeatParser::TagContext::MARK() {
  return getToken(FeatParser::MARK, 0);
}


size_t FeatParser::TagContext::getRuleIndex() const {
  return FeatParser::RuleTag;
}


std::any FeatParser::TagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTag(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::TagContext* FeatParser::tag() {
  TagContext *_localctx = _tracker.createInstance<TagContext>(_ctx, getState());
  enterRule(_localctx, 192, FeatParser::RuleTag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1096);
    _la = _input->LA(1);
    if (!(_la == FeatParser::MARK || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 101) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FixedNumContext ------------------------------------------------------------------

FeatParser::FixedNumContext::FixedNumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FixedNumContext::POINTNUM() {
  return getToken(FeatParser::POINTNUM, 0);
}

tree::TerminalNode* FeatParser::FixedNumContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}


size_t FeatParser::FixedNumContext::getRuleIndex() const {
  return FeatParser::RuleFixedNum;
}


std::any FeatParser::FixedNumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFixedNum(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FixedNumContext* FeatParser::fixedNum() {
  FixedNumContext *_localctx = _tracker.createInstance<FixedNumContext>(_ctx, getState());
  enterRule(_localctx, 194, FeatParser::RuleFixedNum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1098);
    _la = _input->LA(1);
    if (!(_la == FeatParser::POINTNUM

    || _la == FeatParser::NUM)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenNumContext ------------------------------------------------------------------

FeatParser::GenNumContext::GenNumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GenNumContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

tree::TerminalNode* FeatParser::GenNumContext::NUMOCT() {
  return getToken(FeatParser::NUMOCT, 0);
}

tree::TerminalNode* FeatParser::GenNumContext::NUMEXT() {
  return getToken(FeatParser::NUMEXT, 0);
}


size_t FeatParser::GenNumContext::getRuleIndex() const {
  return FeatParser::RuleGenNum;
}


std::any FeatParser::GenNumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGenNum(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GenNumContext* FeatParser::genNum() {
  GenNumContext *_localctx = _tracker.createInstance<GenNumContext>(_ctx, getState());
  enterRule(_localctx, 196, FeatParser::RuleGenNum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1100);
    _la = _input->LA(1);
    if (!(((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureFileContext ------------------------------------------------------------------

FeatParser::FeatureFileContext::FeatureFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FeatureFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::FeatureStatementContext *> FeatParser::FeatureFileContext::featureStatement() {
  return getRuleContexts<FeatParser::FeatureStatementContext>();
}

FeatParser::FeatureStatementContext* FeatParser::FeatureFileContext::featureStatement(size_t i) {
  return getRuleContext<FeatParser::FeatureStatementContext>(i);
}


size_t FeatParser::FeatureFileContext::getRuleIndex() const {
  return FeatParser::RuleFeatureFile;
}


std::any FeatParser::FeatureFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFeatureFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FeatureFileContext* FeatParser::featureFile() {
  FeatureFileContext *_localctx = _tracker.createInstance<FeatureFileContext>(_ctx, getState());
  enterRule(_localctx, 198, FeatParser::RuleFeatureFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1105);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 36318861661846368) != 0) || _la == FeatParser::GCLASS) {
      setState(1102);
      featureStatement();
      setState(1107);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1108);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementFileContext ------------------------------------------------------------------

FeatParser::StatementFileContext::StatementFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::StatementFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::StatementContext *> FeatParser::StatementFileContext::statement() {
  return getRuleContexts<FeatParser::StatementContext>();
}

FeatParser::StatementContext* FeatParser::StatementFileContext::statement(size_t i) {
  return getRuleContext<FeatParser::StatementContext>(i);
}


size_t FeatParser::StatementFileContext::getRuleIndex() const {
  return FeatParser::RuleStatementFile;
}


std::any FeatParser::StatementFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitStatementFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::StatementFileContext* FeatParser::statementFile() {
  StatementFileContext *_localctx = _tracker.createInstance<StatementFileContext>(_ctx, getState());
  enterRule(_localctx, 200, FeatParser::RuleStatementFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1113);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 36314463615331168) != 0) || _la == FeatParser::GCLASS) {
      setState(1110);
      statement();
      setState(1115);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1116);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvStatementFileContext ------------------------------------------------------------------

FeatParser::CvStatementFileContext::CvStatementFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::CvStatementFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::CvParameterStatementContext *> FeatParser::CvStatementFileContext::cvParameterStatement() {
  return getRuleContexts<FeatParser::CvParameterStatementContext>();
}

FeatParser::CvParameterStatementContext* FeatParser::CvStatementFileContext::cvParameterStatement(size_t i) {
  return getRuleContext<FeatParser::CvParameterStatementContext>(i);
}


size_t FeatParser::CvStatementFileContext::getRuleIndex() const {
  return FeatParser::RuleCvStatementFile;
}


std::any FeatParser::CvStatementFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitCvStatementFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::CvStatementFileContext* FeatParser::cvStatementFile() {
  CvStatementFileContext *_localctx = _tracker.createInstance<CvStatementFileContext>(_ctx, getState());
  enterRule(_localctx, 202, FeatParser::RuleCvStatementFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1121);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 272678883688480) != 0)) {
      setState(1118);
      cvParameterStatement();
      setState(1123);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1124);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseFileContext ------------------------------------------------------------------

FeatParser::BaseFileContext::BaseFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::BaseFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::BaseStatementContext *> FeatParser::BaseFileContext::baseStatement() {
  return getRuleContexts<FeatParser::BaseStatementContext>();
}

FeatParser::BaseStatementContext* FeatParser::BaseFileContext::baseStatement(size_t i) {
  return getRuleContext<FeatParser::BaseStatementContext>(i);
}


size_t FeatParser::BaseFileContext::getRuleIndex() const {
  return FeatParser::RuleBaseFile;
}


std::any FeatParser::BaseFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitBaseFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::BaseFileContext* FeatParser::baseFile() {
  BaseFileContext *_localctx = _tracker.createInstance<BaseFileContext>(_ctx, getState());
  enterRule(_localctx, 204, FeatParser::RuleBaseFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1129);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 5) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 5)) & 4323455642275676161) != 0)) {
      setState(1126);
      baseStatement();
      setState(1131);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1132);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HeadFileContext ------------------------------------------------------------------

FeatParser::HeadFileContext::HeadFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HeadFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::HeadStatementContext *> FeatParser::HeadFileContext::headStatement() {
  return getRuleContexts<FeatParser::HeadStatementContext>();
}

FeatParser::HeadStatementContext* FeatParser::HeadFileContext::headStatement(size_t i) {
  return getRuleContext<FeatParser::HeadStatementContext>(i);
}


size_t FeatParser::HeadFileContext::getRuleIndex() const {
  return FeatParser::RuleHeadFile;
}


std::any FeatParser::HeadFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHeadFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HeadFileContext* FeatParser::headFile() {
  HeadFileContext *_localctx = _tracker.createInstance<HeadFileContext>(_ctx, getState());
  enterRule(_localctx, 206, FeatParser::RuleHeadFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1137);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || _la == FeatParser::FONT_REVISION) {
      setState(1134);
      headStatement();
      setState(1139);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1140);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HheaFileContext ------------------------------------------------------------------

FeatParser::HheaFileContext::HheaFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HheaFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::HheaStatementContext *> FeatParser::HheaFileContext::hheaStatement() {
  return getRuleContexts<FeatParser::HheaStatementContext>();
}

FeatParser::HheaStatementContext* FeatParser::HheaFileContext::hheaStatement(size_t i) {
  return getRuleContext<FeatParser::HheaStatementContext>(i);
}


size_t FeatParser::HheaFileContext::getRuleIndex() const {
  return FeatParser::RuleHheaFile;
}


std::any FeatParser::HheaFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHheaFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HheaFileContext* FeatParser::hheaFile() {
  HheaFileContext *_localctx = _tracker.createInstance<HheaFileContext>(_ctx, getState());
  enterRule(_localctx, 208, FeatParser::RuleHheaFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1145);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 15) != 0)) {
      setState(1142);
      hheaStatement();
      setState(1147);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1148);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VheaFileContext ------------------------------------------------------------------

FeatParser::VheaFileContext::VheaFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::VheaFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::VheaStatementContext *> FeatParser::VheaFileContext::vheaStatement() {
  return getRuleContexts<FeatParser::VheaStatementContext>();
}

FeatParser::VheaStatementContext* FeatParser::VheaFileContext::vheaStatement(size_t i) {
  return getRuleContext<FeatParser::VheaStatementContext>(i);
}


size_t FeatParser::VheaFileContext::getRuleIndex() const {
  return FeatParser::RuleVheaFile;
}


std::any FeatParser::VheaFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVheaFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VheaFileContext* FeatParser::vheaFile() {
  VheaFileContext *_localctx = _tracker.createInstance<VheaFileContext>(_ctx, getState());
  enterRule(_localctx, 210, FeatParser::RuleVheaFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1153);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 110) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 110)) & 7) != 0)) {
      setState(1150);
      vheaStatement();
      setState(1155);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1156);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefFileContext ------------------------------------------------------------------

FeatParser::GdefFileContext::GdefFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::GdefStatementContext *> FeatParser::GdefFileContext::gdefStatement() {
  return getRuleContexts<FeatParser::GdefStatementContext>();
}

FeatParser::GdefStatementContext* FeatParser::GdefFileContext::gdefStatement(size_t i) {
  return getRuleContext<FeatParser::GdefStatementContext>(i);
}


size_t FeatParser::GdefFileContext::getRuleIndex() const {
  return FeatParser::RuleGdefFile;
}


std::any FeatParser::GdefFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefFileContext* FeatParser::gdefFile() {
  GdefFileContext *_localctx = _tracker.createInstance<GdefFileContext>(_ctx, getState());
  enterRule(_localctx, 212, FeatParser::RuleGdefFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1161);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 15) != 0)) {
      setState(1158);
      gdefStatement();
      setState(1163);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1164);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameFileContext ------------------------------------------------------------------

FeatParser::NameFileContext::NameFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::NameStatementContext *> FeatParser::NameFileContext::nameStatement() {
  return getRuleContexts<FeatParser::NameStatementContext>();
}

FeatParser::NameStatementContext* FeatParser::NameFileContext::nameStatement(size_t i) {
  return getRuleContext<FeatParser::NameStatementContext>(i);
}


size_t FeatParser::NameFileContext::getRuleIndex() const {
  return FeatParser::RuleNameFile;
}


std::any FeatParser::NameFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameFileContext* FeatParser::nameFile() {
  NameFileContext *_localctx = _tracker.createInstance<NameFileContext>(_ctx, getState());
  enterRule(_localctx, 214, FeatParser::RuleNameFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1169);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || _la == FeatParser::NAMEID) {
      setState(1166);
      nameStatement();
      setState(1171);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1172);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VmtxFileContext ------------------------------------------------------------------

FeatParser::VmtxFileContext::VmtxFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::VmtxFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::VmtxStatementContext *> FeatParser::VmtxFileContext::vmtxStatement() {
  return getRuleContexts<FeatParser::VmtxStatementContext>();
}

FeatParser::VmtxStatementContext* FeatParser::VmtxFileContext::vmtxStatement(size_t i) {
  return getRuleContext<FeatParser::VmtxStatementContext>(i);
}


size_t FeatParser::VmtxFileContext::getRuleIndex() const {
  return FeatParser::RuleVmtxFile;
}


std::any FeatParser::VmtxFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVmtxFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VmtxFileContext* FeatParser::vmtxFile() {
  VmtxFileContext *_localctx = _tracker.createInstance<VmtxFileContext>(_ctx, getState());
  enterRule(_localctx, 216, FeatParser::RuleVmtxFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1177);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || _la == FeatParser::VERT_ORIGIN_Y

    || _la == FeatParser::VERT_ADVANCE_Y) {
      setState(1174);
      vmtxStatement();
      setState(1179);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1180);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Os_2FileContext ------------------------------------------------------------------

FeatParser::Os_2FileContext::Os_2FileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::Os_2FileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::Os_2StatementContext *> FeatParser::Os_2FileContext::os_2Statement() {
  return getRuleContexts<FeatParser::Os_2StatementContext>();
}

FeatParser::Os_2StatementContext* FeatParser::Os_2FileContext::os_2Statement(size_t i) {
  return getRuleContext<FeatParser::Os_2StatementContext>(i);
}


size_t FeatParser::Os_2FileContext::getRuleIndex() const {
  return FeatParser::RuleOs_2File;
}


std::any FeatParser::Os_2FileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitOs_2File(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Os_2FileContext* FeatParser::os_2File() {
  Os_2FileContext *_localctx = _tracker.createInstance<Os_2FileContext>(_ctx, getState());
  enterRule(_localctx, 218, FeatParser::RuleOs_2File);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1185);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 82) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 82)) & 262143) != 0)) {
      setState(1182);
      os_2Statement();
      setState(1187);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1188);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatFileContext ------------------------------------------------------------------

FeatParser::StatFileContext::StatFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::StatFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::StatStatementContext *> FeatParser::StatFileContext::statStatement() {
  return getRuleContexts<FeatParser::StatStatementContext>();
}

FeatParser::StatStatementContext* FeatParser::StatFileContext::statStatement(size_t i) {
  return getRuleContext<FeatParser::StatStatementContext>(i);
}


size_t FeatParser::StatFileContext::getRuleIndex() const {
  return FeatParser::RuleStatFile;
}


std::any FeatParser::StatFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitStatFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::StatFileContext* FeatParser::statFile() {
  StatFileContext *_localctx = _tracker.createInstance<StatFileContext>(_ctx, getState());
  enterRule(_localctx, 220, FeatParser::RuleStatFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1193);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 101) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 101)) & 15) != 0)) {
      setState(1190);
      statStatement();
      setState(1195);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1196);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisValueFileContext ------------------------------------------------------------------

FeatParser::AxisValueFileContext::AxisValueFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisValueFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::AxisValueStatementContext *> FeatParser::AxisValueFileContext::axisValueStatement() {
  return getRuleContexts<FeatParser::AxisValueStatementContext>();
}

FeatParser::AxisValueStatementContext* FeatParser::AxisValueFileContext::axisValueStatement(size_t i) {
  return getRuleContext<FeatParser::AxisValueStatementContext>(i);
}


size_t FeatParser::AxisValueFileContext::getRuleIndex() const {
  return FeatParser::RuleAxisValueFile;
}


std::any FeatParser::AxisValueFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisValueFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisValueFileContext* FeatParser::axisValueFile() {
  AxisValueFileContext *_localctx = _tracker.createInstance<AxisValueFileContext>(_ctx, getState());
  enterRule(_localctx, 222, FeatParser::RuleAxisValueFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1201);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & 201326593) != 0)) {
      setState(1198);
      axisValueStatement();
      setState(1203);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1204);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameEntryFileContext ------------------------------------------------------------------

FeatParser::NameEntryFileContext::NameEntryFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameEntryFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::NameEntryStatementContext *> FeatParser::NameEntryFileContext::nameEntryStatement() {
  return getRuleContexts<FeatParser::NameEntryStatementContext>();
}

FeatParser::NameEntryStatementContext* FeatParser::NameEntryFileContext::nameEntryStatement(size_t i) {
  return getRuleContext<FeatParser::NameEntryStatementContext>(i);
}


size_t FeatParser::NameEntryFileContext::getRuleIndex() const {
  return FeatParser::RuleNameEntryFile;
}


std::any FeatParser::NameEntryFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameEntryFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameEntryFileContext* FeatParser::nameEntryFile() {
  NameEntryFileContext *_localctx = _tracker.createInstance<NameEntryFileContext>(_ctx, getState());
  enterRule(_localctx, 224, FeatParser::RuleNameEntryFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1209);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || _la == FeatParser::NAME) {
      setState(1206);
      nameEntryStatement();
      setState(1211);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1212);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtokContext ------------------------------------------------------------------

FeatParser::SubtokContext::SubtokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::SubtokContext::SUBSTITUTE() {
  return getToken(FeatParser::SUBSTITUTE, 0);
}

tree::TerminalNode* FeatParser::SubtokContext::SUBSTITUTE_v() {
  return getToken(FeatParser::SUBSTITUTE_v, 0);
}


size_t FeatParser::SubtokContext::getRuleIndex() const {
  return FeatParser::RuleSubtok;
}


std::any FeatParser::SubtokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitSubtok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::SubtokContext* FeatParser::subtok() {
  SubtokContext *_localctx = _tracker.createInstance<SubtokContext>(_ctx, getState());
  enterRule(_localctx, 226, FeatParser::RuleSubtok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1214);
    _la = _input->LA(1);
    if (!(_la == FeatParser::SUBSTITUTE

    || _la == FeatParser::SUBSTITUTE_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RevtokContext ------------------------------------------------------------------

FeatParser::RevtokContext::RevtokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::RevtokContext::REVERSE() {
  return getToken(FeatParser::REVERSE, 0);
}

tree::TerminalNode* FeatParser::RevtokContext::REVERSE_v() {
  return getToken(FeatParser::REVERSE_v, 0);
}


size_t FeatParser::RevtokContext::getRuleIndex() const {
  return FeatParser::RuleRevtok;
}


std::any FeatParser::RevtokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitRevtok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::RevtokContext* FeatParser::revtok() {
  RevtokContext *_localctx = _tracker.createInstance<RevtokContext>(_ctx, getState());
  enterRule(_localctx, 228, FeatParser::RuleRevtok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1216);
    _la = _input->LA(1);
    if (!(_la == FeatParser::REVERSE

    || _la == FeatParser::REVERSE_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnontokContext ------------------------------------------------------------------

FeatParser::AnontokContext::AnontokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AnontokContext::ANON() {
  return getToken(FeatParser::ANON, 0);
}

tree::TerminalNode* FeatParser::AnontokContext::ANON_v() {
  return getToken(FeatParser::ANON_v, 0);
}


size_t FeatParser::AnontokContext::getRuleIndex() const {
  return FeatParser::RuleAnontok;
}


std::any FeatParser::AnontokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnontok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnontokContext* FeatParser::anontok() {
  AnontokContext *_localctx = _tracker.createInstance<AnontokContext>(_ctx, getState());
  enterRule(_localctx, 230, FeatParser::RuleAnontok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1218);
    _la = _input->LA(1);
    if (!(_la == FeatParser::ANON

    || _la == FeatParser::ANON_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumtokContext ------------------------------------------------------------------

FeatParser::EnumtokContext::EnumtokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::EnumtokContext::ENUMERATE() {
  return getToken(FeatParser::ENUMERATE, 0);
}

tree::TerminalNode* FeatParser::EnumtokContext::ENUMERATE_v() {
  return getToken(FeatParser::ENUMERATE_v, 0);
}


size_t FeatParser::EnumtokContext::getRuleIndex() const {
  return FeatParser::RuleEnumtok;
}


std::any FeatParser::EnumtokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitEnumtok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::EnumtokContext* FeatParser::enumtok() {
  EnumtokContext *_localctx = _tracker.createInstance<EnumtokContext>(_ctx, getState());
  enterRule(_localctx, 232, FeatParser::RuleEnumtok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1220);
    _la = _input->LA(1);
    if (!(_la == FeatParser::ENUMERATE

    || _la == FeatParser::ENUMERATE_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostokContext ------------------------------------------------------------------

FeatParser::PostokContext::PostokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::PostokContext::POSITION() {
  return getToken(FeatParser::POSITION, 0);
}

tree::TerminalNode* FeatParser::PostokContext::POSITION_v() {
  return getToken(FeatParser::POSITION_v, 0);
}


size_t FeatParser::PostokContext::getRuleIndex() const {
  return FeatParser::RulePostok;
}


std::any FeatParser::PostokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitPostok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::PostokContext* FeatParser::postok() {
  PostokContext *_localctx = _tracker.createInstance<PostokContext>(_ctx, getState());
  enterRule(_localctx, 234, FeatParser::RulePostok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1222);
    _la = _input->LA(1);
    if (!(_la == FeatParser::POSITION

    || _la == FeatParser::POSITION_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MarkligtokContext ------------------------------------------------------------------

FeatParser::MarkligtokContext::MarkligtokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::MarkligtokContext::MARKLIG() {
  return getToken(FeatParser::MARKLIG, 0);
}

tree::TerminalNode* FeatParser::MarkligtokContext::MARKLIG_v() {
  return getToken(FeatParser::MARKLIG_v, 0);
}


size_t FeatParser::MarkligtokContext::getRuleIndex() const {
  return FeatParser::RuleMarkligtok;
}


std::any FeatParser::MarkligtokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitMarkligtok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::MarkligtokContext* FeatParser::markligtok() {
  MarkligtokContext *_localctx = _tracker.createInstance<MarkligtokContext>(_ctx, getState());
  enterRule(_localctx, 236, FeatParser::RuleMarkligtok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1224);
    _la = _input->LA(1);
    if (!(_la == FeatParser::MARKLIG

    || _la == FeatParser::MARKLIG_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void FeatParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  featparserParserInitialize();
#else
  ::antlr4::internal::call_once(featparserParserOnceFlag, featparserParserInitialize);
#endif
}
