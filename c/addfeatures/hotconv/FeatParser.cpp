
// Generated from FeatParser.g4 by ANTLR 4.13.1


#include "FeatParserVisitor.h"

#include "FeatParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct FeatParserStaticData final {
  FeatParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FeatParserStaticData(const FeatParserStaticData&) = delete;
  FeatParserStaticData(FeatParserStaticData&&) = delete;
  FeatParserStaticData& operator=(const FeatParserStaticData&) = delete;
  FeatParserStaticData& operator=(FeatParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag featparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
FeatParserStaticData *featparserParserStaticData = nullptr;

void featparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (featparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(featparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<FeatParserStaticData>(
    std::vector<std::string>{
      "file", "topLevelStatement", "include", "glyphClassAssign", "langsysAssign", 
      "mark_statement", "anchorDef", "valueRecordDef", "locationDef", "defaultAxisUnit", 
      "featureBlock", "tableBlock", "anonBlock", "lookupBlockTopLevel", 
      "featureStatement", "lookupBlockOrUse", "cvParameterBlock", "cvParameterStatement", 
      "cvParameter", "statement", "featureUse", "scriptAssign", "langAssign", 
      "lookupflagAssign", "lookupflagElement", "ignoreSubOrPos", "substitute", 
      "position", "valuePattern", "valueRecord", "valueLiteral", "singleValueLiteral", 
      "parenLocationValue", "locationValueLiteral", "locationMultiValueLiteral", 
      "locationSpecifier", "locationLiteral", "axisLocationLiteral", "cursiveElement", 
      "baseToMarkElement", "ligatureMarkElement", "parameters", "sizemenuname", 
      "featureNames", "subtable", "table_BASE", "baseStatement", "axisTags", 
      "axisScripts", "baseScript", "table_GDEF", "gdefStatement", "gdefGlyphClass", 
      "gdefAttach", "gdefLigCaretPos", "gdefLigCaretIndex", "table_head", 
      "headStatement", "head", "table_hhea", "hheaStatement", "hhea", "table_vhea", 
      "vheaStatement", "vhea", "table_name", "nameStatement", "nameID", 
      "table_OS_2", "os_2Statement", "os_2", "table_STAT", "statStatement", 
      "designAxis", "axisValue", "axisValueStatement", "axisValueLocation", 
      "axisValueFlags", "elidedFallbackName", "nameEntryStatement", "elidedFallbackNameID", 
      "nameEntry", "table_vmtx", "vmtxStatement", "vmtx", "anchor", "anchorLiteral", 
      "anchorLiteralXY", "anchorMultiValueLiteral", "lookupPattern", "lookupPatternElement", 
      "pattern", "patternElement", "glyphClassOptional", "glyphClass", "gcLiteral", 
      "gcLiteralElement", "gclass", "glyph", "glyphName", "label", "tag", 
      "fixedNum", "genNum", "featureFile", "statementFile", "cvStatementFile", 
      "baseFile", "headFile", "hheaFile", "vheaFile", "gdefFile", "nameFile", 
      "vmtxFile", "os_2File", "statFile", "axisValueFile", "nameEntryFile", 
      "subtok", "revtok", "anontok", "enumtok", "postok", "markligtok"
    },
    std::vector<std::string>{
      "", "'anon'", "'anonymous'", "", "", "'include'", "'feature'", "'table'", 
      "'script'", "'language'", "'languagesystem'", "'subtable'", "'lookup'", 
      "'lookupflag'", "'.notdef'", "'RightToLeft'", "'IgnoreBaseGlyphs'", 
      "'IgnoreLigatures'", "'IgnoreMarks'", "'UseMarkFilteringSet'", "'MarkAttachmentType'", 
      "'excludeDFLT'", "'includeDFLT'", "'exclude_dflt'", "'include_dflt'", 
      "'useExtension'", "'<'", "'>'", "'enumerate'", "'enum'", "'except'", 
      "'ignore'", "'substitute'", "'sub'", "'reversesub'", "'rsub'", "'by'", 
      "'from'", "'position'", "'pos'", "'parameters'", "'featureNames'", 
      "'cvParameters'", "'FeatUILabelNameID'", "'FeatUITooltipTextNameID'", 
      "'SampleTextNameID'", "'ParamUILabelNameID'", "'defaultAxisUnit'", 
      "'Character'", "'sizemenuname'", "'contourpoint'", "'anchor'", "'anchorDef'", 
      "'valueRecordDef'", "'locationDef'", "'mark'", "'markClass'", "'cursive'", 
      "'base'", "'ligature'", "'lig'", "'ligComponent'", "'NULL'", "'BASE'", 
      "'HorizAxis.BaseTagList'", "'VertAxis.BaseTagList'", "'HorizAxis.BaseScriptList'", 
      "'VertAxis.BaseScriptList'", "'GDEF'", "'GlyphClassDef'", "'Attach'", 
      "'LigatureCaretByPos'", "'LigatureCaretByIndex'", "'head'", "'FontRevision'", 
      "'hhea'", "'Ascender'", "'Descender'", "'LineGap'", "'CaretOffset'", 
      "'name'", "'nameid'", "'OS/2'", "'FSType'", "'fsType'", "'LowerOpSize'", 
      "'UpperOpSize'", "'Panose'", "'TypoAscender'", "'TypoDescender'", 
      "'TypoLineGap'", "'winAscent'", "'winDescent'", "'XHeight'", "'CapHeight'", 
      "'WeightClass'", "'WidthClass'", "'Vendor'", "'UnicodeRange'", "'CodePageRange'", 
      "'FamilyClass'", "'STAT'", "'ElidedFallbackName'", "'ElidedFallbackNameID'", 
      "'DesignAxis'", "'AxisValue'", "'flag'", "'location'", "'ElidableAxisValueName'", 
      "'OlderSiblingFontAttribute'", "'vhea'", "'VertTypoAscender'", "'VertTypoDescender'", 
      "'VertTypoLineGap'", "'vmtx'", "'VertOriginY'", "'VertAdvanceY'", 
      "", "'}'", "'['", "']'", "", "", "'-'", "'+'", "';'", "'='", "'''", 
      "','", "':'"
    },
    std::vector<std::string>{
      "", "ANON", "ANON_v", "COMMENT", "WHITESPACE", "INCLUDE", "FEATURE", 
      "TABLE", "SCRIPT", "LANGUAGE", "LANGSYS", "SUBTABLE", "LOOKUP", "LOOKUPFLAG", 
      "NOTDEF", "RIGHT_TO_LEFT", "IGNORE_BASE_GLYPHS", "IGNORE_LIGATURES", 
      "IGNORE_MARKS", "USE_MARK_FILTERING_SET", "MARK_ATTACHMENT_TYPE", 
      "EXCLUDE_DFLT", "INCLUDE_DFLT", "EXCLUDE_dflt", "INCLUDE_dflt", "USE_EXTENSION", 
      "BEGINVALUE", "ENDVALUE", "ENUMERATE", "ENUMERATE_v", "EXCEPT", "IGNORE", 
      "SUBSTITUTE", "SUBSTITUTE_v", "REVERSE", "REVERSE_v", "BY", "FROM", 
      "POSITION", "POSITION_v", "PARAMETERS", "FEATURE_NAMES", "CV_PARAMETERS", 
      "CV_UI_LABEL", "CV_TOOLTIP", "CV_SAMPLE_TEXT", "CV_PARAM_LABEL", "DEF_AXIS_UNIT", 
      "CV_CHARACTER", "SIZEMENUNAME", "CONTOURPOINT", "ANCHOR", "ANCHOR_DEF", 
      "VALUE_RECORD_DEF", "LOCATION_DEF", "MARK", "MARK_CLASS", "CURSIVE", 
      "MARKBASE", "MARKLIG", "MARKLIG_v", "LIG_COMPONENT", "KNULL", "BASE", 
      "HA_BTL", "VA_BTL", "HA_BSL", "VA_BSL", "GDEF", "GLYPH_CLASS_DEF", 
      "ATTACH", "LIG_CARET_BY_POS", "LIG_CARET_BY_IDX", "HEAD", "FONT_REVISION", 
      "HHEA", "ASCENDER", "DESCENDER", "LINE_GAP", "CARET_OFFSET", "NAME", 
      "NAMEID", "OS_2", "FS_TYPE", "FS_TYPE_v", "OS2_LOWER_OP_SIZE", "OS2_UPPER_OP_SIZE", 
      "PANOSE", "TYPO_ASCENDER", "TYPO_DESCENDER", "TYPO_LINE_GAP", "WIN_ASCENT", 
      "WIN_DESCENT", "X_HEIGHT", "CAP_HEIGHT", "WEIGHT_CLASS", "WIDTH_CLASS", 
      "VENDOR", "UNICODE_RANGE", "CODE_PAGE_RANGE", "FAMILY_CLASS", "STAT", 
      "ELIDED_FALLBACK_NAME", "ELIDED_FALLBACK_NAME_ID", "DESIGN_AXIS", 
      "AXIS_VALUE", "FLAG", "LOCATION", "AXIS_EAVN", "AXIS_OSFA", "VHEA", 
      "VERT_TYPO_ASCENDER", "VERT_TYPO_DESCENDER", "VERT_TYPO_LINE_GAP", 
      "VMTX", "VERT_ORIGIN_Y", "VERT_ADVANCE_Y", "LCBRACE", "RCBRACE", "LBRACKET", 
      "RBRACKET", "LPAREN", "RPAREN", "HYPHEN", "PLUS", "SEMI", "EQUALS", 
      "MARKER", "COMMA", "COLON", "STRVAL", "LNAME", "GCLASS", "AXISUNIT", 
      "CID", "ESCGNAME", "NAMELABEL", "EXTNAME", "POINTNUM", "NUMEXT", "NUMOCT", 
      "NUM", "A_WHITESPACE", "A_LABEL", "A_LBRACE", "A_CLOSE", "A_LINE", 
      "I_WHITESPACE", "I_RPAREN", "IFILE", "I_LPAREN"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,150,1264,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,1,0,1,0,1,0,1,0,1,0,5,0,254,8,0,10,0,12,0,257,9,0,1,
  	0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,269,8,1,1,1,1,1,1,2,1,2,1,2,
  	1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,3,5,289,8,5,1,5,1,
  	5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,
  	1,10,1,10,3,10,312,8,10,1,10,1,10,4,10,316,8,10,11,10,12,10,317,1,10,
  	1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,
  	334,8,11,1,12,1,12,1,12,1,12,5,12,340,8,12,10,12,12,12,343,9,12,1,12,
  	1,12,1,13,1,13,1,13,3,13,350,8,13,1,13,1,13,4,13,354,8,13,11,13,12,13,
  	355,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,365,8,14,1,15,1,15,1,15,3,
  	15,370,8,15,1,15,1,15,4,15,374,8,15,11,15,12,15,375,1,15,1,15,1,15,3,
  	15,381,8,15,1,15,1,15,1,16,1,16,1,16,5,16,388,8,16,10,16,12,16,391,9,
  	16,1,16,1,16,1,16,1,17,1,17,3,17,398,8,17,1,17,1,17,1,18,1,18,1,18,4,
  	18,405,8,18,11,18,12,18,406,1,18,1,18,1,18,1,18,3,18,413,8,18,1,19,1,
  	19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,429,
  	8,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,3,22,442,
  	8,22,1,23,1,23,1,23,4,23,447,8,23,11,23,12,23,448,3,23,451,8,23,1,24,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,461,8,24,1,25,1,25,1,25,1,25,
  	3,25,467,8,25,1,25,1,25,1,25,5,25,472,8,25,10,25,12,25,475,9,25,1,26,
  	1,26,1,26,1,26,5,26,481,8,26,10,26,12,26,484,9,26,3,26,486,8,26,1,26,
  	1,26,1,26,1,26,1,26,3,26,493,8,26,3,26,495,8,26,1,26,1,26,1,26,1,26,1,
  	26,3,26,502,8,26,3,26,504,8,26,3,26,506,8,26,1,27,3,27,509,8,27,1,27,
  	1,27,3,27,513,8,27,1,27,1,27,5,27,517,8,27,10,27,12,27,520,9,27,1,27,
  	1,27,4,27,524,8,27,11,27,12,27,525,1,27,5,27,529,8,27,10,27,12,27,532,
  	9,27,1,27,1,27,1,27,3,27,537,8,27,1,27,1,27,1,27,4,27,542,8,27,11,27,
  	12,27,543,1,27,3,27,547,8,27,1,27,1,27,1,27,4,27,552,8,27,11,27,12,27,
  	553,1,27,3,27,557,8,27,1,27,1,27,1,27,4,27,562,8,27,11,27,12,27,563,1,
  	27,3,27,567,8,27,3,27,569,8,27,1,28,1,28,3,28,573,8,28,1,29,1,29,1,29,
  	1,29,1,29,3,29,580,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,4,30,592,8,30,11,30,12,30,593,1,30,1,30,3,30,598,8,30,1,31,1,31,
  	3,31,602,8,31,1,32,1,32,4,32,606,8,32,11,32,12,32,607,1,32,1,32,1,33,
  	1,33,1,33,3,33,615,8,33,1,33,1,33,1,34,1,34,1,34,3,34,622,8,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,3,35,633,8,35,1,36,1,36,1,36,5,
  	36,638,8,36,10,36,12,36,641,9,36,1,37,1,37,1,37,1,37,3,37,647,8,37,1,
  	37,3,37,650,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,660,8,39,
  	1,40,1,40,1,40,3,40,665,8,40,1,40,3,40,668,8,40,1,40,3,40,671,8,40,1,
  	41,1,41,4,41,675,8,41,11,41,12,41,676,1,42,1,42,1,42,1,42,1,42,3,42,684,
  	8,42,3,42,686,8,42,1,42,1,42,1,43,1,43,1,43,4,43,693,8,43,11,43,12,43,
  	694,1,43,1,43,1,44,1,44,1,45,1,45,1,45,4,45,704,8,45,11,45,12,45,705,
  	1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,715,8,46,1,46,1,46,1,47,1,47,
  	4,47,721,8,47,11,47,12,47,722,1,48,1,48,1,48,1,48,5,48,729,8,48,10,48,
  	12,48,732,9,48,1,49,1,49,1,49,4,49,737,8,49,11,49,12,49,738,1,50,1,50,
  	1,50,4,50,744,8,50,11,50,12,50,745,1,50,1,50,1,50,1,50,1,51,1,51,1,51,
  	1,51,1,51,3,51,757,8,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
  	1,52,1,52,1,53,1,53,1,53,4,53,773,8,53,11,53,12,53,774,1,54,1,54,1,54,
  	4,54,780,8,54,11,54,12,54,781,1,55,1,55,1,55,4,55,787,8,55,11,55,12,55,
  	788,1,56,1,56,1,56,4,56,794,8,56,11,56,12,56,795,1,56,1,56,1,56,1,56,
  	1,57,1,57,3,57,804,8,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,5,59,
  	814,8,59,10,59,12,59,817,9,59,1,59,1,59,1,59,1,59,1,60,1,60,3,60,825,
  	8,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,5,62,835,8,62,10,62,12,62,
  	838,9,62,1,62,1,62,1,62,1,62,1,63,1,63,3,63,846,8,63,1,63,1,63,1,64,1,
  	64,1,64,1,65,1,65,1,65,4,65,856,8,65,11,65,12,65,857,1,65,1,65,1,65,1,
  	65,1,66,1,66,3,66,866,8,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,3,
  	67,876,8,67,3,67,878,8,67,1,67,1,67,1,68,1,68,1,68,4,68,885,8,68,11,68,
  	12,68,886,1,68,1,68,1,68,1,68,1,69,1,69,3,69,895,8,69,1,69,1,69,1,70,
  	1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
  	1,70,1,70,1,70,1,70,1,70,1,70,4,70,920,8,70,11,70,12,70,921,3,70,924,
  	8,70,1,71,1,71,1,71,4,71,929,8,71,11,71,12,71,930,1,71,1,71,1,71,1,71,
  	1,72,1,72,1,72,1,72,1,72,3,72,942,8,72,1,72,1,72,1,73,1,73,1,73,1,73,
  	1,73,4,73,951,8,73,11,73,12,73,952,1,73,1,73,1,74,1,74,1,74,4,74,960,
  	8,74,11,74,12,74,961,1,74,1,74,1,75,1,75,1,75,1,75,3,75,970,8,75,1,75,
  	1,75,1,76,1,76,1,76,1,76,1,76,3,76,979,8,76,3,76,981,8,76,1,77,1,77,4,
  	77,985,8,77,11,77,12,77,986,1,78,1,78,1,78,4,78,992,8,78,11,78,12,78,
  	993,1,78,1,78,1,79,1,79,3,79,1000,8,79,1,79,1,79,1,80,1,80,1,80,1,81,
  	1,81,1,81,1,81,1,81,3,81,1012,8,81,3,81,1014,8,81,1,81,1,81,1,82,1,82,
  	1,82,4,82,1021,8,82,11,82,12,82,1022,1,82,1,82,1,82,1,82,1,83,1,83,3,
  	83,1031,8,83,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,
  	85,1044,8,85,1,85,1,85,1,86,1,86,1,86,3,86,1051,8,86,1,87,1,87,1,87,1,
  	87,1,87,4,87,1058,8,87,11,87,12,87,1059,1,87,1,87,3,87,1064,8,87,1,88,
  	1,88,1,88,3,88,1069,8,88,1,88,1,88,1,88,1,88,1,88,1,89,4,89,1077,8,89,
  	11,89,12,89,1078,1,90,1,90,1,90,5,90,1084,8,90,10,90,12,90,1087,9,90,
  	1,91,4,91,1090,8,91,11,91,12,91,1091,1,92,1,92,3,92,1096,8,92,1,92,3,
  	92,1099,8,92,1,93,3,93,1102,8,93,1,94,1,94,3,94,1106,8,94,1,95,1,95,4,
  	95,1110,8,95,11,95,12,95,1111,1,95,1,95,1,96,1,96,1,96,3,96,1119,8,96,
  	1,96,3,96,1122,8,96,1,97,1,97,1,98,1,98,3,98,1128,8,98,1,99,1,99,1,100,
  	1,100,1,101,1,101,1,102,1,102,1,103,1,103,1,104,5,104,1141,8,104,10,104,
  	12,104,1144,9,104,1,104,1,104,1,105,5,105,1149,8,105,10,105,12,105,1152,
  	9,105,1,105,1,105,1,106,5,106,1157,8,106,10,106,12,106,1160,9,106,1,106,
  	1,106,1,107,5,107,1165,8,107,10,107,12,107,1168,9,107,1,107,1,107,1,108,
  	5,108,1173,8,108,10,108,12,108,1176,9,108,1,108,1,108,1,109,5,109,1181,
  	8,109,10,109,12,109,1184,9,109,1,109,1,109,1,110,5,110,1189,8,110,10,
  	110,12,110,1192,9,110,1,110,1,110,1,111,5,111,1197,8,111,10,111,12,111,
  	1200,9,111,1,111,1,111,1,112,5,112,1205,8,112,10,112,12,112,1208,9,112,
  	1,112,1,112,1,113,5,113,1213,8,113,10,113,12,113,1216,9,113,1,113,1,113,
  	1,114,5,114,1221,8,114,10,114,12,114,1224,9,114,1,114,1,114,1,115,5,115,
  	1229,8,115,10,115,12,115,1232,9,115,1,115,1,115,1,116,5,116,1237,8,116,
  	10,116,12,116,1240,9,116,1,116,1,116,1,117,5,117,1245,8,117,10,117,12,
  	117,1248,9,117,1,117,1,117,1,118,1,118,1,119,1,119,1,120,1,120,1,121,
  	1,121,1,122,1,122,1,123,1,123,1,123,0,0,124,0,2,4,6,8,10,12,14,16,18,
  	20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
  	66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
  	110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
  	146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
  	182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
  	218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,0,25,1,0,
  	43,46,1,0,21,24,1,0,36,37,1,0,123,124,1,0,64,65,1,0,66,67,1,0,76,79,1,
  	0,111,113,1,0,88,94,2,0,83,86,95,96,1,0,98,99,1,0,108,109,1,0,115,116,
  	1,0,131,132,3,0,14,14,133,133,135,137,3,0,55,55,133,133,136,136,4,0,55,
  	55,130,130,133,133,136,137,2,0,138,138,141,141,1,0,139,141,1,0,32,33,
  	1,0,34,35,1,0,1,2,1,0,28,29,1,0,38,39,1,0,59,60,1325,0,255,1,0,0,0,2,
  	268,1,0,0,0,4,272,1,0,0,0,6,277,1,0,0,0,8,281,1,0,0,0,10,285,1,0,0,0,
  	12,293,1,0,0,0,14,297,1,0,0,0,16,301,1,0,0,0,18,305,1,0,0,0,20,308,1,
  	0,0,0,22,323,1,0,0,0,24,335,1,0,0,0,26,346,1,0,0,0,28,364,1,0,0,0,30,
  	366,1,0,0,0,32,384,1,0,0,0,34,397,1,0,0,0,36,412,1,0,0,0,38,428,1,0,0,
  	0,40,432,1,0,0,0,42,435,1,0,0,0,44,438,1,0,0,0,46,443,1,0,0,0,48,460,
  	1,0,0,0,50,462,1,0,0,0,52,485,1,0,0,0,54,508,1,0,0,0,56,570,1,0,0,0,58,
  	579,1,0,0,0,60,597,1,0,0,0,62,601,1,0,0,0,64,603,1,0,0,0,66,614,1,0,0,
  	0,68,621,1,0,0,0,70,632,1,0,0,0,72,634,1,0,0,0,74,642,1,0,0,0,76,651,
  	1,0,0,0,78,655,1,0,0,0,80,661,1,0,0,0,82,672,1,0,0,0,84,678,1,0,0,0,86,
  	689,1,0,0,0,88,698,1,0,0,0,90,700,1,0,0,0,92,714,1,0,0,0,94,718,1,0,0,
  	0,96,724,1,0,0,0,98,733,1,0,0,0,100,740,1,0,0,0,102,756,1,0,0,0,104,760,
  	1,0,0,0,106,769,1,0,0,0,108,776,1,0,0,0,110,783,1,0,0,0,112,790,1,0,0,
  	0,114,803,1,0,0,0,116,807,1,0,0,0,118,810,1,0,0,0,120,824,1,0,0,0,122,
  	828,1,0,0,0,124,831,1,0,0,0,126,845,1,0,0,0,128,849,1,0,0,0,130,852,1,
  	0,0,0,132,865,1,0,0,0,134,869,1,0,0,0,136,881,1,0,0,0,138,894,1,0,0,0,
  	140,923,1,0,0,0,142,925,1,0,0,0,144,941,1,0,0,0,146,945,1,0,0,0,148,956,
  	1,0,0,0,150,969,1,0,0,0,152,973,1,0,0,0,154,982,1,0,0,0,156,988,1,0,0,
  	0,158,999,1,0,0,0,160,1003,1,0,0,0,162,1006,1,0,0,0,164,1017,1,0,0,0,
  	166,1030,1,0,0,0,168,1034,1,0,0,0,170,1038,1,0,0,0,172,1047,1,0,0,0,174,
  	1063,1,0,0,0,176,1068,1,0,0,0,178,1076,1,0,0,0,180,1080,1,0,0,0,182,1089,
  	1,0,0,0,184,1095,1,0,0,0,186,1101,1,0,0,0,188,1105,1,0,0,0,190,1107,1,
  	0,0,0,192,1121,1,0,0,0,194,1123,1,0,0,0,196,1127,1,0,0,0,198,1129,1,0,
  	0,0,200,1131,1,0,0,0,202,1133,1,0,0,0,204,1135,1,0,0,0,206,1137,1,0,0,
  	0,208,1142,1,0,0,0,210,1150,1,0,0,0,212,1158,1,0,0,0,214,1166,1,0,0,0,
  	216,1174,1,0,0,0,218,1182,1,0,0,0,220,1190,1,0,0,0,222,1198,1,0,0,0,224,
  	1206,1,0,0,0,226,1214,1,0,0,0,228,1222,1,0,0,0,230,1230,1,0,0,0,232,1238,
  	1,0,0,0,234,1246,1,0,0,0,236,1251,1,0,0,0,238,1253,1,0,0,0,240,1255,1,
  	0,0,0,242,1257,1,0,0,0,244,1259,1,0,0,0,246,1261,1,0,0,0,248,254,3,2,
  	1,0,249,254,3,20,10,0,250,254,3,22,11,0,251,254,3,24,12,0,252,254,3,26,
  	13,0,253,248,1,0,0,0,253,249,1,0,0,0,253,250,1,0,0,0,253,251,1,0,0,0,
  	253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,
  	1,0,0,0,257,255,1,0,0,0,258,259,5,0,0,1,259,1,1,0,0,0,260,269,3,4,2,0,
  	261,269,3,6,3,0,262,269,3,8,4,0,263,269,3,10,5,0,264,269,3,12,6,0,265,
  	269,3,14,7,0,266,269,3,16,8,0,267,269,3,18,9,0,268,260,1,0,0,0,268,261,
  	1,0,0,0,268,262,1,0,0,0,268,263,1,0,0,0,268,264,1,0,0,0,268,265,1,0,0,
  	0,268,266,1,0,0,0,268,267,1,0,0,0,269,270,1,0,0,0,270,271,5,125,0,0,271,
  	3,1,0,0,0,272,273,5,5,0,0,273,274,5,148,0,0,274,275,5,149,0,0,275,276,
  	5,150,0,0,276,5,1,0,0,0,277,278,3,194,97,0,278,279,5,126,0,0,279,280,
  	3,188,94,0,280,7,1,0,0,0,281,282,5,10,0,0,282,283,3,202,101,0,283,284,
  	3,202,101,0,284,9,1,0,0,0,285,288,5,56,0,0,286,289,3,196,98,0,287,289,
  	3,188,94,0,288,286,1,0,0,0,288,287,1,0,0,0,289,290,1,0,0,0,290,291,3,
  	170,85,0,291,292,3,194,97,0,292,11,1,0,0,0,293,294,5,52,0,0,294,295,3,
  	172,86,0,295,296,3,200,100,0,296,13,1,0,0,0,297,298,5,53,0,0,298,299,
  	3,60,30,0,299,300,3,200,100,0,300,15,1,0,0,0,301,302,5,54,0,0,302,303,
  	3,72,36,0,303,304,5,131,0,0,304,17,1,0,0,0,305,306,5,47,0,0,306,307,5,
  	133,0,0,307,19,1,0,0,0,308,309,5,6,0,0,309,311,3,202,101,0,310,312,5,
  	25,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,315,5,117,
  	0,0,314,316,3,28,14,0,315,314,1,0,0,0,316,317,1,0,0,0,317,315,1,0,0,0,
  	317,318,1,0,0,0,318,319,1,0,0,0,319,320,5,118,0,0,320,321,3,202,101,0,
  	321,322,5,125,0,0,322,21,1,0,0,0,323,333,5,7,0,0,324,334,3,90,45,0,325,
  	334,3,100,50,0,326,334,3,112,56,0,327,334,3,118,59,0,328,334,3,124,62,
  	0,329,334,3,130,65,0,330,334,3,136,68,0,331,334,3,142,71,0,332,334,3,
  	164,82,0,333,324,1,0,0,0,333,325,1,0,0,0,333,326,1,0,0,0,333,327,1,0,
  	0,0,333,328,1,0,0,0,333,329,1,0,0,0,333,330,1,0,0,0,333,331,1,0,0,0,333,
  	332,1,0,0,0,334,23,1,0,0,0,335,336,3,240,120,0,336,337,5,143,0,0,337,
  	341,5,144,0,0,338,340,5,146,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,
  	1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,345,5,145,
  	0,0,345,25,1,0,0,0,346,347,5,12,0,0,347,349,3,200,100,0,348,350,5,25,
  	0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,353,5,117,0,0,
  	352,354,3,38,19,0,353,352,1,0,0,0,354,355,1,0,0,0,355,353,1,0,0,0,355,
  	356,1,0,0,0,356,357,1,0,0,0,357,358,5,118,0,0,358,359,3,200,100,0,359,
  	360,5,125,0,0,360,27,1,0,0,0,361,365,3,38,19,0,362,365,3,30,15,0,363,
  	365,3,32,16,0,364,361,1,0,0,0,364,362,1,0,0,0,364,363,1,0,0,0,365,29,
  	1,0,0,0,366,367,5,12,0,0,367,380,3,200,100,0,368,370,5,25,0,0,369,368,
  	1,0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,373,5,117,0,0,372,374,3,38,
  	19,0,373,372,1,0,0,0,374,375,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,
  	376,377,1,0,0,0,377,378,5,118,0,0,378,379,3,200,100,0,379,381,1,0,0,0,
  	380,369,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,5,125,0,0,383,
  	31,1,0,0,0,384,385,5,42,0,0,385,389,5,117,0,0,386,388,3,34,17,0,387,386,
  	1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,
  	0,391,389,1,0,0,0,392,393,5,118,0,0,393,394,5,125,0,0,394,33,1,0,0,0,
  	395,398,3,36,18,0,396,398,3,4,2,0,397,395,1,0,0,0,397,396,1,0,0,0,398,
  	399,1,0,0,0,399,400,5,125,0,0,400,35,1,0,0,0,401,402,7,0,0,0,402,404,
  	5,117,0,0,403,405,3,158,79,0,404,403,1,0,0,0,405,406,1,0,0,0,406,404,
  	1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,409,5,118,0,0,409,413,1,0,
  	0,0,410,411,5,48,0,0,411,413,3,206,103,0,412,401,1,0,0,0,412,410,1,0,
  	0,0,413,37,1,0,0,0,414,429,3,40,20,0,415,429,3,42,21,0,416,429,3,44,22,
  	0,417,429,3,46,23,0,418,429,3,6,3,0,419,429,3,50,25,0,420,429,3,52,26,
  	0,421,429,3,10,5,0,422,429,3,54,27,0,423,429,3,82,41,0,424,429,3,84,42,
  	0,425,429,3,86,43,0,426,429,3,88,44,0,427,429,3,4,2,0,428,414,1,0,0,0,
  	428,415,1,0,0,0,428,416,1,0,0,0,428,417,1,0,0,0,428,418,1,0,0,0,428,419,
  	1,0,0,0,428,420,1,0,0,0,428,421,1,0,0,0,428,422,1,0,0,0,428,423,1,0,0,
  	0,428,424,1,0,0,0,428,425,1,0,0,0,428,426,1,0,0,0,428,427,1,0,0,0,429,
  	430,1,0,0,0,430,431,5,125,0,0,431,39,1,0,0,0,432,433,5,6,0,0,433,434,
  	3,202,101,0,434,41,1,0,0,0,435,436,5,8,0,0,436,437,3,202,101,0,437,43,
  	1,0,0,0,438,439,5,9,0,0,439,441,3,202,101,0,440,442,7,1,0,0,441,440,1,
  	0,0,0,441,442,1,0,0,0,442,45,1,0,0,0,443,450,5,13,0,0,444,451,5,141,0,
  	0,445,447,3,48,24,0,446,445,1,0,0,0,447,448,1,0,0,0,448,446,1,0,0,0,448,
  	449,1,0,0,0,449,451,1,0,0,0,450,444,1,0,0,0,450,446,1,0,0,0,451,47,1,
  	0,0,0,452,461,5,15,0,0,453,461,5,16,0,0,454,461,5,17,0,0,455,461,5,18,
  	0,0,456,457,5,20,0,0,457,461,3,188,94,0,458,459,5,19,0,0,459,461,3,188,
  	94,0,460,452,1,0,0,0,460,453,1,0,0,0,460,454,1,0,0,0,460,455,1,0,0,0,
  	460,456,1,0,0,0,460,458,1,0,0,0,461,49,1,0,0,0,462,466,5,31,0,0,463,467,
  	3,236,118,0,464,467,3,238,119,0,465,467,3,244,122,0,466,463,1,0,0,0,466,
  	464,1,0,0,0,466,465,1,0,0,0,467,468,1,0,0,0,468,473,3,178,89,0,469,470,
  	5,128,0,0,470,472,3,178,89,0,471,469,1,0,0,0,472,475,1,0,0,0,473,471,
  	1,0,0,0,473,474,1,0,0,0,474,51,1,0,0,0,475,473,1,0,0,0,476,477,5,30,0,
  	0,477,482,3,178,89,0,478,479,5,128,0,0,479,481,3,178,89,0,480,478,1,0,
  	0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,486,1,0,0,0,484,
  	482,1,0,0,0,485,476,1,0,0,0,485,486,1,0,0,0,486,505,1,0,0,0,487,488,3,
  	238,119,0,488,494,3,178,89,0,489,492,5,36,0,0,490,493,5,62,0,0,491,493,
  	3,178,89,0,492,490,1,0,0,0,492,491,1,0,0,0,493,495,1,0,0,0,494,489,1,
  	0,0,0,494,495,1,0,0,0,495,506,1,0,0,0,496,497,3,236,118,0,497,503,3,178,
  	89,0,498,501,7,2,0,0,499,502,5,62,0,0,500,502,3,178,89,0,501,499,1,0,
  	0,0,501,500,1,0,0,0,502,504,1,0,0,0,503,498,1,0,0,0,503,504,1,0,0,0,504,
  	506,1,0,0,0,505,487,1,0,0,0,505,496,1,0,0,0,506,53,1,0,0,0,507,509,3,
  	242,121,0,508,507,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,512,3,244,
  	122,0,511,513,3,182,91,0,512,511,1,0,0,0,512,513,1,0,0,0,513,568,1,0,
  	0,0,514,518,3,58,29,0,515,517,3,56,28,0,516,515,1,0,0,0,517,520,1,0,0,
  	0,518,516,1,0,0,0,518,519,1,0,0,0,519,569,1,0,0,0,520,518,1,0,0,0,521,
  	522,5,12,0,0,522,524,3,200,100,0,523,521,1,0,0,0,524,525,1,0,0,0,525,
  	523,1,0,0,0,525,526,1,0,0,0,526,530,1,0,0,0,527,529,3,180,90,0,528,527,
  	1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,569,1,0,0,
  	0,532,530,1,0,0,0,533,534,5,57,0,0,534,536,3,76,38,0,535,537,3,182,91,
  	0,536,535,1,0,0,0,536,537,1,0,0,0,537,569,1,0,0,0,538,539,5,58,0,0,539,
  	541,3,182,91,0,540,542,3,78,39,0,541,540,1,0,0,0,542,543,1,0,0,0,543,
  	541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,547,3,182,91,0,546,545,
  	1,0,0,0,546,547,1,0,0,0,547,569,1,0,0,0,548,549,3,246,123,0,549,551,3,
  	182,91,0,550,552,3,80,40,0,551,550,1,0,0,0,552,553,1,0,0,0,553,551,1,
  	0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,555,557,3,182,91,0,556,555,1,0,
  	0,0,556,557,1,0,0,0,557,569,1,0,0,0,558,559,5,55,0,0,559,561,3,182,91,
  	0,560,562,3,78,39,0,561,560,1,0,0,0,562,563,1,0,0,0,563,561,1,0,0,0,563,
  	564,1,0,0,0,564,566,1,0,0,0,565,567,3,182,91,0,566,565,1,0,0,0,566,567,
  	1,0,0,0,567,569,1,0,0,0,568,514,1,0,0,0,568,523,1,0,0,0,568,533,1,0,0,
  	0,568,538,1,0,0,0,568,548,1,0,0,0,568,558,1,0,0,0,569,55,1,0,0,0,570,
  	572,3,184,92,0,571,573,3,58,29,0,572,571,1,0,0,0,572,573,1,0,0,0,573,
  	57,1,0,0,0,574,575,5,26,0,0,575,576,3,200,100,0,576,577,5,27,0,0,577,
  	580,1,0,0,0,578,580,3,60,30,0,579,574,1,0,0,0,579,578,1,0,0,0,580,59,
  	1,0,0,0,581,598,3,62,31,0,582,583,5,26,0,0,583,584,3,62,31,0,584,585,
  	3,62,31,0,585,586,3,62,31,0,586,587,3,62,31,0,587,588,5,27,0,0,588,598,
  	1,0,0,0,589,591,5,121,0,0,590,592,3,68,34,0,591,590,1,0,0,0,592,593,1,
  	0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,596,5,122,0,
  	0,596,598,1,0,0,0,597,581,1,0,0,0,597,582,1,0,0,0,597,589,1,0,0,0,598,
  	61,1,0,0,0,599,602,5,141,0,0,600,602,3,64,32,0,601,599,1,0,0,0,601,600,
  	1,0,0,0,602,63,1,0,0,0,603,605,5,121,0,0,604,606,3,66,33,0,605,604,1,
  	0,0,0,606,607,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,609,1,0,0,0,
  	609,610,5,122,0,0,610,65,1,0,0,0,611,612,3,70,35,0,612,613,5,129,0,0,
  	613,615,1,0,0,0,614,611,1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,0,616,617,
  	5,141,0,0,617,67,1,0,0,0,618,619,3,70,35,0,619,620,5,129,0,0,620,622,
  	1,0,0,0,621,618,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,624,5,26,
  	0,0,624,625,5,141,0,0,625,626,5,141,0,0,626,627,5,141,0,0,627,628,5,141,
  	0,0,628,629,5,27,0,0,629,69,1,0,0,0,630,633,3,72,36,0,631,633,5,131,0,
  	0,632,630,1,0,0,0,632,631,1,0,0,0,633,71,1,0,0,0,634,639,3,74,37,0,635,
  	636,5,128,0,0,636,638,3,74,37,0,637,635,1,0,0,0,638,641,1,0,0,0,639,637,
  	1,0,0,0,639,640,1,0,0,0,640,73,1,0,0,0,641,639,1,0,0,0,642,643,3,202,
  	101,0,643,644,5,126,0,0,644,646,3,204,102,0,645,647,7,3,0,0,646,645,1,
  	0,0,0,646,647,1,0,0,0,647,649,1,0,0,0,648,650,5,133,0,0,649,648,1,0,0,
  	0,649,650,1,0,0,0,650,75,1,0,0,0,651,652,3,184,92,0,652,653,3,170,85,
  	0,653,654,3,170,85,0,654,77,1,0,0,0,655,656,3,170,85,0,656,657,5,55,0,
  	0,657,659,3,194,97,0,658,660,5,127,0,0,659,658,1,0,0,0,659,660,1,0,0,
  	0,660,79,1,0,0,0,661,664,3,170,85,0,662,663,5,55,0,0,663,665,3,194,97,
  	0,664,662,1,0,0,0,664,665,1,0,0,0,665,667,1,0,0,0,666,668,5,61,0,0,667,
  	666,1,0,0,0,667,668,1,0,0,0,668,670,1,0,0,0,669,671,5,127,0,0,670,669,
  	1,0,0,0,670,671,1,0,0,0,671,81,1,0,0,0,672,674,5,40,0,0,673,675,3,204,
  	102,0,674,673,1,0,0,0,675,676,1,0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,
  	677,83,1,0,0,0,678,685,5,49,0,0,679,683,3,206,103,0,680,681,3,206,103,
  	0,681,682,3,206,103,0,682,684,1,0,0,0,683,680,1,0,0,0,683,684,1,0,0,0,
  	684,686,1,0,0,0,685,679,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,688,
  	5,130,0,0,688,85,1,0,0,0,689,690,5,41,0,0,690,692,5,117,0,0,691,693,3,
  	158,79,0,692,691,1,0,0,0,693,694,1,0,0,0,694,692,1,0,0,0,694,695,1,0,
  	0,0,695,696,1,0,0,0,696,697,5,118,0,0,697,87,1,0,0,0,698,699,5,11,0,0,
  	699,89,1,0,0,0,700,701,5,63,0,0,701,703,5,117,0,0,702,704,3,92,46,0,703,
  	702,1,0,0,0,704,705,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,707,1,
  	0,0,0,707,708,5,118,0,0,708,709,5,63,0,0,709,710,5,125,0,0,710,91,1,0,
  	0,0,711,715,3,94,47,0,712,715,3,96,48,0,713,715,3,4,2,0,714,711,1,0,0,
  	0,714,712,1,0,0,0,714,713,1,0,0,0,715,716,1,0,0,0,716,717,5,125,0,0,717,
  	93,1,0,0,0,718,720,7,4,0,0,719,721,3,202,101,0,720,719,1,0,0,0,721,722,
  	1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,95,1,0,0,0,724,725,7,5,0,
  	0,725,730,3,98,49,0,726,727,5,128,0,0,727,729,3,98,49,0,728,726,1,0,0,
  	0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,97,1,0,0,0,732,
  	730,1,0,0,0,733,734,3,202,101,0,734,736,3,202,101,0,735,737,5,141,0,0,
  	736,735,1,0,0,0,737,738,1,0,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,99,
  	1,0,0,0,740,741,5,68,0,0,741,743,5,117,0,0,742,744,3,102,51,0,743,742,
  	1,0,0,0,744,745,1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,
  	0,747,748,5,118,0,0,748,749,5,68,0,0,749,750,5,125,0,0,750,101,1,0,0,
  	0,751,757,3,104,52,0,752,757,3,106,53,0,753,757,3,108,54,0,754,757,3,
  	110,55,0,755,757,3,4,2,0,756,751,1,0,0,0,756,752,1,0,0,0,756,753,1,0,
  	0,0,756,754,1,0,0,0,756,755,1,0,0,0,757,758,1,0,0,0,758,759,5,125,0,0,
  	759,103,1,0,0,0,760,761,5,69,0,0,761,762,3,186,93,0,762,763,5,128,0,0,
  	763,764,3,186,93,0,764,765,5,128,0,0,765,766,3,186,93,0,766,767,5,128,
  	0,0,767,768,3,186,93,0,768,105,1,0,0,0,769,770,5,70,0,0,770,772,3,178,
  	89,0,771,773,5,141,0,0,772,771,1,0,0,0,773,774,1,0,0,0,774,772,1,0,0,
  	0,774,775,1,0,0,0,775,107,1,0,0,0,776,777,5,71,0,0,777,779,3,178,89,0,
  	778,780,3,62,31,0,779,778,1,0,0,0,780,781,1,0,0,0,781,779,1,0,0,0,781,
  	782,1,0,0,0,782,109,1,0,0,0,783,784,5,72,0,0,784,786,3,178,89,0,785,787,
  	5,141,0,0,786,785,1,0,0,0,787,788,1,0,0,0,788,786,1,0,0,0,788,789,1,0,
  	0,0,789,111,1,0,0,0,790,791,5,73,0,0,791,793,5,117,0,0,792,794,3,114,
  	57,0,793,792,1,0,0,0,794,795,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,
  	796,797,1,0,0,0,797,798,5,118,0,0,798,799,5,73,0,0,799,800,5,125,0,0,
  	800,113,1,0,0,0,801,804,3,116,58,0,802,804,3,4,2,0,803,801,1,0,0,0,803,
  	802,1,0,0,0,804,805,1,0,0,0,805,806,5,125,0,0,806,115,1,0,0,0,807,808,
  	5,74,0,0,808,809,5,138,0,0,809,117,1,0,0,0,810,811,5,75,0,0,811,815,5,
  	117,0,0,812,814,3,120,60,0,813,812,1,0,0,0,814,817,1,0,0,0,815,813,1,
  	0,0,0,815,816,1,0,0,0,816,818,1,0,0,0,817,815,1,0,0,0,818,819,5,118,0,
  	0,819,820,5,75,0,0,820,821,5,125,0,0,821,119,1,0,0,0,822,825,3,122,61,
  	0,823,825,3,4,2,0,824,822,1,0,0,0,824,823,1,0,0,0,825,826,1,0,0,0,826,
  	827,5,125,0,0,827,121,1,0,0,0,828,829,7,6,0,0,829,830,5,141,0,0,830,123,
  	1,0,0,0,831,832,5,110,0,0,832,836,5,117,0,0,833,835,3,126,63,0,834,833,
  	1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,839,1,0,0,
  	0,838,836,1,0,0,0,839,840,5,118,0,0,840,841,5,110,0,0,841,842,5,125,0,
  	0,842,125,1,0,0,0,843,846,3,128,64,0,844,846,3,4,2,0,845,843,1,0,0,0,
  	845,844,1,0,0,0,846,847,1,0,0,0,847,848,5,125,0,0,848,127,1,0,0,0,849,
  	850,7,7,0,0,850,851,5,141,0,0,851,129,1,0,0,0,852,853,5,80,0,0,853,855,
  	5,117,0,0,854,856,3,132,66,0,855,854,1,0,0,0,856,857,1,0,0,0,857,855,
  	1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,860,5,118,0,0,860,861,5,80,
  	0,0,861,862,5,125,0,0,862,131,1,0,0,0,863,866,3,134,67,0,864,866,3,4,
  	2,0,865,863,1,0,0,0,865,864,1,0,0,0,866,867,1,0,0,0,867,868,5,125,0,0,
  	868,133,1,0,0,0,869,870,5,81,0,0,870,877,3,206,103,0,871,875,3,206,103,
  	0,872,873,3,206,103,0,873,874,3,206,103,0,874,876,1,0,0,0,875,872,1,0,
  	0,0,875,876,1,0,0,0,876,878,1,0,0,0,877,871,1,0,0,0,877,878,1,0,0,0,878,
  	879,1,0,0,0,879,880,5,130,0,0,880,135,1,0,0,0,881,882,5,82,0,0,882,884,
  	5,117,0,0,883,885,3,138,69,0,884,883,1,0,0,0,885,886,1,0,0,0,886,884,
  	1,0,0,0,886,887,1,0,0,0,887,888,1,0,0,0,888,889,5,118,0,0,889,890,5,82,
  	0,0,890,891,5,125,0,0,891,137,1,0,0,0,892,895,3,140,70,0,893,895,3,4,
  	2,0,894,892,1,0,0,0,894,893,1,0,0,0,895,896,1,0,0,0,896,897,5,125,0,0,
  	897,139,1,0,0,0,898,899,7,8,0,0,899,924,5,141,0,0,900,901,7,9,0,0,901,
  	924,5,141,0,0,902,903,5,100,0,0,903,924,3,206,103,0,904,905,5,97,0,0,
  	905,924,5,130,0,0,906,907,5,87,0,0,907,908,5,141,0,0,908,909,5,141,0,
  	0,909,910,5,141,0,0,910,911,5,141,0,0,911,912,5,141,0,0,912,913,5,141,
  	0,0,913,914,5,141,0,0,914,915,5,141,0,0,915,916,5,141,0,0,916,924,5,141,
  	0,0,917,919,7,10,0,0,918,920,5,141,0,0,919,918,1,0,0,0,920,921,1,0,0,
  	0,921,919,1,0,0,0,921,922,1,0,0,0,922,924,1,0,0,0,923,898,1,0,0,0,923,
  	900,1,0,0,0,923,902,1,0,0,0,923,904,1,0,0,0,923,906,1,0,0,0,923,917,1,
  	0,0,0,924,141,1,0,0,0,925,926,5,101,0,0,926,928,5,117,0,0,927,929,3,144,
  	72,0,928,927,1,0,0,0,929,930,1,0,0,0,930,928,1,0,0,0,930,931,1,0,0,0,
  	931,932,1,0,0,0,932,933,5,118,0,0,933,934,5,101,0,0,934,935,5,125,0,0,
  	935,143,1,0,0,0,936,942,3,146,73,0,937,942,3,148,74,0,938,942,3,156,78,
  	0,939,942,3,160,80,0,940,942,3,4,2,0,941,936,1,0,0,0,941,937,1,0,0,0,
  	941,938,1,0,0,0,941,939,1,0,0,0,941,940,1,0,0,0,942,943,1,0,0,0,943,944,
  	5,125,0,0,944,145,1,0,0,0,945,946,5,104,0,0,946,947,3,202,101,0,947,948,
  	5,141,0,0,948,950,5,117,0,0,949,951,3,158,79,0,950,949,1,0,0,0,951,952,
  	1,0,0,0,952,950,1,0,0,0,952,953,1,0,0,0,953,954,1,0,0,0,954,955,5,118,
  	0,0,955,147,1,0,0,0,956,957,5,105,0,0,957,959,5,117,0,0,958,960,3,150,
  	75,0,959,958,1,0,0,0,960,961,1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,
  	962,963,1,0,0,0,963,964,5,118,0,0,964,149,1,0,0,0,965,970,3,162,81,0,
  	966,970,3,152,76,0,967,970,3,154,77,0,968,970,3,4,2,0,969,965,1,0,0,0,
  	969,966,1,0,0,0,969,967,1,0,0,0,969,968,1,0,0,0,970,971,1,0,0,0,971,972,
  	5,125,0,0,972,151,1,0,0,0,973,974,5,107,0,0,974,975,3,202,101,0,975,980,
  	3,204,102,0,976,978,3,204,102,0,977,979,3,204,102,0,978,977,1,0,0,0,978,
  	979,1,0,0,0,979,981,1,0,0,0,980,976,1,0,0,0,980,981,1,0,0,0,981,153,1,
  	0,0,0,982,984,5,106,0,0,983,985,7,11,0,0,984,983,1,0,0,0,985,986,1,0,
  	0,0,986,984,1,0,0,0,986,987,1,0,0,0,987,155,1,0,0,0,988,989,5,102,0,0,
  	989,991,5,117,0,0,990,992,3,158,79,0,991,990,1,0,0,0,992,993,1,0,0,0,
  	993,991,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,996,5,118,0,0,996,
  	157,1,0,0,0,997,1000,3,162,81,0,998,1000,3,4,2,0,999,997,1,0,0,0,999,
  	998,1,0,0,0,1000,1001,1,0,0,0,1001,1002,5,125,0,0,1002,159,1,0,0,0,1003,
  	1004,5,103,0,0,1004,1005,3,206,103,0,1005,161,1,0,0,0,1006,1013,5,80,
  	0,0,1007,1011,3,206,103,0,1008,1009,3,206,103,0,1009,1010,3,206,103,0,
  	1010,1012,1,0,0,0,1011,1008,1,0,0,0,1011,1012,1,0,0,0,1012,1014,1,0,0,
  	0,1013,1007,1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,0,0,1015,1016,5,130,
  	0,0,1016,163,1,0,0,0,1017,1018,5,114,0,0,1018,1020,5,117,0,0,1019,1021,
  	3,166,83,0,1020,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1020,1,0,0,0,1022,
  	1023,1,0,0,0,1023,1024,1,0,0,0,1024,1025,5,118,0,0,1025,1026,5,114,0,
  	0,1026,1027,5,125,0,0,1027,165,1,0,0,0,1028,1031,3,168,84,0,1029,1031,
  	3,4,2,0,1030,1028,1,0,0,0,1030,1029,1,0,0,0,1031,1032,1,0,0,0,1032,1033,
  	5,125,0,0,1033,167,1,0,0,0,1034,1035,7,12,0,0,1035,1036,3,196,98,0,1036,
  	1037,5,141,0,0,1037,169,1,0,0,0,1038,1039,5,26,0,0,1039,1043,5,51,0,0,
  	1040,1044,3,172,86,0,1041,1044,5,62,0,0,1042,1044,3,200,100,0,1043,1040,
  	1,0,0,0,1043,1041,1,0,0,0,1043,1042,1,0,0,0,1044,1045,1,0,0,0,1045,1046,
  	5,27,0,0,1046,171,1,0,0,0,1047,1050,3,174,87,0,1048,1049,5,50,0,0,1049,
  	1051,5,141,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,173,1,0,0,0,1052,
  	1053,3,62,31,0,1053,1054,3,62,31,0,1054,1064,1,0,0,0,1055,1057,5,121,
  	0,0,1056,1058,3,176,88,0,1057,1056,1,0,0,0,1058,1059,1,0,0,0,1059,1057,
  	1,0,0,0,1059,1060,1,0,0,0,1060,1061,1,0,0,0,1061,1062,5,122,0,0,1062,
  	1064,1,0,0,0,1063,1052,1,0,0,0,1063,1055,1,0,0,0,1064,175,1,0,0,0,1065,
  	1066,3,70,35,0,1066,1067,5,129,0,0,1067,1069,1,0,0,0,1068,1065,1,0,0,
  	0,1068,1069,1,0,0,0,1069,1070,1,0,0,0,1070,1071,5,26,0,0,1071,1072,5,
  	141,0,0,1072,1073,5,141,0,0,1073,1074,5,27,0,0,1074,177,1,0,0,0,1075,
  	1077,3,180,90,0,1076,1075,1,0,0,0,1077,1078,1,0,0,0,1078,1076,1,0,0,0,
  	1078,1079,1,0,0,0,1079,179,1,0,0,0,1080,1085,3,184,92,0,1081,1082,5,12,
  	0,0,1082,1084,3,200,100,0,1083,1081,1,0,0,0,1084,1087,1,0,0,0,1085,1083,
  	1,0,0,0,1085,1086,1,0,0,0,1086,181,1,0,0,0,1087,1085,1,0,0,0,1088,1090,
  	3,184,92,0,1089,1088,1,0,0,0,1090,1091,1,0,0,0,1091,1089,1,0,0,0,1091,
  	1092,1,0,0,0,1092,183,1,0,0,0,1093,1096,3,188,94,0,1094,1096,3,196,98,
  	0,1095,1093,1,0,0,0,1095,1094,1,0,0,0,1096,1098,1,0,0,0,1097,1099,5,127,
  	0,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,185,1,0,0,0,1100,1102,3,
  	188,94,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,187,1,0,0,0,1103,1106,
  	3,194,97,0,1104,1106,3,190,95,0,1105,1103,1,0,0,0,1105,1104,1,0,0,0,1106,
  	189,1,0,0,0,1107,1109,5,119,0,0,1108,1110,3,192,96,0,1109,1108,1,0,0,
  	0,1110,1111,1,0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,
  	0,0,1113,1114,5,120,0,0,1114,191,1,0,0,0,1115,1118,3,196,98,0,1116,1117,
  	5,123,0,0,1117,1119,3,196,98,0,1118,1116,1,0,0,0,1118,1119,1,0,0,0,1119,
  	1122,1,0,0,0,1120,1122,3,194,97,0,1121,1115,1,0,0,0,1121,1120,1,0,0,0,
  	1122,193,1,0,0,0,1123,1124,7,13,0,0,1124,195,1,0,0,0,1125,1128,3,198,
  	99,0,1126,1128,5,134,0,0,1127,1125,1,0,0,0,1127,1126,1,0,0,0,1128,197,
  	1,0,0,0,1129,1130,7,14,0,0,1130,199,1,0,0,0,1131,1132,7,15,0,0,1132,201,
  	1,0,0,0,1133,1134,7,16,0,0,1134,203,1,0,0,0,1135,1136,7,17,0,0,1136,205,
  	1,0,0,0,1137,1138,7,18,0,0,1138,207,1,0,0,0,1139,1141,3,28,14,0,1140,
  	1139,1,0,0,0,1141,1144,1,0,0,0,1142,1140,1,0,0,0,1142,1143,1,0,0,0,1143,
  	1145,1,0,0,0,1144,1142,1,0,0,0,1145,1146,5,0,0,1,1146,209,1,0,0,0,1147,
  	1149,3,38,19,0,1148,1147,1,0,0,0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,
  	1150,1151,1,0,0,0,1151,1153,1,0,0,0,1152,1150,1,0,0,0,1153,1154,5,0,0,
  	1,1154,211,1,0,0,0,1155,1157,3,34,17,0,1156,1155,1,0,0,0,1157,1160,1,
  	0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,1161,1,0,0,0,1160,1158,
  	1,0,0,0,1161,1162,5,0,0,1,1162,213,1,0,0,0,1163,1165,3,92,46,0,1164,1163,
  	1,0,0,0,1165,1168,1,0,0,0,1166,1164,1,0,0,0,1166,1167,1,0,0,0,1167,1169,
  	1,0,0,0,1168,1166,1,0,0,0,1169,1170,5,0,0,1,1170,215,1,0,0,0,1171,1173,
  	3,114,57,0,1172,1171,1,0,0,0,1173,1176,1,0,0,0,1174,1172,1,0,0,0,1174,
  	1175,1,0,0,0,1175,1177,1,0,0,0,1176,1174,1,0,0,0,1177,1178,5,0,0,1,1178,
  	217,1,0,0,0,1179,1181,3,120,60,0,1180,1179,1,0,0,0,1181,1184,1,0,0,0,
  	1182,1180,1,0,0,0,1182,1183,1,0,0,0,1183,1185,1,0,0,0,1184,1182,1,0,0,
  	0,1185,1186,5,0,0,1,1186,219,1,0,0,0,1187,1189,3,126,63,0,1188,1187,1,
  	0,0,0,1189,1192,1,0,0,0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,1193,
  	1,0,0,0,1192,1190,1,0,0,0,1193,1194,5,0,0,1,1194,221,1,0,0,0,1195,1197,
  	3,102,51,0,1196,1195,1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1198,
  	1199,1,0,0,0,1199,1201,1,0,0,0,1200,1198,1,0,0,0,1201,1202,5,0,0,1,1202,
  	223,1,0,0,0,1203,1205,3,132,66,0,1204,1203,1,0,0,0,1205,1208,1,0,0,0,
  	1206,1204,1,0,0,0,1206,1207,1,0,0,0,1207,1209,1,0,0,0,1208,1206,1,0,0,
  	0,1209,1210,5,0,0,1,1210,225,1,0,0,0,1211,1213,3,166,83,0,1212,1211,1,
  	0,0,0,1213,1216,1,0,0,0,1214,1212,1,0,0,0,1214,1215,1,0,0,0,1215,1217,
  	1,0,0,0,1216,1214,1,0,0,0,1217,1218,5,0,0,1,1218,227,1,0,0,0,1219,1221,
  	3,138,69,0,1220,1219,1,0,0,0,1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,
  	1223,1,0,0,0,1223,1225,1,0,0,0,1224,1222,1,0,0,0,1225,1226,5,0,0,1,1226,
  	229,1,0,0,0,1227,1229,3,144,72,0,1228,1227,1,0,0,0,1229,1232,1,0,0,0,
  	1230,1228,1,0,0,0,1230,1231,1,0,0,0,1231,1233,1,0,0,0,1232,1230,1,0,0,
  	0,1233,1234,5,0,0,1,1234,231,1,0,0,0,1235,1237,3,150,75,0,1236,1235,1,
  	0,0,0,1237,1240,1,0,0,0,1238,1236,1,0,0,0,1238,1239,1,0,0,0,1239,1241,
  	1,0,0,0,1240,1238,1,0,0,0,1241,1242,5,0,0,1,1242,233,1,0,0,0,1243,1245,
  	3,158,79,0,1244,1243,1,0,0,0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1246,
  	1247,1,0,0,0,1247,1249,1,0,0,0,1248,1246,1,0,0,0,1249,1250,5,0,0,1,1250,
  	235,1,0,0,0,1251,1252,7,19,0,0,1252,237,1,0,0,0,1253,1254,7,20,0,0,1254,
  	239,1,0,0,0,1255,1256,7,21,0,0,1256,241,1,0,0,0,1257,1258,7,22,0,0,1258,
  	243,1,0,0,0,1259,1260,7,23,0,0,1260,245,1,0,0,0,1261,1262,7,24,0,0,1262,
  	247,1,0,0,0,133,253,255,268,288,311,317,333,341,349,355,364,369,375,380,
  	389,397,406,412,428,441,448,450,460,466,473,482,485,492,494,501,503,505,
  	508,512,518,525,530,536,543,546,553,556,563,566,568,572,579,593,597,601,
  	607,614,621,632,639,646,649,659,664,667,670,676,683,685,694,705,714,722,
  	730,738,745,756,774,781,788,795,803,815,824,836,845,857,865,875,877,886,
  	894,921,923,930,941,952,961,969,978,980,986,993,999,1011,1013,1022,1030,
  	1043,1050,1059,1063,1068,1078,1085,1091,1095,1098,1101,1105,1111,1118,
  	1121,1127,1142,1150,1158,1166,1174,1182,1190,1198,1206,1214,1222,1230,
  	1238,1246
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  featparserParserStaticData = staticData.release();
}

}

FeatParser::FeatParser(TokenStream *input) : FeatParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

FeatParser::FeatParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  FeatParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *featparserParserStaticData->atn, featparserParserStaticData->decisionToDFA, featparserParserStaticData->sharedContextCache, options);
}

FeatParser::~FeatParser() {
  delete _interpreter;
}

const atn::ATN& FeatParser::getATN() const {
  return *featparserParserStaticData->atn;
}

std::string FeatParser::getGrammarFileName() const {
  return "FeatParser.g4";
}

const std::vector<std::string>& FeatParser::getRuleNames() const {
  return featparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& FeatParser::getVocabulary() const {
  return featparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FeatParser::getSerializedATN() const {
  return featparserParserStaticData->serializedATN;
}


//----------------- FileContext ------------------------------------------------------------------

FeatParser::FileContext::FileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::TopLevelStatementContext *> FeatParser::FileContext::topLevelStatement() {
  return getRuleContexts<FeatParser::TopLevelStatementContext>();
}

FeatParser::TopLevelStatementContext* FeatParser::FileContext::topLevelStatement(size_t i) {
  return getRuleContext<FeatParser::TopLevelStatementContext>(i);
}

std::vector<FeatParser::FeatureBlockContext *> FeatParser::FileContext::featureBlock() {
  return getRuleContexts<FeatParser::FeatureBlockContext>();
}

FeatParser::FeatureBlockContext* FeatParser::FileContext::featureBlock(size_t i) {
  return getRuleContext<FeatParser::FeatureBlockContext>(i);
}

std::vector<FeatParser::TableBlockContext *> FeatParser::FileContext::tableBlock() {
  return getRuleContexts<FeatParser::TableBlockContext>();
}

FeatParser::TableBlockContext* FeatParser::FileContext::tableBlock(size_t i) {
  return getRuleContext<FeatParser::TableBlockContext>(i);
}

std::vector<FeatParser::AnonBlockContext *> FeatParser::FileContext::anonBlock() {
  return getRuleContexts<FeatParser::AnonBlockContext>();
}

FeatParser::AnonBlockContext* FeatParser::FileContext::anonBlock(size_t i) {
  return getRuleContext<FeatParser::AnonBlockContext>(i);
}

std::vector<FeatParser::LookupBlockTopLevelContext *> FeatParser::FileContext::lookupBlockTopLevel() {
  return getRuleContexts<FeatParser::LookupBlockTopLevelContext>();
}

FeatParser::LookupBlockTopLevelContext* FeatParser::FileContext::lookupBlockTopLevel(size_t i) {
  return getRuleContext<FeatParser::LookupBlockTopLevelContext>(i);
}


size_t FeatParser::FileContext::getRuleIndex() const {
  return FeatParser::RuleFile;
}


std::any FeatParser::FileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FileContext* FeatParser::file() {
  FileContext *_localctx = _tracker.createInstance<FileContext>(_ctx, getState());
  enterRule(_localctx, 0, FeatParser::RuleFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(255);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 103723528917882086) != 0) || _la == FeatParser::LNAME

    || _la == FeatParser::GCLASS) {
      setState(253);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FeatParser::INCLUDE:
        case FeatParser::LANGSYS:
        case FeatParser::DEF_AXIS_UNIT:
        case FeatParser::ANCHOR_DEF:
        case FeatParser::VALUE_RECORD_DEF:
        case FeatParser::LOCATION_DEF:
        case FeatParser::MARK_CLASS:
        case FeatParser::LNAME:
        case FeatParser::GCLASS: {
          setState(248);
          topLevelStatement();
          break;
        }

        case FeatParser::FEATURE: {
          setState(249);
          featureBlock();
          break;
        }

        case FeatParser::TABLE: {
          setState(250);
          tableBlock();
          break;
        }

        case FeatParser::ANON:
        case FeatParser::ANON_v: {
          setState(251);
          anonBlock();
          break;
        }

        case FeatParser::LOOKUP: {
          setState(252);
          lookupBlockTopLevel();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(257);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(258);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopLevelStatementContext ------------------------------------------------------------------

FeatParser::TopLevelStatementContext::TopLevelStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::TopLevelStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::IncludeContext* FeatParser::TopLevelStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}

FeatParser::GlyphClassAssignContext* FeatParser::TopLevelStatementContext::glyphClassAssign() {
  return getRuleContext<FeatParser::GlyphClassAssignContext>(0);
}

FeatParser::LangsysAssignContext* FeatParser::TopLevelStatementContext::langsysAssign() {
  return getRuleContext<FeatParser::LangsysAssignContext>(0);
}

FeatParser::Mark_statementContext* FeatParser::TopLevelStatementContext::mark_statement() {
  return getRuleContext<FeatParser::Mark_statementContext>(0);
}

FeatParser::AnchorDefContext* FeatParser::TopLevelStatementContext::anchorDef() {
  return getRuleContext<FeatParser::AnchorDefContext>(0);
}

FeatParser::ValueRecordDefContext* FeatParser::TopLevelStatementContext::valueRecordDef() {
  return getRuleContext<FeatParser::ValueRecordDefContext>(0);
}

FeatParser::LocationDefContext* FeatParser::TopLevelStatementContext::locationDef() {
  return getRuleContext<FeatParser::LocationDefContext>(0);
}

FeatParser::DefaultAxisUnitContext* FeatParser::TopLevelStatementContext::defaultAxisUnit() {
  return getRuleContext<FeatParser::DefaultAxisUnitContext>(0);
}


size_t FeatParser::TopLevelStatementContext::getRuleIndex() const {
  return FeatParser::RuleTopLevelStatement;
}


std::any FeatParser::TopLevelStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTopLevelStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::TopLevelStatementContext* FeatParser::topLevelStatement() {
  TopLevelStatementContext *_localctx = _tracker.createInstance<TopLevelStatementContext>(_ctx, getState());
  enterRule(_localctx, 2, FeatParser::RuleTopLevelStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(268);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::INCLUDE: {
        setState(260);
        include();
        break;
      }

      case FeatParser::LNAME:
      case FeatParser::GCLASS: {
        setState(261);
        glyphClassAssign();
        break;
      }

      case FeatParser::LANGSYS: {
        setState(262);
        langsysAssign();
        break;
      }

      case FeatParser::MARK_CLASS: {
        setState(263);
        mark_statement();
        break;
      }

      case FeatParser::ANCHOR_DEF: {
        setState(264);
        anchorDef();
        break;
      }

      case FeatParser::VALUE_RECORD_DEF: {
        setState(265);
        valueRecordDef();
        break;
      }

      case FeatParser::LOCATION_DEF: {
        setState(266);
        locationDef();
        break;
      }

      case FeatParser::DEF_AXIS_UNIT: {
        setState(267);
        defaultAxisUnit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(270);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IncludeContext ------------------------------------------------------------------

FeatParser::IncludeContext::IncludeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::IncludeContext::INCLUDE() {
  return getToken(FeatParser::INCLUDE, 0);
}

tree::TerminalNode* FeatParser::IncludeContext::I_RPAREN() {
  return getToken(FeatParser::I_RPAREN, 0);
}

tree::TerminalNode* FeatParser::IncludeContext::IFILE() {
  return getToken(FeatParser::IFILE, 0);
}

tree::TerminalNode* FeatParser::IncludeContext::I_LPAREN() {
  return getToken(FeatParser::I_LPAREN, 0);
}


size_t FeatParser::IncludeContext::getRuleIndex() const {
  return FeatParser::RuleInclude;
}


std::any FeatParser::IncludeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitInclude(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::IncludeContext* FeatParser::include() {
  IncludeContext *_localctx = _tracker.createInstance<IncludeContext>(_ctx, getState());
  enterRule(_localctx, 4, FeatParser::RuleInclude);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(272);
    match(FeatParser::INCLUDE);
    setState(273);
    match(FeatParser::I_RPAREN);
    setState(274);
    match(FeatParser::IFILE);
    setState(275);
    match(FeatParser::I_LPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlyphClassAssignContext ------------------------------------------------------------------

FeatParser::GlyphClassAssignContext::GlyphClassAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::GclassContext* FeatParser::GlyphClassAssignContext::gclass() {
  return getRuleContext<FeatParser::GclassContext>(0);
}

tree::TerminalNode* FeatParser::GlyphClassAssignContext::EQUALS() {
  return getToken(FeatParser::EQUALS, 0);
}

FeatParser::GlyphClassContext* FeatParser::GlyphClassAssignContext::glyphClass() {
  return getRuleContext<FeatParser::GlyphClassContext>(0);
}


size_t FeatParser::GlyphClassAssignContext::getRuleIndex() const {
  return FeatParser::RuleGlyphClassAssign;
}


std::any FeatParser::GlyphClassAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGlyphClassAssign(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GlyphClassAssignContext* FeatParser::glyphClassAssign() {
  GlyphClassAssignContext *_localctx = _tracker.createInstance<GlyphClassAssignContext>(_ctx, getState());
  enterRule(_localctx, 6, FeatParser::RuleGlyphClassAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(277);
    gclass();
    setState(278);
    match(FeatParser::EQUALS);
    setState(279);
    glyphClass();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LangsysAssignContext ------------------------------------------------------------------

FeatParser::LangsysAssignContext::LangsysAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LangsysAssignContext::LANGSYS() {
  return getToken(FeatParser::LANGSYS, 0);
}

std::vector<FeatParser::TagContext *> FeatParser::LangsysAssignContext::tag() {
  return getRuleContexts<FeatParser::TagContext>();
}

FeatParser::TagContext* FeatParser::LangsysAssignContext::tag(size_t i) {
  return getRuleContext<FeatParser::TagContext>(i);
}


size_t FeatParser::LangsysAssignContext::getRuleIndex() const {
  return FeatParser::RuleLangsysAssign;
}


std::any FeatParser::LangsysAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLangsysAssign(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LangsysAssignContext* FeatParser::langsysAssign() {
  LangsysAssignContext *_localctx = _tracker.createInstance<LangsysAssignContext>(_ctx, getState());
  enterRule(_localctx, 8, FeatParser::RuleLangsysAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(281);
    match(FeatParser::LANGSYS);
    setState(282);
    antlrcpp::downCast<LangsysAssignContext *>(_localctx)->script = tag();
    setState(283);
    antlrcpp::downCast<LangsysAssignContext *>(_localctx)->lang = tag();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mark_statementContext ------------------------------------------------------------------

FeatParser::Mark_statementContext::Mark_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::Mark_statementContext::MARK_CLASS() {
  return getToken(FeatParser::MARK_CLASS, 0);
}

FeatParser::AnchorContext* FeatParser::Mark_statementContext::anchor() {
  return getRuleContext<FeatParser::AnchorContext>(0);
}

FeatParser::GclassContext* FeatParser::Mark_statementContext::gclass() {
  return getRuleContext<FeatParser::GclassContext>(0);
}

FeatParser::GlyphContext* FeatParser::Mark_statementContext::glyph() {
  return getRuleContext<FeatParser::GlyphContext>(0);
}

FeatParser::GlyphClassContext* FeatParser::Mark_statementContext::glyphClass() {
  return getRuleContext<FeatParser::GlyphClassContext>(0);
}


size_t FeatParser::Mark_statementContext::getRuleIndex() const {
  return FeatParser::RuleMark_statement;
}


std::any FeatParser::Mark_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitMark_statement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Mark_statementContext* FeatParser::mark_statement() {
  Mark_statementContext *_localctx = _tracker.createInstance<Mark_statementContext>(_ctx, getState());
  enterRule(_localctx, 10, FeatParser::RuleMark_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(285);
    match(FeatParser::MARK_CLASS);
    setState(288);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NOTDEF:
      case FeatParser::AXISUNIT:
      case FeatParser::CID:
      case FeatParser::ESCGNAME:
      case FeatParser::NAMELABEL:
      case FeatParser::EXTNAME: {
        setState(286);
        glyph();
        break;
      }

      case FeatParser::LBRACKET:
      case FeatParser::LNAME:
      case FeatParser::GCLASS: {
        setState(287);
        glyphClass();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(290);
    anchor();
    setState(291);
    gclass();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnchorDefContext ------------------------------------------------------------------

FeatParser::AnchorDefContext::AnchorDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AnchorDefContext::ANCHOR_DEF() {
  return getToken(FeatParser::ANCHOR_DEF, 0);
}

FeatParser::AnchorLiteralContext* FeatParser::AnchorDefContext::anchorLiteral() {
  return getRuleContext<FeatParser::AnchorLiteralContext>(0);
}

FeatParser::LabelContext* FeatParser::AnchorDefContext::label() {
  return getRuleContext<FeatParser::LabelContext>(0);
}


size_t FeatParser::AnchorDefContext::getRuleIndex() const {
  return FeatParser::RuleAnchorDef;
}


std::any FeatParser::AnchorDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnchorDef(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnchorDefContext* FeatParser::anchorDef() {
  AnchorDefContext *_localctx = _tracker.createInstance<AnchorDefContext>(_ctx, getState());
  enterRule(_localctx, 12, FeatParser::RuleAnchorDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(293);
    match(FeatParser::ANCHOR_DEF);
    setState(294);
    anchorLiteral();
    setState(295);
    antlrcpp::downCast<AnchorDefContext *>(_localctx)->name = label();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueRecordDefContext ------------------------------------------------------------------

FeatParser::ValueRecordDefContext::ValueRecordDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ValueRecordDefContext::VALUE_RECORD_DEF() {
  return getToken(FeatParser::VALUE_RECORD_DEF, 0);
}

FeatParser::ValueLiteralContext* FeatParser::ValueRecordDefContext::valueLiteral() {
  return getRuleContext<FeatParser::ValueLiteralContext>(0);
}

FeatParser::LabelContext* FeatParser::ValueRecordDefContext::label() {
  return getRuleContext<FeatParser::LabelContext>(0);
}


size_t FeatParser::ValueRecordDefContext::getRuleIndex() const {
  return FeatParser::RuleValueRecordDef;
}


std::any FeatParser::ValueRecordDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitValueRecordDef(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ValueRecordDefContext* FeatParser::valueRecordDef() {
  ValueRecordDefContext *_localctx = _tracker.createInstance<ValueRecordDefContext>(_ctx, getState());
  enterRule(_localctx, 14, FeatParser::RuleValueRecordDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(297);
    match(FeatParser::VALUE_RECORD_DEF);
    setState(298);
    valueLiteral();
    setState(299);
    label();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationDefContext ------------------------------------------------------------------

FeatParser::LocationDefContext::LocationDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LocationDefContext::LOCATION_DEF() {
  return getToken(FeatParser::LOCATION_DEF, 0);
}

FeatParser::LocationLiteralContext* FeatParser::LocationDefContext::locationLiteral() {
  return getRuleContext<FeatParser::LocationLiteralContext>(0);
}

tree::TerminalNode* FeatParser::LocationDefContext::LNAME() {
  return getToken(FeatParser::LNAME, 0);
}


size_t FeatParser::LocationDefContext::getRuleIndex() const {
  return FeatParser::RuleLocationDef;
}


std::any FeatParser::LocationDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLocationDef(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LocationDefContext* FeatParser::locationDef() {
  LocationDefContext *_localctx = _tracker.createInstance<LocationDefContext>(_ctx, getState());
  enterRule(_localctx, 16, FeatParser::RuleLocationDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(301);
    match(FeatParser::LOCATION_DEF);
    setState(302);
    locationLiteral();
    setState(303);
    match(FeatParser::LNAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultAxisUnitContext ------------------------------------------------------------------

FeatParser::DefaultAxisUnitContext::DefaultAxisUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::DefaultAxisUnitContext::DEF_AXIS_UNIT() {
  return getToken(FeatParser::DEF_AXIS_UNIT, 0);
}

tree::TerminalNode* FeatParser::DefaultAxisUnitContext::AXISUNIT() {
  return getToken(FeatParser::AXISUNIT, 0);
}


size_t FeatParser::DefaultAxisUnitContext::getRuleIndex() const {
  return FeatParser::RuleDefaultAxisUnit;
}


std::any FeatParser::DefaultAxisUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitDefaultAxisUnit(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::DefaultAxisUnitContext* FeatParser::defaultAxisUnit() {
  DefaultAxisUnitContext *_localctx = _tracker.createInstance<DefaultAxisUnitContext>(_ctx, getState());
  enterRule(_localctx, 18, FeatParser::RuleDefaultAxisUnit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(305);
    match(FeatParser::DEF_AXIS_UNIT);
    setState(306);
    match(FeatParser::AXISUNIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureBlockContext ------------------------------------------------------------------

FeatParser::FeatureBlockContext::FeatureBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FeatureBlockContext::FEATURE() {
  return getToken(FeatParser::FEATURE, 0);
}

tree::TerminalNode* FeatParser::FeatureBlockContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::FeatureBlockContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::FeatureBlockContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::TagContext *> FeatParser::FeatureBlockContext::tag() {
  return getRuleContexts<FeatParser::TagContext>();
}

FeatParser::TagContext* FeatParser::FeatureBlockContext::tag(size_t i) {
  return getRuleContext<FeatParser::TagContext>(i);
}

tree::TerminalNode* FeatParser::FeatureBlockContext::USE_EXTENSION() {
  return getToken(FeatParser::USE_EXTENSION, 0);
}

std::vector<FeatParser::FeatureStatementContext *> FeatParser::FeatureBlockContext::featureStatement() {
  return getRuleContexts<FeatParser::FeatureStatementContext>();
}

FeatParser::FeatureStatementContext* FeatParser::FeatureBlockContext::featureStatement(size_t i) {
  return getRuleContext<FeatParser::FeatureStatementContext>(i);
}


size_t FeatParser::FeatureBlockContext::getRuleIndex() const {
  return FeatParser::RuleFeatureBlock;
}


std::any FeatParser::FeatureBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFeatureBlock(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FeatureBlockContext* FeatParser::featureBlock() {
  FeatureBlockContext *_localctx = _tracker.createInstance<FeatureBlockContext>(_ctx, getState());
  enterRule(_localctx, 20, FeatParser::RuleFeatureBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(308);
    match(FeatParser::FEATURE);
    setState(309);
    antlrcpp::downCast<FeatureBlockContext *>(_localctx)->starttag = tag();
    setState(311);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::USE_EXTENSION) {
      setState(310);
      match(FeatParser::USE_EXTENSION);
    }
    setState(313);
    match(FeatParser::LCBRACE);
    setState(315); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(314);
      featureStatement();
      setState(317); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 72629133657520992) != 0) || _la == FeatParser::LNAME

    || _la == FeatParser::GCLASS);
    setState(319);
    match(FeatParser::RCBRACE);
    setState(320);
    antlrcpp::downCast<FeatureBlockContext *>(_localctx)->endtag = tag();
    setState(321);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableBlockContext ------------------------------------------------------------------

FeatParser::TableBlockContext::TableBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::TableBlockContext::TABLE() {
  return getToken(FeatParser::TABLE, 0);
}

FeatParser::Table_BASEContext* FeatParser::TableBlockContext::table_BASE() {
  return getRuleContext<FeatParser::Table_BASEContext>(0);
}

FeatParser::Table_GDEFContext* FeatParser::TableBlockContext::table_GDEF() {
  return getRuleContext<FeatParser::Table_GDEFContext>(0);
}

FeatParser::Table_headContext* FeatParser::TableBlockContext::table_head() {
  return getRuleContext<FeatParser::Table_headContext>(0);
}

FeatParser::Table_hheaContext* FeatParser::TableBlockContext::table_hhea() {
  return getRuleContext<FeatParser::Table_hheaContext>(0);
}

FeatParser::Table_vheaContext* FeatParser::TableBlockContext::table_vhea() {
  return getRuleContext<FeatParser::Table_vheaContext>(0);
}

FeatParser::Table_nameContext* FeatParser::TableBlockContext::table_name() {
  return getRuleContext<FeatParser::Table_nameContext>(0);
}

FeatParser::Table_OS_2Context* FeatParser::TableBlockContext::table_OS_2() {
  return getRuleContext<FeatParser::Table_OS_2Context>(0);
}

FeatParser::Table_STATContext* FeatParser::TableBlockContext::table_STAT() {
  return getRuleContext<FeatParser::Table_STATContext>(0);
}

FeatParser::Table_vmtxContext* FeatParser::TableBlockContext::table_vmtx() {
  return getRuleContext<FeatParser::Table_vmtxContext>(0);
}


size_t FeatParser::TableBlockContext::getRuleIndex() const {
  return FeatParser::RuleTableBlock;
}


std::any FeatParser::TableBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTableBlock(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::TableBlockContext* FeatParser::tableBlock() {
  TableBlockContext *_localctx = _tracker.createInstance<TableBlockContext>(_ctx, getState());
  enterRule(_localctx, 22, FeatParser::RuleTableBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(323);
    match(FeatParser::TABLE);
    setState(333);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::BASE: {
        setState(324);
        table_BASE();
        break;
      }

      case FeatParser::GDEF: {
        setState(325);
        table_GDEF();
        break;
      }

      case FeatParser::HEAD: {
        setState(326);
        table_head();
        break;
      }

      case FeatParser::HHEA: {
        setState(327);
        table_hhea();
        break;
      }

      case FeatParser::VHEA: {
        setState(328);
        table_vhea();
        break;
      }

      case FeatParser::NAME: {
        setState(329);
        table_name();
        break;
      }

      case FeatParser::OS_2: {
        setState(330);
        table_OS_2();
        break;
      }

      case FeatParser::STAT: {
        setState(331);
        table_STAT();
        break;
      }

      case FeatParser::VMTX: {
        setState(332);
        table_vmtx();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnonBlockContext ------------------------------------------------------------------

FeatParser::AnonBlockContext::AnonBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::AnontokContext* FeatParser::AnonBlockContext::anontok() {
  return getRuleContext<FeatParser::AnontokContext>(0);
}

tree::TerminalNode* FeatParser::AnonBlockContext::A_LABEL() {
  return getToken(FeatParser::A_LABEL, 0);
}

tree::TerminalNode* FeatParser::AnonBlockContext::A_LBRACE() {
  return getToken(FeatParser::A_LBRACE, 0);
}

tree::TerminalNode* FeatParser::AnonBlockContext::A_CLOSE() {
  return getToken(FeatParser::A_CLOSE, 0);
}

std::vector<tree::TerminalNode *> FeatParser::AnonBlockContext::A_LINE() {
  return getTokens(FeatParser::A_LINE);
}

tree::TerminalNode* FeatParser::AnonBlockContext::A_LINE(size_t i) {
  return getToken(FeatParser::A_LINE, i);
}


size_t FeatParser::AnonBlockContext::getRuleIndex() const {
  return FeatParser::RuleAnonBlock;
}


std::any FeatParser::AnonBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnonBlock(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnonBlockContext* FeatParser::anonBlock() {
  AnonBlockContext *_localctx = _tracker.createInstance<AnonBlockContext>(_ctx, getState());
  enterRule(_localctx, 24, FeatParser::RuleAnonBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(335);
    anontok();
    setState(336);
    match(FeatParser::A_LABEL);
    setState(337);
    match(FeatParser::A_LBRACE);
    setState(341);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::A_LINE) {
      setState(338);
      match(FeatParser::A_LINE);
      setState(343);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(344);
    match(FeatParser::A_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupBlockTopLevelContext ------------------------------------------------------------------

FeatParser::LookupBlockTopLevelContext::LookupBlockTopLevelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LookupBlockTopLevelContext::LOOKUP() {
  return getToken(FeatParser::LOOKUP, 0);
}

tree::TerminalNode* FeatParser::LookupBlockTopLevelContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::LookupBlockTopLevelContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::LookupBlockTopLevelContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::LabelContext *> FeatParser::LookupBlockTopLevelContext::label() {
  return getRuleContexts<FeatParser::LabelContext>();
}

FeatParser::LabelContext* FeatParser::LookupBlockTopLevelContext::label(size_t i) {
  return getRuleContext<FeatParser::LabelContext>(i);
}

tree::TerminalNode* FeatParser::LookupBlockTopLevelContext::USE_EXTENSION() {
  return getToken(FeatParser::USE_EXTENSION, 0);
}

std::vector<FeatParser::StatementContext *> FeatParser::LookupBlockTopLevelContext::statement() {
  return getRuleContexts<FeatParser::StatementContext>();
}

FeatParser::StatementContext* FeatParser::LookupBlockTopLevelContext::statement(size_t i) {
  return getRuleContext<FeatParser::StatementContext>(i);
}


size_t FeatParser::LookupBlockTopLevelContext::getRuleIndex() const {
  return FeatParser::RuleLookupBlockTopLevel;
}


std::any FeatParser::LookupBlockTopLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupBlockTopLevel(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupBlockTopLevelContext* FeatParser::lookupBlockTopLevel() {
  LookupBlockTopLevelContext *_localctx = _tracker.createInstance<LookupBlockTopLevelContext>(_ctx, getState());
  enterRule(_localctx, 26, FeatParser::RuleLookupBlockTopLevel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(346);
    match(FeatParser::LOOKUP);
    setState(347);
    antlrcpp::downCast<LookupBlockTopLevelContext *>(_localctx)->startlabel = label();
    setState(349);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::USE_EXTENSION) {
      setState(348);
      match(FeatParser::USE_EXTENSION);
    }
    setState(351);
    match(FeatParser::LCBRACE);
    setState(353); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(352);
      statement();
      setState(355); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 72624735611005792) != 0) || _la == FeatParser::LNAME

    || _la == FeatParser::GCLASS);
    setState(357);
    match(FeatParser::RCBRACE);
    setState(358);
    antlrcpp::downCast<LookupBlockTopLevelContext *>(_localctx)->endlabel = label();
    setState(359);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureStatementContext ------------------------------------------------------------------

FeatParser::FeatureStatementContext::FeatureStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::StatementContext* FeatParser::FeatureStatementContext::statement() {
  return getRuleContext<FeatParser::StatementContext>(0);
}

FeatParser::LookupBlockOrUseContext* FeatParser::FeatureStatementContext::lookupBlockOrUse() {
  return getRuleContext<FeatParser::LookupBlockOrUseContext>(0);
}

FeatParser::CvParameterBlockContext* FeatParser::FeatureStatementContext::cvParameterBlock() {
  return getRuleContext<FeatParser::CvParameterBlockContext>(0);
}


size_t FeatParser::FeatureStatementContext::getRuleIndex() const {
  return FeatParser::RuleFeatureStatement;
}


std::any FeatParser::FeatureStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFeatureStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FeatureStatementContext* FeatParser::featureStatement() {
  FeatureStatementContext *_localctx = _tracker.createInstance<FeatureStatementContext>(_ctx, getState());
  enterRule(_localctx, 28, FeatParser::RuleFeatureStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(364);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::INCLUDE:
      case FeatParser::FEATURE:
      case FeatParser::SCRIPT:
      case FeatParser::LANGUAGE:
      case FeatParser::SUBTABLE:
      case FeatParser::LOOKUPFLAG:
      case FeatParser::ENUMERATE:
      case FeatParser::ENUMERATE_v:
      case FeatParser::EXCEPT:
      case FeatParser::IGNORE:
      case FeatParser::SUBSTITUTE:
      case FeatParser::SUBSTITUTE_v:
      case FeatParser::REVERSE:
      case FeatParser::REVERSE_v:
      case FeatParser::POSITION:
      case FeatParser::POSITION_v:
      case FeatParser::PARAMETERS:
      case FeatParser::FEATURE_NAMES:
      case FeatParser::SIZEMENUNAME:
      case FeatParser::MARK_CLASS:
      case FeatParser::LNAME:
      case FeatParser::GCLASS: {
        enterOuterAlt(_localctx, 1);
        setState(361);
        statement();
        break;
      }

      case FeatParser::LOOKUP: {
        enterOuterAlt(_localctx, 2);
        setState(362);
        lookupBlockOrUse();
        break;
      }

      case FeatParser::CV_PARAMETERS: {
        enterOuterAlt(_localctx, 3);
        setState(363);
        cvParameterBlock();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupBlockOrUseContext ------------------------------------------------------------------

FeatParser::LookupBlockOrUseContext::LookupBlockOrUseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LookupBlockOrUseContext::LOOKUP() {
  return getToken(FeatParser::LOOKUP, 0);
}

tree::TerminalNode* FeatParser::LookupBlockOrUseContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::LabelContext *> FeatParser::LookupBlockOrUseContext::label() {
  return getRuleContexts<FeatParser::LabelContext>();
}

FeatParser::LabelContext* FeatParser::LookupBlockOrUseContext::label(size_t i) {
  return getRuleContext<FeatParser::LabelContext>(i);
}

tree::TerminalNode* FeatParser::LookupBlockOrUseContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::LookupBlockOrUseContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::LookupBlockOrUseContext::USE_EXTENSION() {
  return getToken(FeatParser::USE_EXTENSION, 0);
}

std::vector<FeatParser::StatementContext *> FeatParser::LookupBlockOrUseContext::statement() {
  return getRuleContexts<FeatParser::StatementContext>();
}

FeatParser::StatementContext* FeatParser::LookupBlockOrUseContext::statement(size_t i) {
  return getRuleContext<FeatParser::StatementContext>(i);
}


size_t FeatParser::LookupBlockOrUseContext::getRuleIndex() const {
  return FeatParser::RuleLookupBlockOrUse;
}


std::any FeatParser::LookupBlockOrUseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupBlockOrUse(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupBlockOrUseContext* FeatParser::lookupBlockOrUse() {
  LookupBlockOrUseContext *_localctx = _tracker.createInstance<LookupBlockOrUseContext>(_ctx, getState());
  enterRule(_localctx, 30, FeatParser::RuleLookupBlockOrUse);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(366);
    match(FeatParser::LOOKUP);
    setState(367);
    antlrcpp::downCast<LookupBlockOrUseContext *>(_localctx)->startlabel = label();
    setState(380);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::USE_EXTENSION || _la == FeatParser::LCBRACE) {
      setState(369);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FeatParser::USE_EXTENSION) {
        setState(368);
        match(FeatParser::USE_EXTENSION);
      }
      setState(371);
      match(FeatParser::LCBRACE);
      setState(373); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(372);
        statement();
        setState(375); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 72624735611005792) != 0) || _la == FeatParser::LNAME

      || _la == FeatParser::GCLASS);
      setState(377);
      match(FeatParser::RCBRACE);
      setState(378);
      antlrcpp::downCast<LookupBlockOrUseContext *>(_localctx)->endlabel = label();
    }
    setState(382);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvParameterBlockContext ------------------------------------------------------------------

FeatParser::CvParameterBlockContext::CvParameterBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::CvParameterBlockContext::CV_PARAMETERS() {
  return getToken(FeatParser::CV_PARAMETERS, 0);
}

tree::TerminalNode* FeatParser::CvParameterBlockContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::CvParameterBlockContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::CvParameterBlockContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::CvParameterStatementContext *> FeatParser::CvParameterBlockContext::cvParameterStatement() {
  return getRuleContexts<FeatParser::CvParameterStatementContext>();
}

FeatParser::CvParameterStatementContext* FeatParser::CvParameterBlockContext::cvParameterStatement(size_t i) {
  return getRuleContext<FeatParser::CvParameterStatementContext>(i);
}


size_t FeatParser::CvParameterBlockContext::getRuleIndex() const {
  return FeatParser::RuleCvParameterBlock;
}


std::any FeatParser::CvParameterBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitCvParameterBlock(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::CvParameterBlockContext* FeatParser::cvParameterBlock() {
  CvParameterBlockContext *_localctx = _tracker.createInstance<CvParameterBlockContext>(_ctx, getState());
  enterRule(_localctx, 32, FeatParser::RuleCvParameterBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(384);
    match(FeatParser::CV_PARAMETERS);
    setState(385);
    match(FeatParser::LCBRACE);
    setState(389);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 413416372043808) != 0)) {
      setState(386);
      cvParameterStatement();
      setState(391);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(392);
    match(FeatParser::RCBRACE);
    setState(393);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvParameterStatementContext ------------------------------------------------------------------

FeatParser::CvParameterStatementContext::CvParameterStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::CvParameterStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::CvParameterContext* FeatParser::CvParameterStatementContext::cvParameter() {
  return getRuleContext<FeatParser::CvParameterContext>(0);
}

FeatParser::IncludeContext* FeatParser::CvParameterStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::CvParameterStatementContext::getRuleIndex() const {
  return FeatParser::RuleCvParameterStatement;
}


std::any FeatParser::CvParameterStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitCvParameterStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::CvParameterStatementContext* FeatParser::cvParameterStatement() {
  CvParameterStatementContext *_localctx = _tracker.createInstance<CvParameterStatementContext>(_ctx, getState());
  enterRule(_localctx, 34, FeatParser::RuleCvParameterStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(397);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::CV_UI_LABEL:
      case FeatParser::CV_TOOLTIP:
      case FeatParser::CV_SAMPLE_TEXT:
      case FeatParser::CV_PARAM_LABEL:
      case FeatParser::CV_CHARACTER: {
        setState(395);
        cvParameter();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(396);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(399);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvParameterContext ------------------------------------------------------------------

FeatParser::CvParameterContext::CvParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::CvParameterContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::CvParameterContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::CvParameterContext::CV_UI_LABEL() {
  return getToken(FeatParser::CV_UI_LABEL, 0);
}

tree::TerminalNode* FeatParser::CvParameterContext::CV_TOOLTIP() {
  return getToken(FeatParser::CV_TOOLTIP, 0);
}

tree::TerminalNode* FeatParser::CvParameterContext::CV_SAMPLE_TEXT() {
  return getToken(FeatParser::CV_SAMPLE_TEXT, 0);
}

tree::TerminalNode* FeatParser::CvParameterContext::CV_PARAM_LABEL() {
  return getToken(FeatParser::CV_PARAM_LABEL, 0);
}

std::vector<FeatParser::NameEntryStatementContext *> FeatParser::CvParameterContext::nameEntryStatement() {
  return getRuleContexts<FeatParser::NameEntryStatementContext>();
}

FeatParser::NameEntryStatementContext* FeatParser::CvParameterContext::nameEntryStatement(size_t i) {
  return getRuleContext<FeatParser::NameEntryStatementContext>(i);
}

tree::TerminalNode* FeatParser::CvParameterContext::CV_CHARACTER() {
  return getToken(FeatParser::CV_CHARACTER, 0);
}

FeatParser::GenNumContext* FeatParser::CvParameterContext::genNum() {
  return getRuleContext<FeatParser::GenNumContext>(0);
}


size_t FeatParser::CvParameterContext::getRuleIndex() const {
  return FeatParser::RuleCvParameter;
}


std::any FeatParser::CvParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitCvParameter(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::CvParameterContext* FeatParser::cvParameter() {
  CvParameterContext *_localctx = _tracker.createInstance<CvParameterContext>(_ctx, getState());
  enterRule(_localctx, 36, FeatParser::RuleCvParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(412);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::CV_UI_LABEL:
      case FeatParser::CV_TOOLTIP:
      case FeatParser::CV_SAMPLE_TEXT:
      case FeatParser::CV_PARAM_LABEL: {
        enterOuterAlt(_localctx, 1);
        setState(401);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 131941395333120) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(402);
        match(FeatParser::LCBRACE);
        setState(404); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(403);
          nameEntryStatement();
          setState(406); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::INCLUDE || _la == FeatParser::NAME);
        setState(408);
        match(FeatParser::RCBRACE);
        break;
      }

      case FeatParser::CV_CHARACTER: {
        enterOuterAlt(_localctx, 2);
        setState(410);
        match(FeatParser::CV_CHARACTER);
        setState(411);
        genNum();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

FeatParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::StatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::FeatureUseContext* FeatParser::StatementContext::featureUse() {
  return getRuleContext<FeatParser::FeatureUseContext>(0);
}

FeatParser::ScriptAssignContext* FeatParser::StatementContext::scriptAssign() {
  return getRuleContext<FeatParser::ScriptAssignContext>(0);
}

FeatParser::LangAssignContext* FeatParser::StatementContext::langAssign() {
  return getRuleContext<FeatParser::LangAssignContext>(0);
}

FeatParser::LookupflagAssignContext* FeatParser::StatementContext::lookupflagAssign() {
  return getRuleContext<FeatParser::LookupflagAssignContext>(0);
}

FeatParser::GlyphClassAssignContext* FeatParser::StatementContext::glyphClassAssign() {
  return getRuleContext<FeatParser::GlyphClassAssignContext>(0);
}

FeatParser::IgnoreSubOrPosContext* FeatParser::StatementContext::ignoreSubOrPos() {
  return getRuleContext<FeatParser::IgnoreSubOrPosContext>(0);
}

FeatParser::SubstituteContext* FeatParser::StatementContext::substitute() {
  return getRuleContext<FeatParser::SubstituteContext>(0);
}

FeatParser::Mark_statementContext* FeatParser::StatementContext::mark_statement() {
  return getRuleContext<FeatParser::Mark_statementContext>(0);
}

FeatParser::PositionContext* FeatParser::StatementContext::position() {
  return getRuleContext<FeatParser::PositionContext>(0);
}

FeatParser::ParametersContext* FeatParser::StatementContext::parameters() {
  return getRuleContext<FeatParser::ParametersContext>(0);
}

FeatParser::SizemenunameContext* FeatParser::StatementContext::sizemenuname() {
  return getRuleContext<FeatParser::SizemenunameContext>(0);
}

FeatParser::FeatureNamesContext* FeatParser::StatementContext::featureNames() {
  return getRuleContext<FeatParser::FeatureNamesContext>(0);
}

FeatParser::SubtableContext* FeatParser::StatementContext::subtable() {
  return getRuleContext<FeatParser::SubtableContext>(0);
}

FeatParser::IncludeContext* FeatParser::StatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::StatementContext::getRuleIndex() const {
  return FeatParser::RuleStatement;
}


std::any FeatParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::StatementContext* FeatParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 38, FeatParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(428);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::FEATURE: {
        setState(414);
        featureUse();
        break;
      }

      case FeatParser::SCRIPT: {
        setState(415);
        scriptAssign();
        break;
      }

      case FeatParser::LANGUAGE: {
        setState(416);
        langAssign();
        break;
      }

      case FeatParser::LOOKUPFLAG: {
        setState(417);
        lookupflagAssign();
        break;
      }

      case FeatParser::LNAME:
      case FeatParser::GCLASS: {
        setState(418);
        glyphClassAssign();
        break;
      }

      case FeatParser::IGNORE: {
        setState(419);
        ignoreSubOrPos();
        break;
      }

      case FeatParser::EXCEPT:
      case FeatParser::SUBSTITUTE:
      case FeatParser::SUBSTITUTE_v:
      case FeatParser::REVERSE:
      case FeatParser::REVERSE_v: {
        setState(420);
        substitute();
        break;
      }

      case FeatParser::MARK_CLASS: {
        setState(421);
        mark_statement();
        break;
      }

      case FeatParser::ENUMERATE:
      case FeatParser::ENUMERATE_v:
      case FeatParser::POSITION:
      case FeatParser::POSITION_v: {
        setState(422);
        position();
        break;
      }

      case FeatParser::PARAMETERS: {
        setState(423);
        parameters();
        break;
      }

      case FeatParser::SIZEMENUNAME: {
        setState(424);
        sizemenuname();
        break;
      }

      case FeatParser::FEATURE_NAMES: {
        setState(425);
        featureNames();
        break;
      }

      case FeatParser::SUBTABLE: {
        setState(426);
        subtable();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(427);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(430);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureUseContext ------------------------------------------------------------------

FeatParser::FeatureUseContext::FeatureUseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FeatureUseContext::FEATURE() {
  return getToken(FeatParser::FEATURE, 0);
}

FeatParser::TagContext* FeatParser::FeatureUseContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}


size_t FeatParser::FeatureUseContext::getRuleIndex() const {
  return FeatParser::RuleFeatureUse;
}


std::any FeatParser::FeatureUseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFeatureUse(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FeatureUseContext* FeatParser::featureUse() {
  FeatureUseContext *_localctx = _tracker.createInstance<FeatureUseContext>(_ctx, getState());
  enterRule(_localctx, 40, FeatParser::RuleFeatureUse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(432);
    match(FeatParser::FEATURE);
    setState(433);
    tag();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScriptAssignContext ------------------------------------------------------------------

FeatParser::ScriptAssignContext::ScriptAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ScriptAssignContext::SCRIPT() {
  return getToken(FeatParser::SCRIPT, 0);
}

FeatParser::TagContext* FeatParser::ScriptAssignContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}


size_t FeatParser::ScriptAssignContext::getRuleIndex() const {
  return FeatParser::RuleScriptAssign;
}


std::any FeatParser::ScriptAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitScriptAssign(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ScriptAssignContext* FeatParser::scriptAssign() {
  ScriptAssignContext *_localctx = _tracker.createInstance<ScriptAssignContext>(_ctx, getState());
  enterRule(_localctx, 42, FeatParser::RuleScriptAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(435);
    match(FeatParser::SCRIPT);
    setState(436);
    tag();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LangAssignContext ------------------------------------------------------------------

FeatParser::LangAssignContext::LangAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LangAssignContext::LANGUAGE() {
  return getToken(FeatParser::LANGUAGE, 0);
}

FeatParser::TagContext* FeatParser::LangAssignContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}

tree::TerminalNode* FeatParser::LangAssignContext::EXCLUDE_DFLT() {
  return getToken(FeatParser::EXCLUDE_DFLT, 0);
}

tree::TerminalNode* FeatParser::LangAssignContext::INCLUDE_DFLT() {
  return getToken(FeatParser::INCLUDE_DFLT, 0);
}

tree::TerminalNode* FeatParser::LangAssignContext::EXCLUDE_dflt() {
  return getToken(FeatParser::EXCLUDE_dflt, 0);
}

tree::TerminalNode* FeatParser::LangAssignContext::INCLUDE_dflt() {
  return getToken(FeatParser::INCLUDE_dflt, 0);
}


size_t FeatParser::LangAssignContext::getRuleIndex() const {
  return FeatParser::RuleLangAssign;
}


std::any FeatParser::LangAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLangAssign(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LangAssignContext* FeatParser::langAssign() {
  LangAssignContext *_localctx = _tracker.createInstance<LangAssignContext>(_ctx, getState());
  enterRule(_localctx, 44, FeatParser::RuleLangAssign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(438);
    match(FeatParser::LANGUAGE);
    setState(439);
    tag();
    setState(441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 31457280) != 0)) {
      setState(440);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 31457280) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupflagAssignContext ------------------------------------------------------------------

FeatParser::LookupflagAssignContext::LookupflagAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LookupflagAssignContext::LOOKUPFLAG() {
  return getToken(FeatParser::LOOKUPFLAG, 0);
}

tree::TerminalNode* FeatParser::LookupflagAssignContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

std::vector<FeatParser::LookupflagElementContext *> FeatParser::LookupflagAssignContext::lookupflagElement() {
  return getRuleContexts<FeatParser::LookupflagElementContext>();
}

FeatParser::LookupflagElementContext* FeatParser::LookupflagAssignContext::lookupflagElement(size_t i) {
  return getRuleContext<FeatParser::LookupflagElementContext>(i);
}


size_t FeatParser::LookupflagAssignContext::getRuleIndex() const {
  return FeatParser::RuleLookupflagAssign;
}


std::any FeatParser::LookupflagAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupflagAssign(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupflagAssignContext* FeatParser::lookupflagAssign() {
  LookupflagAssignContext *_localctx = _tracker.createInstance<LookupflagAssignContext>(_ctx, getState());
  enterRule(_localctx, 46, FeatParser::RuleLookupflagAssign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(443);
    match(FeatParser::LOOKUPFLAG);
    setState(450);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NUM: {
        setState(444);
        match(FeatParser::NUM);
        break;
      }

      case FeatParser::RIGHT_TO_LEFT:
      case FeatParser::IGNORE_BASE_GLYPHS:
      case FeatParser::IGNORE_LIGATURES:
      case FeatParser::IGNORE_MARKS:
      case FeatParser::USE_MARK_FILTERING_SET:
      case FeatParser::MARK_ATTACHMENT_TYPE: {
        setState(446); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(445);
          lookupflagElement();
          setState(448); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2064384) != 0));
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupflagElementContext ------------------------------------------------------------------

FeatParser::LookupflagElementContext::LookupflagElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LookupflagElementContext::RIGHT_TO_LEFT() {
  return getToken(FeatParser::RIGHT_TO_LEFT, 0);
}

tree::TerminalNode* FeatParser::LookupflagElementContext::IGNORE_BASE_GLYPHS() {
  return getToken(FeatParser::IGNORE_BASE_GLYPHS, 0);
}

tree::TerminalNode* FeatParser::LookupflagElementContext::IGNORE_LIGATURES() {
  return getToken(FeatParser::IGNORE_LIGATURES, 0);
}

tree::TerminalNode* FeatParser::LookupflagElementContext::IGNORE_MARKS() {
  return getToken(FeatParser::IGNORE_MARKS, 0);
}

tree::TerminalNode* FeatParser::LookupflagElementContext::MARK_ATTACHMENT_TYPE() {
  return getToken(FeatParser::MARK_ATTACHMENT_TYPE, 0);
}

FeatParser::GlyphClassContext* FeatParser::LookupflagElementContext::glyphClass() {
  return getRuleContext<FeatParser::GlyphClassContext>(0);
}

tree::TerminalNode* FeatParser::LookupflagElementContext::USE_MARK_FILTERING_SET() {
  return getToken(FeatParser::USE_MARK_FILTERING_SET, 0);
}


size_t FeatParser::LookupflagElementContext::getRuleIndex() const {
  return FeatParser::RuleLookupflagElement;
}


std::any FeatParser::LookupflagElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupflagElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupflagElementContext* FeatParser::lookupflagElement() {
  LookupflagElementContext *_localctx = _tracker.createInstance<LookupflagElementContext>(_ctx, getState());
  enterRule(_localctx, 48, FeatParser::RuleLookupflagElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(460);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::RIGHT_TO_LEFT: {
        enterOuterAlt(_localctx, 1);
        setState(452);
        match(FeatParser::RIGHT_TO_LEFT);
        break;
      }

      case FeatParser::IGNORE_BASE_GLYPHS: {
        enterOuterAlt(_localctx, 2);
        setState(453);
        match(FeatParser::IGNORE_BASE_GLYPHS);
        break;
      }

      case FeatParser::IGNORE_LIGATURES: {
        enterOuterAlt(_localctx, 3);
        setState(454);
        match(FeatParser::IGNORE_LIGATURES);
        break;
      }

      case FeatParser::IGNORE_MARKS: {
        enterOuterAlt(_localctx, 4);
        setState(455);
        match(FeatParser::IGNORE_MARKS);
        break;
      }

      case FeatParser::MARK_ATTACHMENT_TYPE: {
        enterOuterAlt(_localctx, 5);
        setState(456);
        match(FeatParser::MARK_ATTACHMENT_TYPE);
        setState(457);
        glyphClass();
        break;
      }

      case FeatParser::USE_MARK_FILTERING_SET: {
        enterOuterAlt(_localctx, 6);
        setState(458);
        match(FeatParser::USE_MARK_FILTERING_SET);
        setState(459);
        glyphClass();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IgnoreSubOrPosContext ------------------------------------------------------------------

FeatParser::IgnoreSubOrPosContext::IgnoreSubOrPosContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::IgnoreSubOrPosContext::IGNORE() {
  return getToken(FeatParser::IGNORE, 0);
}

std::vector<FeatParser::LookupPatternContext *> FeatParser::IgnoreSubOrPosContext::lookupPattern() {
  return getRuleContexts<FeatParser::LookupPatternContext>();
}

FeatParser::LookupPatternContext* FeatParser::IgnoreSubOrPosContext::lookupPattern(size_t i) {
  return getRuleContext<FeatParser::LookupPatternContext>(i);
}

FeatParser::SubtokContext* FeatParser::IgnoreSubOrPosContext::subtok() {
  return getRuleContext<FeatParser::SubtokContext>(0);
}

FeatParser::RevtokContext* FeatParser::IgnoreSubOrPosContext::revtok() {
  return getRuleContext<FeatParser::RevtokContext>(0);
}

FeatParser::PostokContext* FeatParser::IgnoreSubOrPosContext::postok() {
  return getRuleContext<FeatParser::PostokContext>(0);
}

std::vector<tree::TerminalNode *> FeatParser::IgnoreSubOrPosContext::COMMA() {
  return getTokens(FeatParser::COMMA);
}

tree::TerminalNode* FeatParser::IgnoreSubOrPosContext::COMMA(size_t i) {
  return getToken(FeatParser::COMMA, i);
}


size_t FeatParser::IgnoreSubOrPosContext::getRuleIndex() const {
  return FeatParser::RuleIgnoreSubOrPos;
}


std::any FeatParser::IgnoreSubOrPosContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitIgnoreSubOrPos(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::IgnoreSubOrPosContext* FeatParser::ignoreSubOrPos() {
  IgnoreSubOrPosContext *_localctx = _tracker.createInstance<IgnoreSubOrPosContext>(_ctx, getState());
  enterRule(_localctx, 50, FeatParser::RuleIgnoreSubOrPos);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(462);
    match(FeatParser::IGNORE);
    setState(466);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::SUBSTITUTE:
      case FeatParser::SUBSTITUTE_v: {
        setState(463);
        subtok();
        break;
      }

      case FeatParser::REVERSE:
      case FeatParser::REVERSE_v: {
        setState(464);
        revtok();
        break;
      }

      case FeatParser::POSITION:
      case FeatParser::POSITION_v: {
        setState(465);
        postok();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(468);
    lookupPattern();
    setState(473);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::COMMA) {
      setState(469);
      match(FeatParser::COMMA);
      setState(470);
      lookupPattern();
      setState(475);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubstituteContext ------------------------------------------------------------------

FeatParser::SubstituteContext::SubstituteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::RevtokContext* FeatParser::SubstituteContext::revtok() {
  return getRuleContext<FeatParser::RevtokContext>(0);
}

FeatParser::SubtokContext* FeatParser::SubstituteContext::subtok() {
  return getRuleContext<FeatParser::SubtokContext>(0);
}

tree::TerminalNode* FeatParser::SubstituteContext::EXCEPT() {
  return getToken(FeatParser::EXCEPT, 0);
}

std::vector<FeatParser::LookupPatternContext *> FeatParser::SubstituteContext::lookupPattern() {
  return getRuleContexts<FeatParser::LookupPatternContext>();
}

FeatParser::LookupPatternContext* FeatParser::SubstituteContext::lookupPattern(size_t i) {
  return getRuleContext<FeatParser::LookupPatternContext>(i);
}

tree::TerminalNode* FeatParser::SubstituteContext::BY() {
  return getToken(FeatParser::BY, 0);
}

std::vector<tree::TerminalNode *> FeatParser::SubstituteContext::COMMA() {
  return getTokens(FeatParser::COMMA);
}

tree::TerminalNode* FeatParser::SubstituteContext::COMMA(size_t i) {
  return getToken(FeatParser::COMMA, i);
}

tree::TerminalNode* FeatParser::SubstituteContext::FROM() {
  return getToken(FeatParser::FROM, 0);
}

tree::TerminalNode* FeatParser::SubstituteContext::KNULL() {
  return getToken(FeatParser::KNULL, 0);
}


size_t FeatParser::SubstituteContext::getRuleIndex() const {
  return FeatParser::RuleSubstitute;
}


std::any FeatParser::SubstituteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitSubstitute(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::SubstituteContext* FeatParser::substitute() {
  SubstituteContext *_localctx = _tracker.createInstance<SubstituteContext>(_ctx, getState());
  enterRule(_localctx, 52, FeatParser::RuleSubstitute);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(485);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::EXCEPT) {
      setState(476);
      match(FeatParser::EXCEPT);
      setState(477);
      lookupPattern();
      setState(482);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FeatParser::COMMA) {
        setState(478);
        match(FeatParser::COMMA);
        setState(479);
        lookupPattern();
        setState(484);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(505);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::REVERSE:
      case FeatParser::REVERSE_v: {
        setState(487);
        revtok();
        setState(488);
        antlrcpp::downCast<SubstituteContext *>(_localctx)->startpat = lookupPattern();
        setState(494);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::BY) {
          setState(489);
          match(FeatParser::BY);
          setState(492);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FeatParser::KNULL: {
              setState(490);
              match(FeatParser::KNULL);
              break;
            }

            case FeatParser::NOTDEF:
            case FeatParser::LBRACKET:
            case FeatParser::LNAME:
            case FeatParser::GCLASS:
            case FeatParser::AXISUNIT:
            case FeatParser::CID:
            case FeatParser::ESCGNAME:
            case FeatParser::NAMELABEL:
            case FeatParser::EXTNAME: {
              setState(491);
              antlrcpp::downCast<SubstituteContext *>(_localctx)->endpat = lookupPattern();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
        }
        break;
      }

      case FeatParser::SUBSTITUTE:
      case FeatParser::SUBSTITUTE_v: {
        setState(496);
        subtok();
        setState(497);
        antlrcpp::downCast<SubstituteContext *>(_localctx)->startpat = lookupPattern();
        setState(503);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::BY

        || _la == FeatParser::FROM) {
          setState(498);
          _la = _input->LA(1);
          if (!(_la == FeatParser::BY

          || _la == FeatParser::FROM)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(501);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FeatParser::KNULL: {
              setState(499);
              match(FeatParser::KNULL);
              break;
            }

            case FeatParser::NOTDEF:
            case FeatParser::LBRACKET:
            case FeatParser::LNAME:
            case FeatParser::GCLASS:
            case FeatParser::AXISUNIT:
            case FeatParser::CID:
            case FeatParser::ESCGNAME:
            case FeatParser::NAMELABEL:
            case FeatParser::EXTNAME: {
              setState(500);
              antlrcpp::downCast<SubstituteContext *>(_localctx)->endpat = lookupPattern();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PositionContext ------------------------------------------------------------------

FeatParser::PositionContext::PositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::PostokContext* FeatParser::PositionContext::postok() {
  return getRuleContext<FeatParser::PostokContext>(0);
}

FeatParser::EnumtokContext* FeatParser::PositionContext::enumtok() {
  return getRuleContext<FeatParser::EnumtokContext>(0);
}

std::vector<FeatParser::PatternContext *> FeatParser::PositionContext::pattern() {
  return getRuleContexts<FeatParser::PatternContext>();
}

FeatParser::PatternContext* FeatParser::PositionContext::pattern(size_t i) {
  return getRuleContext<FeatParser::PatternContext>(i);
}

FeatParser::ValueRecordContext* FeatParser::PositionContext::valueRecord() {
  return getRuleContext<FeatParser::ValueRecordContext>(0);
}

tree::TerminalNode* FeatParser::PositionContext::CURSIVE() {
  return getToken(FeatParser::CURSIVE, 0);
}

FeatParser::CursiveElementContext* FeatParser::PositionContext::cursiveElement() {
  return getRuleContext<FeatParser::CursiveElementContext>(0);
}

tree::TerminalNode* FeatParser::PositionContext::MARKBASE() {
  return getToken(FeatParser::MARKBASE, 0);
}

FeatParser::MarkligtokContext* FeatParser::PositionContext::markligtok() {
  return getRuleContext<FeatParser::MarkligtokContext>(0);
}

tree::TerminalNode* FeatParser::PositionContext::MARK() {
  return getToken(FeatParser::MARK, 0);
}

std::vector<FeatParser::ValuePatternContext *> FeatParser::PositionContext::valuePattern() {
  return getRuleContexts<FeatParser::ValuePatternContext>();
}

FeatParser::ValuePatternContext* FeatParser::PositionContext::valuePattern(size_t i) {
  return getRuleContext<FeatParser::ValuePatternContext>(i);
}

std::vector<tree::TerminalNode *> FeatParser::PositionContext::LOOKUP() {
  return getTokens(FeatParser::LOOKUP);
}

tree::TerminalNode* FeatParser::PositionContext::LOOKUP(size_t i) {
  return getToken(FeatParser::LOOKUP, i);
}

std::vector<FeatParser::LabelContext *> FeatParser::PositionContext::label() {
  return getRuleContexts<FeatParser::LabelContext>();
}

FeatParser::LabelContext* FeatParser::PositionContext::label(size_t i) {
  return getRuleContext<FeatParser::LabelContext>(i);
}

std::vector<FeatParser::LookupPatternElementContext *> FeatParser::PositionContext::lookupPatternElement() {
  return getRuleContexts<FeatParser::LookupPatternElementContext>();
}

FeatParser::LookupPatternElementContext* FeatParser::PositionContext::lookupPatternElement(size_t i) {
  return getRuleContext<FeatParser::LookupPatternElementContext>(i);
}

std::vector<FeatParser::BaseToMarkElementContext *> FeatParser::PositionContext::baseToMarkElement() {
  return getRuleContexts<FeatParser::BaseToMarkElementContext>();
}

FeatParser::BaseToMarkElementContext* FeatParser::PositionContext::baseToMarkElement(size_t i) {
  return getRuleContext<FeatParser::BaseToMarkElementContext>(i);
}

std::vector<FeatParser::LigatureMarkElementContext *> FeatParser::PositionContext::ligatureMarkElement() {
  return getRuleContexts<FeatParser::LigatureMarkElementContext>();
}

FeatParser::LigatureMarkElementContext* FeatParser::PositionContext::ligatureMarkElement(size_t i) {
  return getRuleContext<FeatParser::LigatureMarkElementContext>(i);
}


size_t FeatParser::PositionContext::getRuleIndex() const {
  return FeatParser::RulePosition;
}


std::any FeatParser::PositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitPosition(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::PositionContext* FeatParser::position() {
  PositionContext *_localctx = _tracker.createInstance<PositionContext>(_ctx, getState());
  enterRule(_localctx, 54, FeatParser::RulePosition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(508);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::ENUMERATE

    || _la == FeatParser::ENUMERATE_v) {
      setState(507);
      enumtok();
    }
    setState(510);
    postok();
    setState(512);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::NOTDEF || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 520193) != 0)) {
      setState(511);
      antlrcpp::downCast<PositionContext *>(_localctx)->startpat = pattern();
    }
    setState(568);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::BEGINVALUE:
      case FeatParser::LPAREN:
      case FeatParser::NUM: {
        setState(514);
        valueRecord();
        setState(518);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FeatParser::NOTDEF || ((((_la - 119) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 119)) & 520193) != 0)) {
          setState(515);
          valuePattern();
          setState(520);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FeatParser::LOOKUP: {
        setState(523); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(521);
          match(FeatParser::LOOKUP);
          setState(522);
          label();
          setState(525); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::LOOKUP);
        setState(530);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FeatParser::NOTDEF || ((((_la - 119) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 119)) & 520193) != 0)) {
          setState(527);
          lookupPatternElement();
          setState(532);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FeatParser::CURSIVE: {
        setState(533);
        match(FeatParser::CURSIVE);
        setState(534);
        cursiveElement();
        setState(536);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::NOTDEF || ((((_la - 119) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 119)) & 520193) != 0)) {
          setState(535);
          antlrcpp::downCast<PositionContext *>(_localctx)->endpat = pattern();
        }
        break;
      }

      case FeatParser::MARKBASE: {
        setState(538);
        match(FeatParser::MARKBASE);
        setState(539);
        antlrcpp::downCast<PositionContext *>(_localctx)->midpat = pattern();
        setState(541); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(540);
          baseToMarkElement();
          setState(543); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::BEGINVALUE);
        setState(546);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::NOTDEF || ((((_la - 119) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 119)) & 520193) != 0)) {
          setState(545);
          antlrcpp::downCast<PositionContext *>(_localctx)->endpat = pattern();
        }
        break;
      }

      case FeatParser::MARKLIG:
      case FeatParser::MARKLIG_v: {
        setState(548);
        markligtok();
        setState(549);
        antlrcpp::downCast<PositionContext *>(_localctx)->midpat = pattern();
        setState(551); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(550);
          ligatureMarkElement();
          setState(553); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::BEGINVALUE);
        setState(556);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::NOTDEF || ((((_la - 119) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 119)) & 520193) != 0)) {
          setState(555);
          antlrcpp::downCast<PositionContext *>(_localctx)->endpat = pattern();
        }
        break;
      }

      case FeatParser::MARK: {
        setState(558);
        match(FeatParser::MARK);
        setState(559);
        antlrcpp::downCast<PositionContext *>(_localctx)->midpat = pattern();
        setState(561); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(560);
          baseToMarkElement();
          setState(563); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::BEGINVALUE);
        setState(566);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::NOTDEF || ((((_la - 119) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 119)) & 520193) != 0)) {
          setState(565);
          antlrcpp::downCast<PositionContext *>(_localctx)->endpat = pattern();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValuePatternContext ------------------------------------------------------------------

FeatParser::ValuePatternContext::ValuePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::PatternElementContext* FeatParser::ValuePatternContext::patternElement() {
  return getRuleContext<FeatParser::PatternElementContext>(0);
}

FeatParser::ValueRecordContext* FeatParser::ValuePatternContext::valueRecord() {
  return getRuleContext<FeatParser::ValueRecordContext>(0);
}


size_t FeatParser::ValuePatternContext::getRuleIndex() const {
  return FeatParser::RuleValuePattern;
}


std::any FeatParser::ValuePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitValuePattern(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ValuePatternContext* FeatParser::valuePattern() {
  ValuePatternContext *_localctx = _tracker.createInstance<ValuePatternContext>(_ctx, getState());
  enterRule(_localctx, 56, FeatParser::RuleValuePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(570);
    patternElement();
    setState(572);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::BEGINVALUE || _la == FeatParser::LPAREN

    || _la == FeatParser::NUM) {
      setState(571);
      valueRecord();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueRecordContext ------------------------------------------------------------------

FeatParser::ValueRecordContext::ValueRecordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ValueRecordContext::BEGINVALUE() {
  return getToken(FeatParser::BEGINVALUE, 0);
}

tree::TerminalNode* FeatParser::ValueRecordContext::ENDVALUE() {
  return getToken(FeatParser::ENDVALUE, 0);
}

FeatParser::LabelContext* FeatParser::ValueRecordContext::label() {
  return getRuleContext<FeatParser::LabelContext>(0);
}

FeatParser::ValueLiteralContext* FeatParser::ValueRecordContext::valueLiteral() {
  return getRuleContext<FeatParser::ValueLiteralContext>(0);
}


size_t FeatParser::ValueRecordContext::getRuleIndex() const {
  return FeatParser::RuleValueRecord;
}


std::any FeatParser::ValueRecordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitValueRecord(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ValueRecordContext* FeatParser::valueRecord() {
  ValueRecordContext *_localctx = _tracker.createInstance<ValueRecordContext>(_ctx, getState());
  enterRule(_localctx, 58, FeatParser::RuleValueRecord);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(579);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(574);
      match(FeatParser::BEGINVALUE);
      setState(575);
      antlrcpp::downCast<ValueRecordContext *>(_localctx)->valuename = label();
      setState(576);
      match(FeatParser::ENDVALUE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(578);
      valueLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueLiteralContext ------------------------------------------------------------------

FeatParser::ValueLiteralContext::ValueLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::SingleValueLiteralContext *> FeatParser::ValueLiteralContext::singleValueLiteral() {
  return getRuleContexts<FeatParser::SingleValueLiteralContext>();
}

FeatParser::SingleValueLiteralContext* FeatParser::ValueLiteralContext::singleValueLiteral(size_t i) {
  return getRuleContext<FeatParser::SingleValueLiteralContext>(i);
}

tree::TerminalNode* FeatParser::ValueLiteralContext::BEGINVALUE() {
  return getToken(FeatParser::BEGINVALUE, 0);
}

tree::TerminalNode* FeatParser::ValueLiteralContext::ENDVALUE() {
  return getToken(FeatParser::ENDVALUE, 0);
}

tree::TerminalNode* FeatParser::ValueLiteralContext::LPAREN() {
  return getToken(FeatParser::LPAREN, 0);
}

tree::TerminalNode* FeatParser::ValueLiteralContext::RPAREN() {
  return getToken(FeatParser::RPAREN, 0);
}

std::vector<FeatParser::LocationMultiValueLiteralContext *> FeatParser::ValueLiteralContext::locationMultiValueLiteral() {
  return getRuleContexts<FeatParser::LocationMultiValueLiteralContext>();
}

FeatParser::LocationMultiValueLiteralContext* FeatParser::ValueLiteralContext::locationMultiValueLiteral(size_t i) {
  return getRuleContext<FeatParser::LocationMultiValueLiteralContext>(i);
}


size_t FeatParser::ValueLiteralContext::getRuleIndex() const {
  return FeatParser::RuleValueLiteral;
}


std::any FeatParser::ValueLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitValueLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ValueLiteralContext* FeatParser::valueLiteral() {
  ValueLiteralContext *_localctx = _tracker.createInstance<ValueLiteralContext>(_ctx, getState());
  enterRule(_localctx, 60, FeatParser::RuleValueLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(597);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(581);
      singleValueLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(582);
      match(FeatParser::BEGINVALUE);
      setState(583);
      singleValueLiteral();
      setState(584);
      singleValueLiteral();
      setState(585);
      singleValueLiteral();
      setState(586);
      singleValueLiteral();
      setState(587);
      match(FeatParser::ENDVALUE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(589);
      match(FeatParser::LPAREN);
      setState(591); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(590);
        locationMultiValueLiteral();
        setState(593); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FeatParser::BEGINVALUE

      || _la == FeatParser::MARK || ((((_la - 130) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 130)) & 203) != 0));
      setState(595);
      match(FeatParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleValueLiteralContext ------------------------------------------------------------------

FeatParser::SingleValueLiteralContext::SingleValueLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::SingleValueLiteralContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

FeatParser::ParenLocationValueContext* FeatParser::SingleValueLiteralContext::parenLocationValue() {
  return getRuleContext<FeatParser::ParenLocationValueContext>(0);
}


size_t FeatParser::SingleValueLiteralContext::getRuleIndex() const {
  return FeatParser::RuleSingleValueLiteral;
}


std::any FeatParser::SingleValueLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitSingleValueLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::SingleValueLiteralContext* FeatParser::singleValueLiteral() {
  SingleValueLiteralContext *_localctx = _tracker.createInstance<SingleValueLiteralContext>(_ctx, getState());
  enterRule(_localctx, 62, FeatParser::RuleSingleValueLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(601);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NUM: {
        enterOuterAlt(_localctx, 1);
        setState(599);
        match(FeatParser::NUM);
        break;
      }

      case FeatParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(600);
        parenLocationValue();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParenLocationValueContext ------------------------------------------------------------------

FeatParser::ParenLocationValueContext::ParenLocationValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ParenLocationValueContext::LPAREN() {
  return getToken(FeatParser::LPAREN, 0);
}

tree::TerminalNode* FeatParser::ParenLocationValueContext::RPAREN() {
  return getToken(FeatParser::RPAREN, 0);
}

std::vector<FeatParser::LocationValueLiteralContext *> FeatParser::ParenLocationValueContext::locationValueLiteral() {
  return getRuleContexts<FeatParser::LocationValueLiteralContext>();
}

FeatParser::LocationValueLiteralContext* FeatParser::ParenLocationValueContext::locationValueLiteral(size_t i) {
  return getRuleContext<FeatParser::LocationValueLiteralContext>(i);
}


size_t FeatParser::ParenLocationValueContext::getRuleIndex() const {
  return FeatParser::RuleParenLocationValue;
}


std::any FeatParser::ParenLocationValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitParenLocationValue(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ParenLocationValueContext* FeatParser::parenLocationValue() {
  ParenLocationValueContext *_localctx = _tracker.createInstance<ParenLocationValueContext>(_ctx, getState());
  enterRule(_localctx, 64, FeatParser::RuleParenLocationValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(603);
    match(FeatParser::LPAREN);
    setState(605); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(604);
      locationValueLiteral();
      setState(607); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::MARK || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 2251) != 0));
    setState(609);
    match(FeatParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationValueLiteralContext ------------------------------------------------------------------

FeatParser::LocationValueLiteralContext::LocationValueLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LocationValueLiteralContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

FeatParser::LocationSpecifierContext* FeatParser::LocationValueLiteralContext::locationSpecifier() {
  return getRuleContext<FeatParser::LocationSpecifierContext>(0);
}

tree::TerminalNode* FeatParser::LocationValueLiteralContext::COLON() {
  return getToken(FeatParser::COLON, 0);
}


size_t FeatParser::LocationValueLiteralContext::getRuleIndex() const {
  return FeatParser::RuleLocationValueLiteral;
}


std::any FeatParser::LocationValueLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLocationValueLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LocationValueLiteralContext* FeatParser::locationValueLiteral() {
  LocationValueLiteralContext *_localctx = _tracker.createInstance<LocationValueLiteralContext>(_ctx, getState());
  enterRule(_localctx, 66, FeatParser::RuleLocationValueLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(614);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARK || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 203) != 0)) {
      setState(611);
      locationSpecifier();
      setState(612);
      match(FeatParser::COLON);
    }
    setState(616);
    match(FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationMultiValueLiteralContext ------------------------------------------------------------------

FeatParser::LocationMultiValueLiteralContext::LocationMultiValueLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LocationMultiValueLiteralContext::BEGINVALUE() {
  return getToken(FeatParser::BEGINVALUE, 0);
}

std::vector<tree::TerminalNode *> FeatParser::LocationMultiValueLiteralContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::LocationMultiValueLiteralContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}

tree::TerminalNode* FeatParser::LocationMultiValueLiteralContext::ENDVALUE() {
  return getToken(FeatParser::ENDVALUE, 0);
}

FeatParser::LocationSpecifierContext* FeatParser::LocationMultiValueLiteralContext::locationSpecifier() {
  return getRuleContext<FeatParser::LocationSpecifierContext>(0);
}

tree::TerminalNode* FeatParser::LocationMultiValueLiteralContext::COLON() {
  return getToken(FeatParser::COLON, 0);
}


size_t FeatParser::LocationMultiValueLiteralContext::getRuleIndex() const {
  return FeatParser::RuleLocationMultiValueLiteral;
}


std::any FeatParser::LocationMultiValueLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLocationMultiValueLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LocationMultiValueLiteralContext* FeatParser::locationMultiValueLiteral() {
  LocationMultiValueLiteralContext *_localctx = _tracker.createInstance<LocationMultiValueLiteralContext>(_ctx, getState());
  enterRule(_localctx, 68, FeatParser::RuleLocationMultiValueLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(621);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARK || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 203) != 0)) {
      setState(618);
      locationSpecifier();
      setState(619);
      match(FeatParser::COLON);
    }
    setState(623);
    match(FeatParser::BEGINVALUE);
    setState(624);
    match(FeatParser::NUM);
    setState(625);
    match(FeatParser::NUM);
    setState(626);
    match(FeatParser::NUM);
    setState(627);
    match(FeatParser::NUM);
    setState(628);
    match(FeatParser::ENDVALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationSpecifierContext ------------------------------------------------------------------

FeatParser::LocationSpecifierContext::LocationSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::LocationLiteralContext* FeatParser::LocationSpecifierContext::locationLiteral() {
  return getRuleContext<FeatParser::LocationLiteralContext>(0);
}

tree::TerminalNode* FeatParser::LocationSpecifierContext::LNAME() {
  return getToken(FeatParser::LNAME, 0);
}


size_t FeatParser::LocationSpecifierContext::getRuleIndex() const {
  return FeatParser::RuleLocationSpecifier;
}


std::any FeatParser::LocationSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLocationSpecifier(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LocationSpecifierContext* FeatParser::locationSpecifier() {
  LocationSpecifierContext *_localctx = _tracker.createInstance<LocationSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 70, FeatParser::RuleLocationSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(632);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::MARK:
      case FeatParser::STRVAL:
      case FeatParser::AXISUNIT:
      case FeatParser::NAMELABEL:
      case FeatParser::EXTNAME: {
        enterOuterAlt(_localctx, 1);
        setState(630);
        locationLiteral();
        break;
      }

      case FeatParser::LNAME: {
        enterOuterAlt(_localctx, 2);
        setState(631);
        match(FeatParser::LNAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationLiteralContext ------------------------------------------------------------------

FeatParser::LocationLiteralContext::LocationLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::AxisLocationLiteralContext *> FeatParser::LocationLiteralContext::axisLocationLiteral() {
  return getRuleContexts<FeatParser::AxisLocationLiteralContext>();
}

FeatParser::AxisLocationLiteralContext* FeatParser::LocationLiteralContext::axisLocationLiteral(size_t i) {
  return getRuleContext<FeatParser::AxisLocationLiteralContext>(i);
}

std::vector<tree::TerminalNode *> FeatParser::LocationLiteralContext::COMMA() {
  return getTokens(FeatParser::COMMA);
}

tree::TerminalNode* FeatParser::LocationLiteralContext::COMMA(size_t i) {
  return getToken(FeatParser::COMMA, i);
}


size_t FeatParser::LocationLiteralContext::getRuleIndex() const {
  return FeatParser::RuleLocationLiteral;
}


std::any FeatParser::LocationLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLocationLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LocationLiteralContext* FeatParser::locationLiteral() {
  LocationLiteralContext *_localctx = _tracker.createInstance<LocationLiteralContext>(_ctx, getState());
  enterRule(_localctx, 72, FeatParser::RuleLocationLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(634);
    axisLocationLiteral();
    setState(639);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::COMMA) {
      setState(635);
      match(FeatParser::COMMA);
      setState(636);
      axisLocationLiteral();
      setState(641);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisLocationLiteralContext ------------------------------------------------------------------

FeatParser::AxisLocationLiteralContext::AxisLocationLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::TagContext* FeatParser::AxisLocationLiteralContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}

tree::TerminalNode* FeatParser::AxisLocationLiteralContext::EQUALS() {
  return getToken(FeatParser::EQUALS, 0);
}

FeatParser::FixedNumContext* FeatParser::AxisLocationLiteralContext::fixedNum() {
  return getRuleContext<FeatParser::FixedNumContext>(0);
}

tree::TerminalNode* FeatParser::AxisLocationLiteralContext::AXISUNIT() {
  return getToken(FeatParser::AXISUNIT, 0);
}

tree::TerminalNode* FeatParser::AxisLocationLiteralContext::HYPHEN() {
  return getToken(FeatParser::HYPHEN, 0);
}

tree::TerminalNode* FeatParser::AxisLocationLiteralContext::PLUS() {
  return getToken(FeatParser::PLUS, 0);
}


size_t FeatParser::AxisLocationLiteralContext::getRuleIndex() const {
  return FeatParser::RuleAxisLocationLiteral;
}


std::any FeatParser::AxisLocationLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisLocationLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisLocationLiteralContext* FeatParser::axisLocationLiteral() {
  AxisLocationLiteralContext *_localctx = _tracker.createInstance<AxisLocationLiteralContext>(_ctx, getState());
  enterRule(_localctx, 74, FeatParser::RuleAxisLocationLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(642);
    tag();
    setState(643);
    match(FeatParser::EQUALS);
    setState(644);
    fixedNum();
    setState(646);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::HYPHEN

    || _la == FeatParser::PLUS) {
      setState(645);
      _la = _input->LA(1);
      if (!(_la == FeatParser::HYPHEN

      || _la == FeatParser::PLUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(649);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::AXISUNIT) {
      setState(648);
      match(FeatParser::AXISUNIT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CursiveElementContext ------------------------------------------------------------------

FeatParser::CursiveElementContext::CursiveElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::PatternElementContext* FeatParser::CursiveElementContext::patternElement() {
  return getRuleContext<FeatParser::PatternElementContext>(0);
}

std::vector<FeatParser::AnchorContext *> FeatParser::CursiveElementContext::anchor() {
  return getRuleContexts<FeatParser::AnchorContext>();
}

FeatParser::AnchorContext* FeatParser::CursiveElementContext::anchor(size_t i) {
  return getRuleContext<FeatParser::AnchorContext>(i);
}


size_t FeatParser::CursiveElementContext::getRuleIndex() const {
  return FeatParser::RuleCursiveElement;
}


std::any FeatParser::CursiveElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitCursiveElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::CursiveElementContext* FeatParser::cursiveElement() {
  CursiveElementContext *_localctx = _tracker.createInstance<CursiveElementContext>(_ctx, getState());
  enterRule(_localctx, 76, FeatParser::RuleCursiveElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(651);
    patternElement();
    setState(652);
    anchor();
    setState(653);
    anchor();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseToMarkElementContext ------------------------------------------------------------------

FeatParser::BaseToMarkElementContext::BaseToMarkElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::AnchorContext* FeatParser::BaseToMarkElementContext::anchor() {
  return getRuleContext<FeatParser::AnchorContext>(0);
}

tree::TerminalNode* FeatParser::BaseToMarkElementContext::MARK() {
  return getToken(FeatParser::MARK, 0);
}

FeatParser::GclassContext* FeatParser::BaseToMarkElementContext::gclass() {
  return getRuleContext<FeatParser::GclassContext>(0);
}

tree::TerminalNode* FeatParser::BaseToMarkElementContext::MARKER() {
  return getToken(FeatParser::MARKER, 0);
}


size_t FeatParser::BaseToMarkElementContext::getRuleIndex() const {
  return FeatParser::RuleBaseToMarkElement;
}


std::any FeatParser::BaseToMarkElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitBaseToMarkElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::BaseToMarkElementContext* FeatParser::baseToMarkElement() {
  BaseToMarkElementContext *_localctx = _tracker.createInstance<BaseToMarkElementContext>(_ctx, getState());
  enterRule(_localctx, 78, FeatParser::RuleBaseToMarkElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(655);
    anchor();
    setState(656);
    match(FeatParser::MARK);
    setState(657);
    gclass();
    setState(659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARKER) {
      setState(658);
      match(FeatParser::MARKER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LigatureMarkElementContext ------------------------------------------------------------------

FeatParser::LigatureMarkElementContext::LigatureMarkElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::AnchorContext* FeatParser::LigatureMarkElementContext::anchor() {
  return getRuleContext<FeatParser::AnchorContext>(0);
}

tree::TerminalNode* FeatParser::LigatureMarkElementContext::MARK() {
  return getToken(FeatParser::MARK, 0);
}

FeatParser::GclassContext* FeatParser::LigatureMarkElementContext::gclass() {
  return getRuleContext<FeatParser::GclassContext>(0);
}

tree::TerminalNode* FeatParser::LigatureMarkElementContext::LIG_COMPONENT() {
  return getToken(FeatParser::LIG_COMPONENT, 0);
}

tree::TerminalNode* FeatParser::LigatureMarkElementContext::MARKER() {
  return getToken(FeatParser::MARKER, 0);
}


size_t FeatParser::LigatureMarkElementContext::getRuleIndex() const {
  return FeatParser::RuleLigatureMarkElement;
}


std::any FeatParser::LigatureMarkElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLigatureMarkElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LigatureMarkElementContext* FeatParser::ligatureMarkElement() {
  LigatureMarkElementContext *_localctx = _tracker.createInstance<LigatureMarkElementContext>(_ctx, getState());
  enterRule(_localctx, 80, FeatParser::RuleLigatureMarkElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(661);
    anchor();
    setState(664);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARK) {
      setState(662);
      match(FeatParser::MARK);
      setState(663);
      gclass();
    }
    setState(667);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::LIG_COMPONENT) {
      setState(666);
      match(FeatParser::LIG_COMPONENT);
    }
    setState(670);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARKER) {
      setState(669);
      match(FeatParser::MARKER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParametersContext ------------------------------------------------------------------

FeatParser::ParametersContext::ParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ParametersContext::PARAMETERS() {
  return getToken(FeatParser::PARAMETERS, 0);
}

std::vector<FeatParser::FixedNumContext *> FeatParser::ParametersContext::fixedNum() {
  return getRuleContexts<FeatParser::FixedNumContext>();
}

FeatParser::FixedNumContext* FeatParser::ParametersContext::fixedNum(size_t i) {
  return getRuleContext<FeatParser::FixedNumContext>(i);
}


size_t FeatParser::ParametersContext::getRuleIndex() const {
  return FeatParser::RuleParameters;
}


std::any FeatParser::ParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitParameters(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ParametersContext* FeatParser::parameters() {
  ParametersContext *_localctx = _tracker.createInstance<ParametersContext>(_ctx, getState());
  enterRule(_localctx, 82, FeatParser::RuleParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(672);
    match(FeatParser::PARAMETERS);
    setState(674); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(673);
      fixedNum();
      setState(676); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::POINTNUM

    || _la == FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SizemenunameContext ------------------------------------------------------------------

FeatParser::SizemenunameContext::SizemenunameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::SizemenunameContext::SIZEMENUNAME() {
  return getToken(FeatParser::SIZEMENUNAME, 0);
}

tree::TerminalNode* FeatParser::SizemenunameContext::STRVAL() {
  return getToken(FeatParser::STRVAL, 0);
}

std::vector<FeatParser::GenNumContext *> FeatParser::SizemenunameContext::genNum() {
  return getRuleContexts<FeatParser::GenNumContext>();
}

FeatParser::GenNumContext* FeatParser::SizemenunameContext::genNum(size_t i) {
  return getRuleContext<FeatParser::GenNumContext>(i);
}


size_t FeatParser::SizemenunameContext::getRuleIndex() const {
  return FeatParser::RuleSizemenuname;
}


std::any FeatParser::SizemenunameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitSizemenuname(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::SizemenunameContext* FeatParser::sizemenuname() {
  SizemenunameContext *_localctx = _tracker.createInstance<SizemenunameContext>(_ctx, getState());
  enterRule(_localctx, 84, FeatParser::RuleSizemenuname);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(678);
    match(FeatParser::SIZEMENUNAME);
    setState(685);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 139) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 139)) & 7) != 0)) {
      setState(679);
      genNum();
      setState(683);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 139) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 139)) & 7) != 0)) {
        setState(680);
        genNum();
        setState(681);
        genNum();
      }
    }
    setState(687);
    match(FeatParser::STRVAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureNamesContext ------------------------------------------------------------------

FeatParser::FeatureNamesContext::FeatureNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FeatureNamesContext::FEATURE_NAMES() {
  return getToken(FeatParser::FEATURE_NAMES, 0);
}

tree::TerminalNode* FeatParser::FeatureNamesContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::FeatureNamesContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

std::vector<FeatParser::NameEntryStatementContext *> FeatParser::FeatureNamesContext::nameEntryStatement() {
  return getRuleContexts<FeatParser::NameEntryStatementContext>();
}

FeatParser::NameEntryStatementContext* FeatParser::FeatureNamesContext::nameEntryStatement(size_t i) {
  return getRuleContext<FeatParser::NameEntryStatementContext>(i);
}


size_t FeatParser::FeatureNamesContext::getRuleIndex() const {
  return FeatParser::RuleFeatureNames;
}


std::any FeatParser::FeatureNamesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFeatureNames(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FeatureNamesContext* FeatParser::featureNames() {
  FeatureNamesContext *_localctx = _tracker.createInstance<FeatureNamesContext>(_ctx, getState());
  enterRule(_localctx, 86, FeatParser::RuleFeatureNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(689);
    match(FeatParser::FEATURE_NAMES);
    setState(690);
    match(FeatParser::LCBRACE);
    setState(692); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(691);
      nameEntryStatement();
      setState(694); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::NAME);
    setState(696);
    match(FeatParser::RCBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtableContext ------------------------------------------------------------------

FeatParser::SubtableContext::SubtableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::SubtableContext::SUBTABLE() {
  return getToken(FeatParser::SUBTABLE, 0);
}


size_t FeatParser::SubtableContext::getRuleIndex() const {
  return FeatParser::RuleSubtable;
}


std::any FeatParser::SubtableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitSubtable(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::SubtableContext* FeatParser::subtable() {
  SubtableContext *_localctx = _tracker.createInstance<SubtableContext>(_ctx, getState());
  enterRule(_localctx, 88, FeatParser::RuleSubtable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(698);
    match(FeatParser::SUBTABLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_BASEContext ------------------------------------------------------------------

FeatParser::Table_BASEContext::Table_BASEContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_BASEContext::BASE() {
  return getTokens(FeatParser::BASE);
}

tree::TerminalNode* FeatParser::Table_BASEContext::BASE(size_t i) {
  return getToken(FeatParser::BASE, i);
}

tree::TerminalNode* FeatParser::Table_BASEContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_BASEContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_BASEContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::BaseStatementContext *> FeatParser::Table_BASEContext::baseStatement() {
  return getRuleContexts<FeatParser::BaseStatementContext>();
}

FeatParser::BaseStatementContext* FeatParser::Table_BASEContext::baseStatement(size_t i) {
  return getRuleContext<FeatParser::BaseStatementContext>(i);
}


size_t FeatParser::Table_BASEContext::getRuleIndex() const {
  return FeatParser::RuleTable_BASE;
}


std::any FeatParser::Table_BASEContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_BASE(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_BASEContext* FeatParser::table_BASE() {
  Table_BASEContext *_localctx = _tracker.createInstance<Table_BASEContext>(_ctx, getState());
  enterRule(_localctx, 90, FeatParser::RuleTable_BASE);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(700);
    match(FeatParser::BASE);
    setState(701);
    match(FeatParser::LCBRACE);
    setState(703); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(702);
      baseStatement();
      setState(705); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 5) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 5)) & 8646911284551352321) != 0));
    setState(707);
    match(FeatParser::RCBRACE);
    setState(708);
    match(FeatParser::BASE);
    setState(709);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseStatementContext ------------------------------------------------------------------

FeatParser::BaseStatementContext::BaseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::BaseStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::AxisTagsContext* FeatParser::BaseStatementContext::axisTags() {
  return getRuleContext<FeatParser::AxisTagsContext>(0);
}

FeatParser::AxisScriptsContext* FeatParser::BaseStatementContext::axisScripts() {
  return getRuleContext<FeatParser::AxisScriptsContext>(0);
}

FeatParser::IncludeContext* FeatParser::BaseStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::BaseStatementContext::getRuleIndex() const {
  return FeatParser::RuleBaseStatement;
}


std::any FeatParser::BaseStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitBaseStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::BaseStatementContext* FeatParser::baseStatement() {
  BaseStatementContext *_localctx = _tracker.createInstance<BaseStatementContext>(_ctx, getState());
  enterRule(_localctx, 92, FeatParser::RuleBaseStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(714);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::HA_BTL:
      case FeatParser::VA_BTL: {
        setState(711);
        axisTags();
        break;
      }

      case FeatParser::HA_BSL:
      case FeatParser::VA_BSL: {
        setState(712);
        axisScripts();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(713);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(716);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisTagsContext ------------------------------------------------------------------

FeatParser::AxisTagsContext::AxisTagsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisTagsContext::HA_BTL() {
  return getToken(FeatParser::HA_BTL, 0);
}

tree::TerminalNode* FeatParser::AxisTagsContext::VA_BTL() {
  return getToken(FeatParser::VA_BTL, 0);
}

std::vector<FeatParser::TagContext *> FeatParser::AxisTagsContext::tag() {
  return getRuleContexts<FeatParser::TagContext>();
}

FeatParser::TagContext* FeatParser::AxisTagsContext::tag(size_t i) {
  return getRuleContext<FeatParser::TagContext>(i);
}


size_t FeatParser::AxisTagsContext::getRuleIndex() const {
  return FeatParser::RuleAxisTags;
}


std::any FeatParser::AxisTagsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisTags(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisTagsContext* FeatParser::axisTags() {
  AxisTagsContext *_localctx = _tracker.createInstance<AxisTagsContext>(_ctx, getState());
  enterRule(_localctx, 94, FeatParser::RuleAxisTags);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(718);
    _la = _input->LA(1);
    if (!(_la == FeatParser::HA_BTL

    || _la == FeatParser::VA_BTL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(720); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(719);
      tag();
      setState(722); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::MARK || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 201) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisScriptsContext ------------------------------------------------------------------

FeatParser::AxisScriptsContext::AxisScriptsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::BaseScriptContext *> FeatParser::AxisScriptsContext::baseScript() {
  return getRuleContexts<FeatParser::BaseScriptContext>();
}

FeatParser::BaseScriptContext* FeatParser::AxisScriptsContext::baseScript(size_t i) {
  return getRuleContext<FeatParser::BaseScriptContext>(i);
}

tree::TerminalNode* FeatParser::AxisScriptsContext::HA_BSL() {
  return getToken(FeatParser::HA_BSL, 0);
}

tree::TerminalNode* FeatParser::AxisScriptsContext::VA_BSL() {
  return getToken(FeatParser::VA_BSL, 0);
}

std::vector<tree::TerminalNode *> FeatParser::AxisScriptsContext::COMMA() {
  return getTokens(FeatParser::COMMA);
}

tree::TerminalNode* FeatParser::AxisScriptsContext::COMMA(size_t i) {
  return getToken(FeatParser::COMMA, i);
}


size_t FeatParser::AxisScriptsContext::getRuleIndex() const {
  return FeatParser::RuleAxisScripts;
}


std::any FeatParser::AxisScriptsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisScripts(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisScriptsContext* FeatParser::axisScripts() {
  AxisScriptsContext *_localctx = _tracker.createInstance<AxisScriptsContext>(_ctx, getState());
  enterRule(_localctx, 96, FeatParser::RuleAxisScripts);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(724);
    _la = _input->LA(1);
    if (!(_la == FeatParser::HA_BSL

    || _la == FeatParser::VA_BSL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(725);
    baseScript();
    setState(730);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::COMMA) {
      setState(726);
      match(FeatParser::COMMA);
      setState(727);
      baseScript();
      setState(732);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseScriptContext ------------------------------------------------------------------

FeatParser::BaseScriptContext::BaseScriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::TagContext *> FeatParser::BaseScriptContext::tag() {
  return getRuleContexts<FeatParser::TagContext>();
}

FeatParser::TagContext* FeatParser::BaseScriptContext::tag(size_t i) {
  return getRuleContext<FeatParser::TagContext>(i);
}

std::vector<tree::TerminalNode *> FeatParser::BaseScriptContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::BaseScriptContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}


size_t FeatParser::BaseScriptContext::getRuleIndex() const {
  return FeatParser::RuleBaseScript;
}


std::any FeatParser::BaseScriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitBaseScript(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::BaseScriptContext* FeatParser::baseScript() {
  BaseScriptContext *_localctx = _tracker.createInstance<BaseScriptContext>(_ctx, getState());
  enterRule(_localctx, 98, FeatParser::RuleBaseScript);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(733);
    antlrcpp::downCast<BaseScriptContext *>(_localctx)->script = tag();
    setState(734);
    antlrcpp::downCast<BaseScriptContext *>(_localctx)->db = tag();
    setState(736); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(735);
      match(FeatParser::NUM);
      setState(738); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_GDEFContext ------------------------------------------------------------------

FeatParser::Table_GDEFContext::Table_GDEFContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_GDEFContext::GDEF() {
  return getTokens(FeatParser::GDEF);
}

tree::TerminalNode* FeatParser::Table_GDEFContext::GDEF(size_t i) {
  return getToken(FeatParser::GDEF, i);
}

tree::TerminalNode* FeatParser::Table_GDEFContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_GDEFContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_GDEFContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::GdefStatementContext *> FeatParser::Table_GDEFContext::gdefStatement() {
  return getRuleContexts<FeatParser::GdefStatementContext>();
}

FeatParser::GdefStatementContext* FeatParser::Table_GDEFContext::gdefStatement(size_t i) {
  return getRuleContext<FeatParser::GdefStatementContext>(i);
}


size_t FeatParser::Table_GDEFContext::getRuleIndex() const {
  return FeatParser::RuleTable_GDEF;
}


std::any FeatParser::Table_GDEFContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_GDEF(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_GDEFContext* FeatParser::table_GDEF() {
  Table_GDEFContext *_localctx = _tracker.createInstance<Table_GDEFContext>(_ctx, getState());
  enterRule(_localctx, 100, FeatParser::RuleTable_GDEF);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(740);
    match(FeatParser::GDEF);
    setState(741);
    match(FeatParser::LCBRACE);
    setState(743); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(742);
      gdefStatement();
      setState(745); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 15) != 0));
    setState(747);
    match(FeatParser::RCBRACE);
    setState(748);
    match(FeatParser::GDEF);
    setState(749);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefStatementContext ------------------------------------------------------------------

FeatParser::GdefStatementContext::GdefStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::GdefGlyphClassContext* FeatParser::GdefStatementContext::gdefGlyphClass() {
  return getRuleContext<FeatParser::GdefGlyphClassContext>(0);
}

FeatParser::GdefAttachContext* FeatParser::GdefStatementContext::gdefAttach() {
  return getRuleContext<FeatParser::GdefAttachContext>(0);
}

FeatParser::GdefLigCaretPosContext* FeatParser::GdefStatementContext::gdefLigCaretPos() {
  return getRuleContext<FeatParser::GdefLigCaretPosContext>(0);
}

FeatParser::GdefLigCaretIndexContext* FeatParser::GdefStatementContext::gdefLigCaretIndex() {
  return getRuleContext<FeatParser::GdefLigCaretIndexContext>(0);
}

FeatParser::IncludeContext* FeatParser::GdefStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::GdefStatementContext::getRuleIndex() const {
  return FeatParser::RuleGdefStatement;
}


std::any FeatParser::GdefStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefStatementContext* FeatParser::gdefStatement() {
  GdefStatementContext *_localctx = _tracker.createInstance<GdefStatementContext>(_ctx, getState());
  enterRule(_localctx, 102, FeatParser::RuleGdefStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(756);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::GLYPH_CLASS_DEF: {
        setState(751);
        gdefGlyphClass();
        break;
      }

      case FeatParser::ATTACH: {
        setState(752);
        gdefAttach();
        break;
      }

      case FeatParser::LIG_CARET_BY_POS: {
        setState(753);
        gdefLigCaretPos();
        break;
      }

      case FeatParser::LIG_CARET_BY_IDX: {
        setState(754);
        gdefLigCaretIndex();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(755);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(758);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefGlyphClassContext ------------------------------------------------------------------

FeatParser::GdefGlyphClassContext::GdefGlyphClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefGlyphClassContext::GLYPH_CLASS_DEF() {
  return getToken(FeatParser::GLYPH_CLASS_DEF, 0);
}

std::vector<FeatParser::GlyphClassOptionalContext *> FeatParser::GdefGlyphClassContext::glyphClassOptional() {
  return getRuleContexts<FeatParser::GlyphClassOptionalContext>();
}

FeatParser::GlyphClassOptionalContext* FeatParser::GdefGlyphClassContext::glyphClassOptional(size_t i) {
  return getRuleContext<FeatParser::GlyphClassOptionalContext>(i);
}

std::vector<tree::TerminalNode *> FeatParser::GdefGlyphClassContext::COMMA() {
  return getTokens(FeatParser::COMMA);
}

tree::TerminalNode* FeatParser::GdefGlyphClassContext::COMMA(size_t i) {
  return getToken(FeatParser::COMMA, i);
}


size_t FeatParser::GdefGlyphClassContext::getRuleIndex() const {
  return FeatParser::RuleGdefGlyphClass;
}


std::any FeatParser::GdefGlyphClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefGlyphClass(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefGlyphClassContext* FeatParser::gdefGlyphClass() {
  GdefGlyphClassContext *_localctx = _tracker.createInstance<GdefGlyphClassContext>(_ctx, getState());
  enterRule(_localctx, 104, FeatParser::RuleGdefGlyphClass);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(760);
    match(FeatParser::GLYPH_CLASS_DEF);
    setState(761);
    glyphClassOptional();
    setState(762);
    match(FeatParser::COMMA);
    setState(763);
    glyphClassOptional();
    setState(764);
    match(FeatParser::COMMA);
    setState(765);
    glyphClassOptional();
    setState(766);
    match(FeatParser::COMMA);
    setState(767);
    glyphClassOptional();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefAttachContext ------------------------------------------------------------------

FeatParser::GdefAttachContext::GdefAttachContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefAttachContext::ATTACH() {
  return getToken(FeatParser::ATTACH, 0);
}

FeatParser::LookupPatternContext* FeatParser::GdefAttachContext::lookupPattern() {
  return getRuleContext<FeatParser::LookupPatternContext>(0);
}

std::vector<tree::TerminalNode *> FeatParser::GdefAttachContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::GdefAttachContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}


size_t FeatParser::GdefAttachContext::getRuleIndex() const {
  return FeatParser::RuleGdefAttach;
}


std::any FeatParser::GdefAttachContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefAttach(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefAttachContext* FeatParser::gdefAttach() {
  GdefAttachContext *_localctx = _tracker.createInstance<GdefAttachContext>(_ctx, getState());
  enterRule(_localctx, 106, FeatParser::RuleGdefAttach);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(769);
    match(FeatParser::ATTACH);
    setState(770);
    lookupPattern();
    setState(772); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(771);
      match(FeatParser::NUM);
      setState(774); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefLigCaretPosContext ------------------------------------------------------------------

FeatParser::GdefLigCaretPosContext::GdefLigCaretPosContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefLigCaretPosContext::LIG_CARET_BY_POS() {
  return getToken(FeatParser::LIG_CARET_BY_POS, 0);
}

FeatParser::LookupPatternContext* FeatParser::GdefLigCaretPosContext::lookupPattern() {
  return getRuleContext<FeatParser::LookupPatternContext>(0);
}

std::vector<FeatParser::SingleValueLiteralContext *> FeatParser::GdefLigCaretPosContext::singleValueLiteral() {
  return getRuleContexts<FeatParser::SingleValueLiteralContext>();
}

FeatParser::SingleValueLiteralContext* FeatParser::GdefLigCaretPosContext::singleValueLiteral(size_t i) {
  return getRuleContext<FeatParser::SingleValueLiteralContext>(i);
}


size_t FeatParser::GdefLigCaretPosContext::getRuleIndex() const {
  return FeatParser::RuleGdefLigCaretPos;
}


std::any FeatParser::GdefLigCaretPosContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefLigCaretPos(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefLigCaretPosContext* FeatParser::gdefLigCaretPos() {
  GdefLigCaretPosContext *_localctx = _tracker.createInstance<GdefLigCaretPosContext>(_ctx, getState());
  enterRule(_localctx, 108, FeatParser::RuleGdefLigCaretPos);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(776);
    match(FeatParser::LIG_CARET_BY_POS);
    setState(777);
    lookupPattern();
    setState(779); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(778);
      singleValueLiteral();
      setState(781); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::LPAREN

    || _la == FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefLigCaretIndexContext ------------------------------------------------------------------

FeatParser::GdefLigCaretIndexContext::GdefLigCaretIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefLigCaretIndexContext::LIG_CARET_BY_IDX() {
  return getToken(FeatParser::LIG_CARET_BY_IDX, 0);
}

FeatParser::LookupPatternContext* FeatParser::GdefLigCaretIndexContext::lookupPattern() {
  return getRuleContext<FeatParser::LookupPatternContext>(0);
}

std::vector<tree::TerminalNode *> FeatParser::GdefLigCaretIndexContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::GdefLigCaretIndexContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}


size_t FeatParser::GdefLigCaretIndexContext::getRuleIndex() const {
  return FeatParser::RuleGdefLigCaretIndex;
}


std::any FeatParser::GdefLigCaretIndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefLigCaretIndex(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefLigCaretIndexContext* FeatParser::gdefLigCaretIndex() {
  GdefLigCaretIndexContext *_localctx = _tracker.createInstance<GdefLigCaretIndexContext>(_ctx, getState());
  enterRule(_localctx, 110, FeatParser::RuleGdefLigCaretIndex);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(783);
    match(FeatParser::LIG_CARET_BY_IDX);
    setState(784);
    lookupPattern();
    setState(786); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(785);
      match(FeatParser::NUM);
      setState(788); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_headContext ------------------------------------------------------------------

FeatParser::Table_headContext::Table_headContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_headContext::HEAD() {
  return getTokens(FeatParser::HEAD);
}

tree::TerminalNode* FeatParser::Table_headContext::HEAD(size_t i) {
  return getToken(FeatParser::HEAD, i);
}

tree::TerminalNode* FeatParser::Table_headContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_headContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_headContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::HeadStatementContext *> FeatParser::Table_headContext::headStatement() {
  return getRuleContexts<FeatParser::HeadStatementContext>();
}

FeatParser::HeadStatementContext* FeatParser::Table_headContext::headStatement(size_t i) {
  return getRuleContext<FeatParser::HeadStatementContext>(i);
}


size_t FeatParser::Table_headContext::getRuleIndex() const {
  return FeatParser::RuleTable_head;
}


std::any FeatParser::Table_headContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_head(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_headContext* FeatParser::table_head() {
  Table_headContext *_localctx = _tracker.createInstance<Table_headContext>(_ctx, getState());
  enterRule(_localctx, 112, FeatParser::RuleTable_head);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(790);
    match(FeatParser::HEAD);
    setState(791);
    match(FeatParser::LCBRACE);
    setState(793); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(792);
      headStatement();
      setState(795); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::FONT_REVISION);
    setState(797);
    match(FeatParser::RCBRACE);
    setState(798);
    match(FeatParser::HEAD);
    setState(799);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HeadStatementContext ------------------------------------------------------------------

FeatParser::HeadStatementContext::HeadStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HeadStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::HeadContext* FeatParser::HeadStatementContext::head() {
  return getRuleContext<FeatParser::HeadContext>(0);
}

FeatParser::IncludeContext* FeatParser::HeadStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::HeadStatementContext::getRuleIndex() const {
  return FeatParser::RuleHeadStatement;
}


std::any FeatParser::HeadStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHeadStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HeadStatementContext* FeatParser::headStatement() {
  HeadStatementContext *_localctx = _tracker.createInstance<HeadStatementContext>(_ctx, getState());
  enterRule(_localctx, 114, FeatParser::RuleHeadStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(803);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::FONT_REVISION: {
        setState(801);
        head();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(802);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(805);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HeadContext ------------------------------------------------------------------

FeatParser::HeadContext::HeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HeadContext::FONT_REVISION() {
  return getToken(FeatParser::FONT_REVISION, 0);
}

tree::TerminalNode* FeatParser::HeadContext::POINTNUM() {
  return getToken(FeatParser::POINTNUM, 0);
}


size_t FeatParser::HeadContext::getRuleIndex() const {
  return FeatParser::RuleHead;
}


std::any FeatParser::HeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHead(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HeadContext* FeatParser::head() {
  HeadContext *_localctx = _tracker.createInstance<HeadContext>(_ctx, getState());
  enterRule(_localctx, 116, FeatParser::RuleHead);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(807);
    match(FeatParser::FONT_REVISION);
    setState(808);
    match(FeatParser::POINTNUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_hheaContext ------------------------------------------------------------------

FeatParser::Table_hheaContext::Table_hheaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_hheaContext::HHEA() {
  return getTokens(FeatParser::HHEA);
}

tree::TerminalNode* FeatParser::Table_hheaContext::HHEA(size_t i) {
  return getToken(FeatParser::HHEA, i);
}

tree::TerminalNode* FeatParser::Table_hheaContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_hheaContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_hheaContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::HheaStatementContext *> FeatParser::Table_hheaContext::hheaStatement() {
  return getRuleContexts<FeatParser::HheaStatementContext>();
}

FeatParser::HheaStatementContext* FeatParser::Table_hheaContext::hheaStatement(size_t i) {
  return getRuleContext<FeatParser::HheaStatementContext>(i);
}


size_t FeatParser::Table_hheaContext::getRuleIndex() const {
  return FeatParser::RuleTable_hhea;
}


std::any FeatParser::Table_hheaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_hhea(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_hheaContext* FeatParser::table_hhea() {
  Table_hheaContext *_localctx = _tracker.createInstance<Table_hheaContext>(_ctx, getState());
  enterRule(_localctx, 118, FeatParser::RuleTable_hhea);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(810);
    match(FeatParser::HHEA);
    setState(811);
    match(FeatParser::LCBRACE);
    setState(815);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 15) != 0)) {
      setState(812);
      hheaStatement();
      setState(817);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(818);
    match(FeatParser::RCBRACE);
    setState(819);
    match(FeatParser::HHEA);
    setState(820);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HheaStatementContext ------------------------------------------------------------------

FeatParser::HheaStatementContext::HheaStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HheaStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::HheaContext* FeatParser::HheaStatementContext::hhea() {
  return getRuleContext<FeatParser::HheaContext>(0);
}

FeatParser::IncludeContext* FeatParser::HheaStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::HheaStatementContext::getRuleIndex() const {
  return FeatParser::RuleHheaStatement;
}


std::any FeatParser::HheaStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHheaStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HheaStatementContext* FeatParser::hheaStatement() {
  HheaStatementContext *_localctx = _tracker.createInstance<HheaStatementContext>(_ctx, getState());
  enterRule(_localctx, 120, FeatParser::RuleHheaStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(824);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::ASCENDER:
      case FeatParser::DESCENDER:
      case FeatParser::LINE_GAP:
      case FeatParser::CARET_OFFSET: {
        setState(822);
        hhea();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(823);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(826);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HheaContext ------------------------------------------------------------------

FeatParser::HheaContext::HheaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HheaContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

tree::TerminalNode* FeatParser::HheaContext::CARET_OFFSET() {
  return getToken(FeatParser::CARET_OFFSET, 0);
}

tree::TerminalNode* FeatParser::HheaContext::ASCENDER() {
  return getToken(FeatParser::ASCENDER, 0);
}

tree::TerminalNode* FeatParser::HheaContext::DESCENDER() {
  return getToken(FeatParser::DESCENDER, 0);
}

tree::TerminalNode* FeatParser::HheaContext::LINE_GAP() {
  return getToken(FeatParser::LINE_GAP, 0);
}


size_t FeatParser::HheaContext::getRuleIndex() const {
  return FeatParser::RuleHhea;
}


std::any FeatParser::HheaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHhea(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HheaContext* FeatParser::hhea() {
  HheaContext *_localctx = _tracker.createInstance<HheaContext>(_ctx, getState());
  enterRule(_localctx, 122, FeatParser::RuleHhea);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(828);
    _la = _input->LA(1);
    if (!(((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(829);
    match(FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_vheaContext ------------------------------------------------------------------

FeatParser::Table_vheaContext::Table_vheaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_vheaContext::VHEA() {
  return getTokens(FeatParser::VHEA);
}

tree::TerminalNode* FeatParser::Table_vheaContext::VHEA(size_t i) {
  return getToken(FeatParser::VHEA, i);
}

tree::TerminalNode* FeatParser::Table_vheaContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_vheaContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_vheaContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::VheaStatementContext *> FeatParser::Table_vheaContext::vheaStatement() {
  return getRuleContexts<FeatParser::VheaStatementContext>();
}

FeatParser::VheaStatementContext* FeatParser::Table_vheaContext::vheaStatement(size_t i) {
  return getRuleContext<FeatParser::VheaStatementContext>(i);
}


size_t FeatParser::Table_vheaContext::getRuleIndex() const {
  return FeatParser::RuleTable_vhea;
}


std::any FeatParser::Table_vheaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_vhea(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_vheaContext* FeatParser::table_vhea() {
  Table_vheaContext *_localctx = _tracker.createInstance<Table_vheaContext>(_ctx, getState());
  enterRule(_localctx, 124, FeatParser::RuleTable_vhea);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(831);
    match(FeatParser::VHEA);
    setState(832);
    match(FeatParser::LCBRACE);
    setState(836);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & 7) != 0)) {
      setState(833);
      vheaStatement();
      setState(838);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(839);
    match(FeatParser::RCBRACE);
    setState(840);
    match(FeatParser::VHEA);
    setState(841);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VheaStatementContext ------------------------------------------------------------------

FeatParser::VheaStatementContext::VheaStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::VheaStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::VheaContext* FeatParser::VheaStatementContext::vhea() {
  return getRuleContext<FeatParser::VheaContext>(0);
}

FeatParser::IncludeContext* FeatParser::VheaStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::VheaStatementContext::getRuleIndex() const {
  return FeatParser::RuleVheaStatement;
}


std::any FeatParser::VheaStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVheaStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VheaStatementContext* FeatParser::vheaStatement() {
  VheaStatementContext *_localctx = _tracker.createInstance<VheaStatementContext>(_ctx, getState());
  enterRule(_localctx, 126, FeatParser::RuleVheaStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(845);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::VERT_TYPO_ASCENDER:
      case FeatParser::VERT_TYPO_DESCENDER:
      case FeatParser::VERT_TYPO_LINE_GAP: {
        setState(843);
        vhea();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(844);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(847);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VheaContext ------------------------------------------------------------------

FeatParser::VheaContext::VheaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::VheaContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

tree::TerminalNode* FeatParser::VheaContext::VERT_TYPO_ASCENDER() {
  return getToken(FeatParser::VERT_TYPO_ASCENDER, 0);
}

tree::TerminalNode* FeatParser::VheaContext::VERT_TYPO_DESCENDER() {
  return getToken(FeatParser::VERT_TYPO_DESCENDER, 0);
}

tree::TerminalNode* FeatParser::VheaContext::VERT_TYPO_LINE_GAP() {
  return getToken(FeatParser::VERT_TYPO_LINE_GAP, 0);
}


size_t FeatParser::VheaContext::getRuleIndex() const {
  return FeatParser::RuleVhea;
}


std::any FeatParser::VheaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVhea(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VheaContext* FeatParser::vhea() {
  VheaContext *_localctx = _tracker.createInstance<VheaContext>(_ctx, getState());
  enterRule(_localctx, 128, FeatParser::RuleVhea);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(849);
    _la = _input->LA(1);
    if (!(((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(850);
    match(FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_nameContext ------------------------------------------------------------------

FeatParser::Table_nameContext::Table_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_nameContext::NAME() {
  return getTokens(FeatParser::NAME);
}

tree::TerminalNode* FeatParser::Table_nameContext::NAME(size_t i) {
  return getToken(FeatParser::NAME, i);
}

tree::TerminalNode* FeatParser::Table_nameContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_nameContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_nameContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::NameStatementContext *> FeatParser::Table_nameContext::nameStatement() {
  return getRuleContexts<FeatParser::NameStatementContext>();
}

FeatParser::NameStatementContext* FeatParser::Table_nameContext::nameStatement(size_t i) {
  return getRuleContext<FeatParser::NameStatementContext>(i);
}


size_t FeatParser::Table_nameContext::getRuleIndex() const {
  return FeatParser::RuleTable_name;
}


std::any FeatParser::Table_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_name(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_nameContext* FeatParser::table_name() {
  Table_nameContext *_localctx = _tracker.createInstance<Table_nameContext>(_ctx, getState());
  enterRule(_localctx, 130, FeatParser::RuleTable_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(852);
    match(FeatParser::NAME);
    setState(853);
    match(FeatParser::LCBRACE);
    setState(855); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(854);
      nameStatement();
      setState(857); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::NAMEID);
    setState(859);
    match(FeatParser::RCBRACE);
    setState(860);
    match(FeatParser::NAME);
    setState(861);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameStatementContext ------------------------------------------------------------------

FeatParser::NameStatementContext::NameStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::NameIDContext* FeatParser::NameStatementContext::nameID() {
  return getRuleContext<FeatParser::NameIDContext>(0);
}

FeatParser::IncludeContext* FeatParser::NameStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::NameStatementContext::getRuleIndex() const {
  return FeatParser::RuleNameStatement;
}


std::any FeatParser::NameStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameStatementContext* FeatParser::nameStatement() {
  NameStatementContext *_localctx = _tracker.createInstance<NameStatementContext>(_ctx, getState());
  enterRule(_localctx, 132, FeatParser::RuleNameStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(865);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NAMEID: {
        setState(863);
        nameID();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(864);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(867);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameIDContext ------------------------------------------------------------------

FeatParser::NameIDContext::NameIDContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameIDContext::NAMEID() {
  return getToken(FeatParser::NAMEID, 0);
}

tree::TerminalNode* FeatParser::NameIDContext::STRVAL() {
  return getToken(FeatParser::STRVAL, 0);
}

std::vector<FeatParser::GenNumContext *> FeatParser::NameIDContext::genNum() {
  return getRuleContexts<FeatParser::GenNumContext>();
}

FeatParser::GenNumContext* FeatParser::NameIDContext::genNum(size_t i) {
  return getRuleContext<FeatParser::GenNumContext>(i);
}


size_t FeatParser::NameIDContext::getRuleIndex() const {
  return FeatParser::RuleNameID;
}


std::any FeatParser::NameIDContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameID(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameIDContext* FeatParser::nameID() {
  NameIDContext *_localctx = _tracker.createInstance<NameIDContext>(_ctx, getState());
  enterRule(_localctx, 134, FeatParser::RuleNameID);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(869);
    match(FeatParser::NAMEID);
    setState(870);
    antlrcpp::downCast<NameIDContext *>(_localctx)->id = genNum();
    setState(877);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 139) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 139)) & 7) != 0)) {
      setState(871);
      antlrcpp::downCast<NameIDContext *>(_localctx)->plat = genNum();
      setState(875);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 139) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 139)) & 7) != 0)) {
        setState(872);
        antlrcpp::downCast<NameIDContext *>(_localctx)->spec = genNum();
        setState(873);
        antlrcpp::downCast<NameIDContext *>(_localctx)->lang = genNum();
      }
    }
    setState(879);
    match(FeatParser::STRVAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_OS_2Context ------------------------------------------------------------------

FeatParser::Table_OS_2Context::Table_OS_2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_OS_2Context::OS_2() {
  return getTokens(FeatParser::OS_2);
}

tree::TerminalNode* FeatParser::Table_OS_2Context::OS_2(size_t i) {
  return getToken(FeatParser::OS_2, i);
}

tree::TerminalNode* FeatParser::Table_OS_2Context::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_OS_2Context::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_OS_2Context::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::Os_2StatementContext *> FeatParser::Table_OS_2Context::os_2Statement() {
  return getRuleContexts<FeatParser::Os_2StatementContext>();
}

FeatParser::Os_2StatementContext* FeatParser::Table_OS_2Context::os_2Statement(size_t i) {
  return getRuleContext<FeatParser::Os_2StatementContext>(i);
}


size_t FeatParser::Table_OS_2Context::getRuleIndex() const {
  return FeatParser::RuleTable_OS_2;
}


std::any FeatParser::Table_OS_2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_OS_2(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_OS_2Context* FeatParser::table_OS_2() {
  Table_OS_2Context *_localctx = _tracker.createInstance<Table_OS_2Context>(_ctx, getState());
  enterRule(_localctx, 136, FeatParser::RuleTable_OS_2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(881);
    match(FeatParser::OS_2);
    setState(882);
    match(FeatParser::LCBRACE);
    setState(884); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(883);
      os_2Statement();
      setState(886); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || ((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 262143) != 0));
    setState(888);
    match(FeatParser::RCBRACE);
    setState(889);
    match(FeatParser::OS_2);
    setState(890);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Os_2StatementContext ------------------------------------------------------------------

FeatParser::Os_2StatementContext::Os_2StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::Os_2StatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::Os_2Context* FeatParser::Os_2StatementContext::os_2() {
  return getRuleContext<FeatParser::Os_2Context>(0);
}

FeatParser::IncludeContext* FeatParser::Os_2StatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::Os_2StatementContext::getRuleIndex() const {
  return FeatParser::RuleOs_2Statement;
}


std::any FeatParser::Os_2StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitOs_2Statement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Os_2StatementContext* FeatParser::os_2Statement() {
  Os_2StatementContext *_localctx = _tracker.createInstance<Os_2StatementContext>(_ctx, getState());
  enterRule(_localctx, 138, FeatParser::RuleOs_2Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(894);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::FS_TYPE:
      case FeatParser::FS_TYPE_v:
      case FeatParser::OS2_LOWER_OP_SIZE:
      case FeatParser::OS2_UPPER_OP_SIZE:
      case FeatParser::PANOSE:
      case FeatParser::TYPO_ASCENDER:
      case FeatParser::TYPO_DESCENDER:
      case FeatParser::TYPO_LINE_GAP:
      case FeatParser::WIN_ASCENT:
      case FeatParser::WIN_DESCENT:
      case FeatParser::X_HEIGHT:
      case FeatParser::CAP_HEIGHT:
      case FeatParser::WEIGHT_CLASS:
      case FeatParser::WIDTH_CLASS:
      case FeatParser::VENDOR:
      case FeatParser::UNICODE_RANGE:
      case FeatParser::CODE_PAGE_RANGE:
      case FeatParser::FAMILY_CLASS: {
        setState(892);
        os_2();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(893);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(896);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Os_2Context ------------------------------------------------------------------

FeatParser::Os_2Context::Os_2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::Os_2Context::TYPO_ASCENDER() {
  return getToken(FeatParser::TYPO_ASCENDER, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::TYPO_DESCENDER() {
  return getToken(FeatParser::TYPO_DESCENDER, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::TYPO_LINE_GAP() {
  return getToken(FeatParser::TYPO_LINE_GAP, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::WIN_ASCENT() {
  return getToken(FeatParser::WIN_ASCENT, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::WIN_DESCENT() {
  return getToken(FeatParser::WIN_DESCENT, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::X_HEIGHT() {
  return getToken(FeatParser::X_HEIGHT, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::CAP_HEIGHT() {
  return getToken(FeatParser::CAP_HEIGHT, 0);
}

std::vector<tree::TerminalNode *> FeatParser::Os_2Context::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::Os_2Context::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}

tree::TerminalNode* FeatParser::Os_2Context::FS_TYPE() {
  return getToken(FeatParser::FS_TYPE, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::FS_TYPE_v() {
  return getToken(FeatParser::FS_TYPE_v, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::WEIGHT_CLASS() {
  return getToken(FeatParser::WEIGHT_CLASS, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::WIDTH_CLASS() {
  return getToken(FeatParser::WIDTH_CLASS, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::OS2_LOWER_OP_SIZE() {
  return getToken(FeatParser::OS2_LOWER_OP_SIZE, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::OS2_UPPER_OP_SIZE() {
  return getToken(FeatParser::OS2_UPPER_OP_SIZE, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::FAMILY_CLASS() {
  return getToken(FeatParser::FAMILY_CLASS, 0);
}

FeatParser::GenNumContext* FeatParser::Os_2Context::genNum() {
  return getRuleContext<FeatParser::GenNumContext>(0);
}

tree::TerminalNode* FeatParser::Os_2Context::VENDOR() {
  return getToken(FeatParser::VENDOR, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::STRVAL() {
  return getToken(FeatParser::STRVAL, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::PANOSE() {
  return getToken(FeatParser::PANOSE, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::UNICODE_RANGE() {
  return getToken(FeatParser::UNICODE_RANGE, 0);
}

tree::TerminalNode* FeatParser::Os_2Context::CODE_PAGE_RANGE() {
  return getToken(FeatParser::CODE_PAGE_RANGE, 0);
}


size_t FeatParser::Os_2Context::getRuleIndex() const {
  return FeatParser::RuleOs_2;
}


std::any FeatParser::Os_2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitOs_2(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Os_2Context* FeatParser::os_2() {
  Os_2Context *_localctx = _tracker.createInstance<Os_2Context>(_ctx, getState());
  enterRule(_localctx, 140, FeatParser::RuleOs_2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(923);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::TYPO_ASCENDER:
      case FeatParser::TYPO_DESCENDER:
      case FeatParser::TYPO_LINE_GAP:
      case FeatParser::WIN_ASCENT:
      case FeatParser::WIN_DESCENT:
      case FeatParser::X_HEIGHT:
      case FeatParser::CAP_HEIGHT: {
        enterOuterAlt(_localctx, 1);
        setState(898);
        _la = _input->LA(1);
        if (!(((((_la - 88) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 88)) & 127) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(899);
        antlrcpp::downCast<Os_2Context *>(_localctx)->num = match(FeatParser::NUM);
        break;
      }

      case FeatParser::FS_TYPE:
      case FeatParser::FS_TYPE_v:
      case FeatParser::OS2_LOWER_OP_SIZE:
      case FeatParser::OS2_UPPER_OP_SIZE:
      case FeatParser::WEIGHT_CLASS:
      case FeatParser::WIDTH_CLASS: {
        enterOuterAlt(_localctx, 2);
        setState(900);
        _la = _input->LA(1);
        if (!(((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 12303) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(901);
        antlrcpp::downCast<Os_2Context *>(_localctx)->unum = match(FeatParser::NUM);
        break;
      }

      case FeatParser::FAMILY_CLASS: {
        enterOuterAlt(_localctx, 3);
        setState(902);
        match(FeatParser::FAMILY_CLASS);
        setState(903);
        antlrcpp::downCast<Os_2Context *>(_localctx)->gnum = genNum();
        break;
      }

      case FeatParser::VENDOR: {
        enterOuterAlt(_localctx, 4);
        setState(904);
        match(FeatParser::VENDOR);
        setState(905);
        match(FeatParser::STRVAL);
        break;
      }

      case FeatParser::PANOSE: {
        enterOuterAlt(_localctx, 5);
        setState(906);
        match(FeatParser::PANOSE);
        setState(907);
        match(FeatParser::NUM);
        setState(908);
        match(FeatParser::NUM);
        setState(909);
        match(FeatParser::NUM);
        setState(910);
        match(FeatParser::NUM);
        setState(911);
        match(FeatParser::NUM);
        setState(912);
        match(FeatParser::NUM);
        setState(913);
        match(FeatParser::NUM);
        setState(914);
        match(FeatParser::NUM);
        setState(915);
        match(FeatParser::NUM);
        setState(916);
        match(FeatParser::NUM);
        break;
      }

      case FeatParser::UNICODE_RANGE:
      case FeatParser::CODE_PAGE_RANGE: {
        enterOuterAlt(_localctx, 6);
        setState(917);
        _la = _input->LA(1);
        if (!(_la == FeatParser::UNICODE_RANGE

        || _la == FeatParser::CODE_PAGE_RANGE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(919); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(918);
          match(FeatParser::NUM);
          setState(921); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FeatParser::NUM);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_STATContext ------------------------------------------------------------------

FeatParser::Table_STATContext::Table_STATContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_STATContext::STAT() {
  return getTokens(FeatParser::STAT);
}

tree::TerminalNode* FeatParser::Table_STATContext::STAT(size_t i) {
  return getToken(FeatParser::STAT, i);
}

tree::TerminalNode* FeatParser::Table_STATContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_STATContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_STATContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::StatStatementContext *> FeatParser::Table_STATContext::statStatement() {
  return getRuleContexts<FeatParser::StatStatementContext>();
}

FeatParser::StatStatementContext* FeatParser::Table_STATContext::statStatement(size_t i) {
  return getRuleContext<FeatParser::StatStatementContext>(i);
}


size_t FeatParser::Table_STATContext::getRuleIndex() const {
  return FeatParser::RuleTable_STAT;
}


std::any FeatParser::Table_STATContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_STAT(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_STATContext* FeatParser::table_STAT() {
  Table_STATContext *_localctx = _tracker.createInstance<Table_STATContext>(_ctx, getState());
  enterRule(_localctx, 142, FeatParser::RuleTable_STAT);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(925);
    match(FeatParser::STAT);
    setState(926);
    match(FeatParser::LCBRACE);
    setState(928); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(927);
      statStatement();
      setState(930); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || ((((_la - 102) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 102)) & 15) != 0));
    setState(932);
    match(FeatParser::RCBRACE);
    setState(933);
    match(FeatParser::STAT);
    setState(934);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatStatementContext ------------------------------------------------------------------

FeatParser::StatStatementContext::StatStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::StatStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::DesignAxisContext* FeatParser::StatStatementContext::designAxis() {
  return getRuleContext<FeatParser::DesignAxisContext>(0);
}

FeatParser::AxisValueContext* FeatParser::StatStatementContext::axisValue() {
  return getRuleContext<FeatParser::AxisValueContext>(0);
}

FeatParser::ElidedFallbackNameContext* FeatParser::StatStatementContext::elidedFallbackName() {
  return getRuleContext<FeatParser::ElidedFallbackNameContext>(0);
}

FeatParser::ElidedFallbackNameIDContext* FeatParser::StatStatementContext::elidedFallbackNameID() {
  return getRuleContext<FeatParser::ElidedFallbackNameIDContext>(0);
}

FeatParser::IncludeContext* FeatParser::StatStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::StatStatementContext::getRuleIndex() const {
  return FeatParser::RuleStatStatement;
}


std::any FeatParser::StatStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitStatStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::StatStatementContext* FeatParser::statStatement() {
  StatStatementContext *_localctx = _tracker.createInstance<StatStatementContext>(_ctx, getState());
  enterRule(_localctx, 144, FeatParser::RuleStatStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(941);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::DESIGN_AXIS: {
        setState(936);
        designAxis();
        break;
      }

      case FeatParser::AXIS_VALUE: {
        setState(937);
        axisValue();
        break;
      }

      case FeatParser::ELIDED_FALLBACK_NAME: {
        setState(938);
        elidedFallbackName();
        break;
      }

      case FeatParser::ELIDED_FALLBACK_NAME_ID: {
        setState(939);
        elidedFallbackNameID();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(940);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(943);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignAxisContext ------------------------------------------------------------------

FeatParser::DesignAxisContext::DesignAxisContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::DesignAxisContext::DESIGN_AXIS() {
  return getToken(FeatParser::DESIGN_AXIS, 0);
}

FeatParser::TagContext* FeatParser::DesignAxisContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}

tree::TerminalNode* FeatParser::DesignAxisContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

tree::TerminalNode* FeatParser::DesignAxisContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::DesignAxisContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

std::vector<FeatParser::NameEntryStatementContext *> FeatParser::DesignAxisContext::nameEntryStatement() {
  return getRuleContexts<FeatParser::NameEntryStatementContext>();
}

FeatParser::NameEntryStatementContext* FeatParser::DesignAxisContext::nameEntryStatement(size_t i) {
  return getRuleContext<FeatParser::NameEntryStatementContext>(i);
}


size_t FeatParser::DesignAxisContext::getRuleIndex() const {
  return FeatParser::RuleDesignAxis;
}


std::any FeatParser::DesignAxisContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitDesignAxis(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::DesignAxisContext* FeatParser::designAxis() {
  DesignAxisContext *_localctx = _tracker.createInstance<DesignAxisContext>(_ctx, getState());
  enterRule(_localctx, 146, FeatParser::RuleDesignAxis);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(945);
    match(FeatParser::DESIGN_AXIS);
    setState(946);
    tag();
    setState(947);
    match(FeatParser::NUM);
    setState(948);
    match(FeatParser::LCBRACE);
    setState(950); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(949);
      nameEntryStatement();
      setState(952); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::NAME);
    setState(954);
    match(FeatParser::RCBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisValueContext ------------------------------------------------------------------

FeatParser::AxisValueContext::AxisValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisValueContext::AXIS_VALUE() {
  return getToken(FeatParser::AXIS_VALUE, 0);
}

tree::TerminalNode* FeatParser::AxisValueContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::AxisValueContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

std::vector<FeatParser::AxisValueStatementContext *> FeatParser::AxisValueContext::axisValueStatement() {
  return getRuleContexts<FeatParser::AxisValueStatementContext>();
}

FeatParser::AxisValueStatementContext* FeatParser::AxisValueContext::axisValueStatement(size_t i) {
  return getRuleContext<FeatParser::AxisValueStatementContext>(i);
}


size_t FeatParser::AxisValueContext::getRuleIndex() const {
  return FeatParser::RuleAxisValue;
}


std::any FeatParser::AxisValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisValue(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisValueContext* FeatParser::axisValue() {
  AxisValueContext *_localctx = _tracker.createInstance<AxisValueContext>(_ctx, getState());
  enterRule(_localctx, 148, FeatParser::RuleAxisValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(956);
    match(FeatParser::AXIS_VALUE);
    setState(957);
    match(FeatParser::LCBRACE);
    setState(959); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(958);
      axisValueStatement();
      setState(961); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 201326593) != 0));
    setState(963);
    match(FeatParser::RCBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisValueStatementContext ------------------------------------------------------------------

FeatParser::AxisValueStatementContext::AxisValueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisValueStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::NameEntryContext* FeatParser::AxisValueStatementContext::nameEntry() {
  return getRuleContext<FeatParser::NameEntryContext>(0);
}

FeatParser::AxisValueLocationContext* FeatParser::AxisValueStatementContext::axisValueLocation() {
  return getRuleContext<FeatParser::AxisValueLocationContext>(0);
}

FeatParser::AxisValueFlagsContext* FeatParser::AxisValueStatementContext::axisValueFlags() {
  return getRuleContext<FeatParser::AxisValueFlagsContext>(0);
}

FeatParser::IncludeContext* FeatParser::AxisValueStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::AxisValueStatementContext::getRuleIndex() const {
  return FeatParser::RuleAxisValueStatement;
}


std::any FeatParser::AxisValueStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisValueStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisValueStatementContext* FeatParser::axisValueStatement() {
  AxisValueStatementContext *_localctx = _tracker.createInstance<AxisValueStatementContext>(_ctx, getState());
  enterRule(_localctx, 150, FeatParser::RuleAxisValueStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(969);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NAME: {
        setState(965);
        nameEntry();
        break;
      }

      case FeatParser::LOCATION: {
        setState(966);
        axisValueLocation();
        break;
      }

      case FeatParser::FLAG: {
        setState(967);
        axisValueFlags();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(968);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(971);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisValueLocationContext ------------------------------------------------------------------

FeatParser::AxisValueLocationContext::AxisValueLocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisValueLocationContext::LOCATION() {
  return getToken(FeatParser::LOCATION, 0);
}

FeatParser::TagContext* FeatParser::AxisValueLocationContext::tag() {
  return getRuleContext<FeatParser::TagContext>(0);
}

std::vector<FeatParser::FixedNumContext *> FeatParser::AxisValueLocationContext::fixedNum() {
  return getRuleContexts<FeatParser::FixedNumContext>();
}

FeatParser::FixedNumContext* FeatParser::AxisValueLocationContext::fixedNum(size_t i) {
  return getRuleContext<FeatParser::FixedNumContext>(i);
}


size_t FeatParser::AxisValueLocationContext::getRuleIndex() const {
  return FeatParser::RuleAxisValueLocation;
}


std::any FeatParser::AxisValueLocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisValueLocation(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisValueLocationContext* FeatParser::axisValueLocation() {
  AxisValueLocationContext *_localctx = _tracker.createInstance<AxisValueLocationContext>(_ctx, getState());
  enterRule(_localctx, 152, FeatParser::RuleAxisValueLocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(973);
    match(FeatParser::LOCATION);
    setState(974);
    tag();
    setState(975);
    fixedNum();
    setState(980);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::POINTNUM

    || _la == FeatParser::NUM) {
      setState(976);
      fixedNum();
      setState(978);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FeatParser::POINTNUM

      || _la == FeatParser::NUM) {
        setState(977);
        fixedNum();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisValueFlagsContext ------------------------------------------------------------------

FeatParser::AxisValueFlagsContext::AxisValueFlagsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisValueFlagsContext::FLAG() {
  return getToken(FeatParser::FLAG, 0);
}

std::vector<tree::TerminalNode *> FeatParser::AxisValueFlagsContext::AXIS_OSFA() {
  return getTokens(FeatParser::AXIS_OSFA);
}

tree::TerminalNode* FeatParser::AxisValueFlagsContext::AXIS_OSFA(size_t i) {
  return getToken(FeatParser::AXIS_OSFA, i);
}

std::vector<tree::TerminalNode *> FeatParser::AxisValueFlagsContext::AXIS_EAVN() {
  return getTokens(FeatParser::AXIS_EAVN);
}

tree::TerminalNode* FeatParser::AxisValueFlagsContext::AXIS_EAVN(size_t i) {
  return getToken(FeatParser::AXIS_EAVN, i);
}


size_t FeatParser::AxisValueFlagsContext::getRuleIndex() const {
  return FeatParser::RuleAxisValueFlags;
}


std::any FeatParser::AxisValueFlagsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisValueFlags(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisValueFlagsContext* FeatParser::axisValueFlags() {
  AxisValueFlagsContext *_localctx = _tracker.createInstance<AxisValueFlagsContext>(_ctx, getState());
  enterRule(_localctx, 154, FeatParser::RuleAxisValueFlags);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    match(FeatParser::FLAG);
    setState(984); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(983);
      _la = _input->LA(1);
      if (!(_la == FeatParser::AXIS_EAVN

      || _la == FeatParser::AXIS_OSFA)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(986); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::AXIS_EAVN

    || _la == FeatParser::AXIS_OSFA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElidedFallbackNameContext ------------------------------------------------------------------

FeatParser::ElidedFallbackNameContext::ElidedFallbackNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ElidedFallbackNameContext::ELIDED_FALLBACK_NAME() {
  return getToken(FeatParser::ELIDED_FALLBACK_NAME, 0);
}

tree::TerminalNode* FeatParser::ElidedFallbackNameContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::ElidedFallbackNameContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

std::vector<FeatParser::NameEntryStatementContext *> FeatParser::ElidedFallbackNameContext::nameEntryStatement() {
  return getRuleContexts<FeatParser::NameEntryStatementContext>();
}

FeatParser::NameEntryStatementContext* FeatParser::ElidedFallbackNameContext::nameEntryStatement(size_t i) {
  return getRuleContext<FeatParser::NameEntryStatementContext>(i);
}


size_t FeatParser::ElidedFallbackNameContext::getRuleIndex() const {
  return FeatParser::RuleElidedFallbackName;
}


std::any FeatParser::ElidedFallbackNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitElidedFallbackName(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ElidedFallbackNameContext* FeatParser::elidedFallbackName() {
  ElidedFallbackNameContext *_localctx = _tracker.createInstance<ElidedFallbackNameContext>(_ctx, getState());
  enterRule(_localctx, 156, FeatParser::RuleElidedFallbackName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(988);
    match(FeatParser::ELIDED_FALLBACK_NAME);
    setState(989);
    match(FeatParser::LCBRACE);
    setState(991); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(990);
      nameEntryStatement();
      setState(993); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::NAME);
    setState(995);
    match(FeatParser::RCBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameEntryStatementContext ------------------------------------------------------------------

FeatParser::NameEntryStatementContext::NameEntryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameEntryStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::NameEntryContext* FeatParser::NameEntryStatementContext::nameEntry() {
  return getRuleContext<FeatParser::NameEntryContext>(0);
}

FeatParser::IncludeContext* FeatParser::NameEntryStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::NameEntryStatementContext::getRuleIndex() const {
  return FeatParser::RuleNameEntryStatement;
}


std::any FeatParser::NameEntryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameEntryStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameEntryStatementContext* FeatParser::nameEntryStatement() {
  NameEntryStatementContext *_localctx = _tracker.createInstance<NameEntryStatementContext>(_ctx, getState());
  enterRule(_localctx, 158, FeatParser::RuleNameEntryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(999);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NAME: {
        setState(997);
        nameEntry();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(998);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1001);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElidedFallbackNameIDContext ------------------------------------------------------------------

FeatParser::ElidedFallbackNameIDContext::ElidedFallbackNameIDContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::ElidedFallbackNameIDContext::ELIDED_FALLBACK_NAME_ID() {
  return getToken(FeatParser::ELIDED_FALLBACK_NAME_ID, 0);
}

FeatParser::GenNumContext* FeatParser::ElidedFallbackNameIDContext::genNum() {
  return getRuleContext<FeatParser::GenNumContext>(0);
}


size_t FeatParser::ElidedFallbackNameIDContext::getRuleIndex() const {
  return FeatParser::RuleElidedFallbackNameID;
}


std::any FeatParser::ElidedFallbackNameIDContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitElidedFallbackNameID(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::ElidedFallbackNameIDContext* FeatParser::elidedFallbackNameID() {
  ElidedFallbackNameIDContext *_localctx = _tracker.createInstance<ElidedFallbackNameIDContext>(_ctx, getState());
  enterRule(_localctx, 160, FeatParser::RuleElidedFallbackNameID);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1003);
    match(FeatParser::ELIDED_FALLBACK_NAME_ID);
    setState(1004);
    genNum();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameEntryContext ------------------------------------------------------------------

FeatParser::NameEntryContext::NameEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameEntryContext::NAME() {
  return getToken(FeatParser::NAME, 0);
}

tree::TerminalNode* FeatParser::NameEntryContext::STRVAL() {
  return getToken(FeatParser::STRVAL, 0);
}

std::vector<FeatParser::GenNumContext *> FeatParser::NameEntryContext::genNum() {
  return getRuleContexts<FeatParser::GenNumContext>();
}

FeatParser::GenNumContext* FeatParser::NameEntryContext::genNum(size_t i) {
  return getRuleContext<FeatParser::GenNumContext>(i);
}


size_t FeatParser::NameEntryContext::getRuleIndex() const {
  return FeatParser::RuleNameEntry;
}


std::any FeatParser::NameEntryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameEntry(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameEntryContext* FeatParser::nameEntry() {
  NameEntryContext *_localctx = _tracker.createInstance<NameEntryContext>(_ctx, getState());
  enterRule(_localctx, 162, FeatParser::RuleNameEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1006);
    match(FeatParser::NAME);
    setState(1013);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 139) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 139)) & 7) != 0)) {
      setState(1007);
      genNum();
      setState(1011);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 139) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 139)) & 7) != 0)) {
        setState(1008);
        genNum();
        setState(1009);
        genNum();
      }
    }
    setState(1015);
    match(FeatParser::STRVAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_vmtxContext ------------------------------------------------------------------

FeatParser::Table_vmtxContext::Table_vmtxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FeatParser::Table_vmtxContext::VMTX() {
  return getTokens(FeatParser::VMTX);
}

tree::TerminalNode* FeatParser::Table_vmtxContext::VMTX(size_t i) {
  return getToken(FeatParser::VMTX, i);
}

tree::TerminalNode* FeatParser::Table_vmtxContext::LCBRACE() {
  return getToken(FeatParser::LCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_vmtxContext::RCBRACE() {
  return getToken(FeatParser::RCBRACE, 0);
}

tree::TerminalNode* FeatParser::Table_vmtxContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

std::vector<FeatParser::VmtxStatementContext *> FeatParser::Table_vmtxContext::vmtxStatement() {
  return getRuleContexts<FeatParser::VmtxStatementContext>();
}

FeatParser::VmtxStatementContext* FeatParser::Table_vmtxContext::vmtxStatement(size_t i) {
  return getRuleContext<FeatParser::VmtxStatementContext>(i);
}


size_t FeatParser::Table_vmtxContext::getRuleIndex() const {
  return FeatParser::RuleTable_vmtx;
}


std::any FeatParser::Table_vmtxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTable_vmtx(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Table_vmtxContext* FeatParser::table_vmtx() {
  Table_vmtxContext *_localctx = _tracker.createInstance<Table_vmtxContext>(_ctx, getState());
  enterRule(_localctx, 164, FeatParser::RuleTable_vmtx);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1017);
    match(FeatParser::VMTX);
    setState(1018);
    match(FeatParser::LCBRACE);
    setState(1020); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1019);
      vmtxStatement();
      setState(1022); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::INCLUDE || _la == FeatParser::VERT_ORIGIN_Y

    || _la == FeatParser::VERT_ADVANCE_Y);
    setState(1024);
    match(FeatParser::RCBRACE);
    setState(1025);
    match(FeatParser::VMTX);
    setState(1026);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VmtxStatementContext ------------------------------------------------------------------

FeatParser::VmtxStatementContext::VmtxStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::VmtxStatementContext::SEMI() {
  return getToken(FeatParser::SEMI, 0);
}

FeatParser::VmtxContext* FeatParser::VmtxStatementContext::vmtx() {
  return getRuleContext<FeatParser::VmtxContext>(0);
}

FeatParser::IncludeContext* FeatParser::VmtxStatementContext::include() {
  return getRuleContext<FeatParser::IncludeContext>(0);
}


size_t FeatParser::VmtxStatementContext::getRuleIndex() const {
  return FeatParser::RuleVmtxStatement;
}


std::any FeatParser::VmtxStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVmtxStatement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VmtxStatementContext* FeatParser::vmtxStatement() {
  VmtxStatementContext *_localctx = _tracker.createInstance<VmtxStatementContext>(_ctx, getState());
  enterRule(_localctx, 166, FeatParser::RuleVmtxStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1030);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::VERT_ORIGIN_Y:
      case FeatParser::VERT_ADVANCE_Y: {
        setState(1028);
        vmtx();
        break;
      }

      case FeatParser::INCLUDE: {
        setState(1029);
        include();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1032);
    match(FeatParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VmtxContext ------------------------------------------------------------------

FeatParser::VmtxContext::VmtxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::GlyphContext* FeatParser::VmtxContext::glyph() {
  return getRuleContext<FeatParser::GlyphContext>(0);
}

tree::TerminalNode* FeatParser::VmtxContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

tree::TerminalNode* FeatParser::VmtxContext::VERT_ORIGIN_Y() {
  return getToken(FeatParser::VERT_ORIGIN_Y, 0);
}

tree::TerminalNode* FeatParser::VmtxContext::VERT_ADVANCE_Y() {
  return getToken(FeatParser::VERT_ADVANCE_Y, 0);
}


size_t FeatParser::VmtxContext::getRuleIndex() const {
  return FeatParser::RuleVmtx;
}


std::any FeatParser::VmtxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVmtx(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VmtxContext* FeatParser::vmtx() {
  VmtxContext *_localctx = _tracker.createInstance<VmtxContext>(_ctx, getState());
  enterRule(_localctx, 168, FeatParser::RuleVmtx);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1034);
    _la = _input->LA(1);
    if (!(_la == FeatParser::VERT_ORIGIN_Y

    || _la == FeatParser::VERT_ADVANCE_Y)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1035);
    glyph();
    setState(1036);
    match(FeatParser::NUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnchorContext ------------------------------------------------------------------

FeatParser::AnchorContext::AnchorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AnchorContext::BEGINVALUE() {
  return getToken(FeatParser::BEGINVALUE, 0);
}

tree::TerminalNode* FeatParser::AnchorContext::ANCHOR() {
  return getToken(FeatParser::ANCHOR, 0);
}

tree::TerminalNode* FeatParser::AnchorContext::ENDVALUE() {
  return getToken(FeatParser::ENDVALUE, 0);
}

FeatParser::AnchorLiteralContext* FeatParser::AnchorContext::anchorLiteral() {
  return getRuleContext<FeatParser::AnchorLiteralContext>(0);
}

tree::TerminalNode* FeatParser::AnchorContext::KNULL() {
  return getToken(FeatParser::KNULL, 0);
}

FeatParser::LabelContext* FeatParser::AnchorContext::label() {
  return getRuleContext<FeatParser::LabelContext>(0);
}


size_t FeatParser::AnchorContext::getRuleIndex() const {
  return FeatParser::RuleAnchor;
}


std::any FeatParser::AnchorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnchor(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnchorContext* FeatParser::anchor() {
  AnchorContext *_localctx = _tracker.createInstance<AnchorContext>(_ctx, getState());
  enterRule(_localctx, 170, FeatParser::RuleAnchor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1038);
    match(FeatParser::BEGINVALUE);
    setState(1039);
    match(FeatParser::ANCHOR);
    setState(1043);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::LPAREN:
      case FeatParser::NUM: {
        setState(1040);
        anchorLiteral();
        break;
      }

      case FeatParser::KNULL: {
        setState(1041);
        match(FeatParser::KNULL);
        break;
      }

      case FeatParser::MARK:
      case FeatParser::AXISUNIT:
      case FeatParser::NAMELABEL: {
        setState(1042);
        antlrcpp::downCast<AnchorContext *>(_localctx)->name = label();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1045);
    match(FeatParser::ENDVALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnchorLiteralContext ------------------------------------------------------------------

FeatParser::AnchorLiteralContext::AnchorLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::AnchorLiteralXYContext* FeatParser::AnchorLiteralContext::anchorLiteralXY() {
  return getRuleContext<FeatParser::AnchorLiteralXYContext>(0);
}

tree::TerminalNode* FeatParser::AnchorLiteralContext::CONTOURPOINT() {
  return getToken(FeatParser::CONTOURPOINT, 0);
}

tree::TerminalNode* FeatParser::AnchorLiteralContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}


size_t FeatParser::AnchorLiteralContext::getRuleIndex() const {
  return FeatParser::RuleAnchorLiteral;
}


std::any FeatParser::AnchorLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnchorLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnchorLiteralContext* FeatParser::anchorLiteral() {
  AnchorLiteralContext *_localctx = _tracker.createInstance<AnchorLiteralContext>(_ctx, getState());
  enterRule(_localctx, 172, FeatParser::RuleAnchorLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1047);
    anchorLiteralXY();
    setState(1050);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::CONTOURPOINT) {
      setState(1048);
      match(FeatParser::CONTOURPOINT);
      setState(1049);
      antlrcpp::downCast<AnchorLiteralContext *>(_localctx)->cp = match(FeatParser::NUM);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnchorLiteralXYContext ------------------------------------------------------------------

FeatParser::AnchorLiteralXYContext::AnchorLiteralXYContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::SingleValueLiteralContext *> FeatParser::AnchorLiteralXYContext::singleValueLiteral() {
  return getRuleContexts<FeatParser::SingleValueLiteralContext>();
}

FeatParser::SingleValueLiteralContext* FeatParser::AnchorLiteralXYContext::singleValueLiteral(size_t i) {
  return getRuleContext<FeatParser::SingleValueLiteralContext>(i);
}

tree::TerminalNode* FeatParser::AnchorLiteralXYContext::LPAREN() {
  return getToken(FeatParser::LPAREN, 0);
}

tree::TerminalNode* FeatParser::AnchorLiteralXYContext::RPAREN() {
  return getToken(FeatParser::RPAREN, 0);
}

std::vector<FeatParser::AnchorMultiValueLiteralContext *> FeatParser::AnchorLiteralXYContext::anchorMultiValueLiteral() {
  return getRuleContexts<FeatParser::AnchorMultiValueLiteralContext>();
}

FeatParser::AnchorMultiValueLiteralContext* FeatParser::AnchorLiteralXYContext::anchorMultiValueLiteral(size_t i) {
  return getRuleContext<FeatParser::AnchorMultiValueLiteralContext>(i);
}


size_t FeatParser::AnchorLiteralXYContext::getRuleIndex() const {
  return FeatParser::RuleAnchorLiteralXY;
}


std::any FeatParser::AnchorLiteralXYContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnchorLiteralXY(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnchorLiteralXYContext* FeatParser::anchorLiteralXY() {
  AnchorLiteralXYContext *_localctx = _tracker.createInstance<AnchorLiteralXYContext>(_ctx, getState());
  enterRule(_localctx, 174, FeatParser::RuleAnchorLiteralXY);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1063);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1052);
      antlrcpp::downCast<AnchorLiteralXYContext *>(_localctx)->xval = singleValueLiteral();
      setState(1053);
      antlrcpp::downCast<AnchorLiteralXYContext *>(_localctx)->yval = singleValueLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1055);
      match(FeatParser::LPAREN);
      setState(1057); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1056);
        anchorMultiValueLiteral();
        setState(1059); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FeatParser::BEGINVALUE

      || _la == FeatParser::MARK || ((((_la - 130) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 130)) & 203) != 0));
      setState(1061);
      match(FeatParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnchorMultiValueLiteralContext ------------------------------------------------------------------

FeatParser::AnchorMultiValueLiteralContext::AnchorMultiValueLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AnchorMultiValueLiteralContext::BEGINVALUE() {
  return getToken(FeatParser::BEGINVALUE, 0);
}

std::vector<tree::TerminalNode *> FeatParser::AnchorMultiValueLiteralContext::NUM() {
  return getTokens(FeatParser::NUM);
}

tree::TerminalNode* FeatParser::AnchorMultiValueLiteralContext::NUM(size_t i) {
  return getToken(FeatParser::NUM, i);
}

tree::TerminalNode* FeatParser::AnchorMultiValueLiteralContext::ENDVALUE() {
  return getToken(FeatParser::ENDVALUE, 0);
}

FeatParser::LocationSpecifierContext* FeatParser::AnchorMultiValueLiteralContext::locationSpecifier() {
  return getRuleContext<FeatParser::LocationSpecifierContext>(0);
}

tree::TerminalNode* FeatParser::AnchorMultiValueLiteralContext::COLON() {
  return getToken(FeatParser::COLON, 0);
}


size_t FeatParser::AnchorMultiValueLiteralContext::getRuleIndex() const {
  return FeatParser::RuleAnchorMultiValueLiteral;
}


std::any FeatParser::AnchorMultiValueLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnchorMultiValueLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnchorMultiValueLiteralContext* FeatParser::anchorMultiValueLiteral() {
  AnchorMultiValueLiteralContext *_localctx = _tracker.createInstance<AnchorMultiValueLiteralContext>(_ctx, getState());
  enterRule(_localctx, 176, FeatParser::RuleAnchorMultiValueLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARK || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 203) != 0)) {
      setState(1065);
      locationSpecifier();
      setState(1066);
      match(FeatParser::COLON);
    }
    setState(1070);
    match(FeatParser::BEGINVALUE);
    setState(1071);
    match(FeatParser::NUM);
    setState(1072);
    match(FeatParser::NUM);
    setState(1073);
    match(FeatParser::ENDVALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupPatternContext ------------------------------------------------------------------

FeatParser::LookupPatternContext::LookupPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::LookupPatternElementContext *> FeatParser::LookupPatternContext::lookupPatternElement() {
  return getRuleContexts<FeatParser::LookupPatternElementContext>();
}

FeatParser::LookupPatternElementContext* FeatParser::LookupPatternContext::lookupPatternElement(size_t i) {
  return getRuleContext<FeatParser::LookupPatternElementContext>(i);
}


size_t FeatParser::LookupPatternContext::getRuleIndex() const {
  return FeatParser::RuleLookupPattern;
}


std::any FeatParser::LookupPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupPattern(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupPatternContext* FeatParser::lookupPattern() {
  LookupPatternContext *_localctx = _tracker.createInstance<LookupPatternContext>(_ctx, getState());
  enterRule(_localctx, 178, FeatParser::RuleLookupPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1076); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1075);
      lookupPatternElement();
      setState(1078); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NOTDEF || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 520193) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LookupPatternElementContext ------------------------------------------------------------------

FeatParser::LookupPatternElementContext::LookupPatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::PatternElementContext* FeatParser::LookupPatternElementContext::patternElement() {
  return getRuleContext<FeatParser::PatternElementContext>(0);
}

std::vector<tree::TerminalNode *> FeatParser::LookupPatternElementContext::LOOKUP() {
  return getTokens(FeatParser::LOOKUP);
}

tree::TerminalNode* FeatParser::LookupPatternElementContext::LOOKUP(size_t i) {
  return getToken(FeatParser::LOOKUP, i);
}

std::vector<FeatParser::LabelContext *> FeatParser::LookupPatternElementContext::label() {
  return getRuleContexts<FeatParser::LabelContext>();
}

FeatParser::LabelContext* FeatParser::LookupPatternElementContext::label(size_t i) {
  return getRuleContext<FeatParser::LabelContext>(i);
}


size_t FeatParser::LookupPatternElementContext::getRuleIndex() const {
  return FeatParser::RuleLookupPatternElement;
}


std::any FeatParser::LookupPatternElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLookupPatternElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LookupPatternElementContext* FeatParser::lookupPatternElement() {
  LookupPatternElementContext *_localctx = _tracker.createInstance<LookupPatternElementContext>(_ctx, getState());
  enterRule(_localctx, 180, FeatParser::RuleLookupPatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1080);
    patternElement();
    setState(1085);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::LOOKUP) {
      setState(1081);
      match(FeatParser::LOOKUP);
      setState(1082);
      label();
      setState(1087);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

FeatParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::PatternElementContext *> FeatParser::PatternContext::patternElement() {
  return getRuleContexts<FeatParser::PatternElementContext>();
}

FeatParser::PatternElementContext* FeatParser::PatternContext::patternElement(size_t i) {
  return getRuleContext<FeatParser::PatternElementContext>(i);
}


size_t FeatParser::PatternContext::getRuleIndex() const {
  return FeatParser::RulePattern;
}


std::any FeatParser::PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitPattern(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::PatternContext* FeatParser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 182, FeatParser::RulePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1089); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1088);
      patternElement();
      setState(1091); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NOTDEF || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 520193) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternElementContext ------------------------------------------------------------------

FeatParser::PatternElementContext::PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::GlyphClassContext* FeatParser::PatternElementContext::glyphClass() {
  return getRuleContext<FeatParser::GlyphClassContext>(0);
}

FeatParser::GlyphContext* FeatParser::PatternElementContext::glyph() {
  return getRuleContext<FeatParser::GlyphContext>(0);
}

tree::TerminalNode* FeatParser::PatternElementContext::MARKER() {
  return getToken(FeatParser::MARKER, 0);
}


size_t FeatParser::PatternElementContext::getRuleIndex() const {
  return FeatParser::RulePatternElement;
}


std::any FeatParser::PatternElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitPatternElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::PatternElementContext* FeatParser::patternElement() {
  PatternElementContext *_localctx = _tracker.createInstance<PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 184, FeatParser::RulePatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1095);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::LBRACKET:
      case FeatParser::LNAME:
      case FeatParser::GCLASS: {
        setState(1093);
        glyphClass();
        break;
      }

      case FeatParser::NOTDEF:
      case FeatParser::AXISUNIT:
      case FeatParser::CID:
      case FeatParser::ESCGNAME:
      case FeatParser::NAMELABEL:
      case FeatParser::EXTNAME: {
        setState(1094);
        glyph();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1098);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FeatParser::MARKER) {
      setState(1097);
      match(FeatParser::MARKER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlyphClassOptionalContext ------------------------------------------------------------------

FeatParser::GlyphClassOptionalContext::GlyphClassOptionalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::GlyphClassContext* FeatParser::GlyphClassOptionalContext::glyphClass() {
  return getRuleContext<FeatParser::GlyphClassContext>(0);
}


size_t FeatParser::GlyphClassOptionalContext::getRuleIndex() const {
  return FeatParser::RuleGlyphClassOptional;
}


std::any FeatParser::GlyphClassOptionalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGlyphClassOptional(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GlyphClassOptionalContext* FeatParser::glyphClassOptional() {
  GlyphClassOptionalContext *_localctx = _tracker.createInstance<GlyphClassOptionalContext>(_ctx, getState());
  enterRule(_localctx, 186, FeatParser::RuleGlyphClassOptional);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1101);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 12289) != 0)) {
      setState(1100);
      glyphClass();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlyphClassContext ------------------------------------------------------------------

FeatParser::GlyphClassContext::GlyphClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::GclassContext* FeatParser::GlyphClassContext::gclass() {
  return getRuleContext<FeatParser::GclassContext>(0);
}

FeatParser::GcLiteralContext* FeatParser::GlyphClassContext::gcLiteral() {
  return getRuleContext<FeatParser::GcLiteralContext>(0);
}


size_t FeatParser::GlyphClassContext::getRuleIndex() const {
  return FeatParser::RuleGlyphClass;
}


std::any FeatParser::GlyphClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGlyphClass(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GlyphClassContext* FeatParser::glyphClass() {
  GlyphClassContext *_localctx = _tracker.createInstance<GlyphClassContext>(_ctx, getState());
  enterRule(_localctx, 188, FeatParser::RuleGlyphClass);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1105);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::LNAME:
      case FeatParser::GCLASS: {
        enterOuterAlt(_localctx, 1);
        setState(1103);
        gclass();
        break;
      }

      case FeatParser::LBRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(1104);
        gcLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GcLiteralContext ------------------------------------------------------------------

FeatParser::GcLiteralContext::GcLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GcLiteralContext::LBRACKET() {
  return getToken(FeatParser::LBRACKET, 0);
}

tree::TerminalNode* FeatParser::GcLiteralContext::RBRACKET() {
  return getToken(FeatParser::RBRACKET, 0);
}

std::vector<FeatParser::GcLiteralElementContext *> FeatParser::GcLiteralContext::gcLiteralElement() {
  return getRuleContexts<FeatParser::GcLiteralElementContext>();
}

FeatParser::GcLiteralElementContext* FeatParser::GcLiteralContext::gcLiteralElement(size_t i) {
  return getRuleContext<FeatParser::GcLiteralElementContext>(i);
}


size_t FeatParser::GcLiteralContext::getRuleIndex() const {
  return FeatParser::RuleGcLiteral;
}


std::any FeatParser::GcLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGcLiteral(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GcLiteralContext* FeatParser::gcLiteral() {
  GcLiteralContext *_localctx = _tracker.createInstance<GcLiteralContext>(_ctx, getState());
  enterRule(_localctx, 190, FeatParser::RuleGcLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1107);
    match(FeatParser::LBRACKET);
    setState(1109); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1108);
      gcLiteralElement();
      setState(1111); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FeatParser::NOTDEF || ((((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 127) != 0));
    setState(1113);
    match(FeatParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GcLiteralElementContext ------------------------------------------------------------------

FeatParser::GcLiteralElementContext::GcLiteralElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FeatParser::GlyphContext *> FeatParser::GcLiteralElementContext::glyph() {
  return getRuleContexts<FeatParser::GlyphContext>();
}

FeatParser::GlyphContext* FeatParser::GcLiteralElementContext::glyph(size_t i) {
  return getRuleContext<FeatParser::GlyphContext>(i);
}

tree::TerminalNode* FeatParser::GcLiteralElementContext::HYPHEN() {
  return getToken(FeatParser::HYPHEN, 0);
}

FeatParser::GclassContext* FeatParser::GcLiteralElementContext::gclass() {
  return getRuleContext<FeatParser::GclassContext>(0);
}


size_t FeatParser::GcLiteralElementContext::getRuleIndex() const {
  return FeatParser::RuleGcLiteralElement;
}


std::any FeatParser::GcLiteralElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGcLiteralElement(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GcLiteralElementContext* FeatParser::gcLiteralElement() {
  GcLiteralElementContext *_localctx = _tracker.createInstance<GcLiteralElementContext>(_ctx, getState());
  enterRule(_localctx, 192, FeatParser::RuleGcLiteralElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1121);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NOTDEF:
      case FeatParser::AXISUNIT:
      case FeatParser::CID:
      case FeatParser::ESCGNAME:
      case FeatParser::NAMELABEL:
      case FeatParser::EXTNAME: {
        enterOuterAlt(_localctx, 1);
        setState(1115);
        antlrcpp::downCast<GcLiteralElementContext *>(_localctx)->startg = glyph();
        setState(1118);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FeatParser::HYPHEN) {
          setState(1116);
          match(FeatParser::HYPHEN);
          setState(1117);
          antlrcpp::downCast<GcLiteralElementContext *>(_localctx)->endg = glyph();
        }
        break;
      }

      case FeatParser::LNAME:
      case FeatParser::GCLASS: {
        enterOuterAlt(_localctx, 2);
        setState(1120);
        gclass();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GclassContext ------------------------------------------------------------------

FeatParser::GclassContext::GclassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GclassContext::LNAME() {
  return getToken(FeatParser::LNAME, 0);
}

tree::TerminalNode* FeatParser::GclassContext::GCLASS() {
  return getToken(FeatParser::GCLASS, 0);
}


size_t FeatParser::GclassContext::getRuleIndex() const {
  return FeatParser::RuleGclass;
}


std::any FeatParser::GclassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGclass(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GclassContext* FeatParser::gclass() {
  GclassContext *_localctx = _tracker.createInstance<GclassContext>(_ctx, getState());
  enterRule(_localctx, 194, FeatParser::RuleGclass);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1123);
    _la = _input->LA(1);
    if (!(_la == FeatParser::LNAME

    || _la == FeatParser::GCLASS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlyphContext ------------------------------------------------------------------

FeatParser::GlyphContext::GlyphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FeatParser::GlyphNameContext* FeatParser::GlyphContext::glyphName() {
  return getRuleContext<FeatParser::GlyphNameContext>(0);
}

tree::TerminalNode* FeatParser::GlyphContext::CID() {
  return getToken(FeatParser::CID, 0);
}


size_t FeatParser::GlyphContext::getRuleIndex() const {
  return FeatParser::RuleGlyph;
}


std::any FeatParser::GlyphContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGlyph(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GlyphContext* FeatParser::glyph() {
  GlyphContext *_localctx = _tracker.createInstance<GlyphContext>(_ctx, getState());
  enterRule(_localctx, 196, FeatParser::RuleGlyph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1127);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FeatParser::NOTDEF:
      case FeatParser::AXISUNIT:
      case FeatParser::ESCGNAME:
      case FeatParser::NAMELABEL:
      case FeatParser::EXTNAME: {
        enterOuterAlt(_localctx, 1);
        setState(1125);
        glyphName();
        break;
      }

      case FeatParser::CID: {
        enterOuterAlt(_localctx, 2);
        setState(1126);
        match(FeatParser::CID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlyphNameContext ------------------------------------------------------------------

FeatParser::GlyphNameContext::GlyphNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GlyphNameContext::ESCGNAME() {
  return getToken(FeatParser::ESCGNAME, 0);
}

tree::TerminalNode* FeatParser::GlyphNameContext::NAMELABEL() {
  return getToken(FeatParser::NAMELABEL, 0);
}

tree::TerminalNode* FeatParser::GlyphNameContext::EXTNAME() {
  return getToken(FeatParser::EXTNAME, 0);
}

tree::TerminalNode* FeatParser::GlyphNameContext::AXISUNIT() {
  return getToken(FeatParser::AXISUNIT, 0);
}

tree::TerminalNode* FeatParser::GlyphNameContext::NOTDEF() {
  return getToken(FeatParser::NOTDEF, 0);
}


size_t FeatParser::GlyphNameContext::getRuleIndex() const {
  return FeatParser::RuleGlyphName;
}


std::any FeatParser::GlyphNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGlyphName(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GlyphNameContext* FeatParser::glyphName() {
  GlyphNameContext *_localctx = _tracker.createInstance<GlyphNameContext>(_ctx, getState());
  enterRule(_localctx, 198, FeatParser::RuleGlyphName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1129);
    _la = _input->LA(1);
    if (!(_la == FeatParser::NOTDEF || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 29) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

FeatParser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::LabelContext::NAMELABEL() {
  return getToken(FeatParser::NAMELABEL, 0);
}

tree::TerminalNode* FeatParser::LabelContext::MARK() {
  return getToken(FeatParser::MARK, 0);
}

tree::TerminalNode* FeatParser::LabelContext::AXISUNIT() {
  return getToken(FeatParser::AXISUNIT, 0);
}


size_t FeatParser::LabelContext::getRuleIndex() const {
  return FeatParser::RuleLabel;
}


std::any FeatParser::LabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitLabel(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::LabelContext* FeatParser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 200, FeatParser::RuleLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1131);
    _la = _input->LA(1);
    if (!(_la == FeatParser::MARK || _la == FeatParser::AXISUNIT

    || _la == FeatParser::NAMELABEL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TagContext ------------------------------------------------------------------

FeatParser::TagContext::TagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::TagContext::NAMELABEL() {
  return getToken(FeatParser::NAMELABEL, 0);
}

tree::TerminalNode* FeatParser::TagContext::EXTNAME() {
  return getToken(FeatParser::EXTNAME, 0);
}

tree::TerminalNode* FeatParser::TagContext::STRVAL() {
  return getToken(FeatParser::STRVAL, 0);
}

tree::TerminalNode* FeatParser::TagContext::AXISUNIT() {
  return getToken(FeatParser::AXISUNIT, 0);
}

tree::TerminalNode* FeatParser::TagContext::MARK() {
  return getToken(FeatParser::MARK, 0);
}


size_t FeatParser::TagContext::getRuleIndex() const {
  return FeatParser::RuleTag;
}


std::any FeatParser::TagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitTag(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::TagContext* FeatParser::tag() {
  TagContext *_localctx = _tracker.createInstance<TagContext>(_ctx, getState());
  enterRule(_localctx, 202, FeatParser::RuleTag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1133);
    _la = _input->LA(1);
    if (!(_la == FeatParser::MARK || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 201) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FixedNumContext ------------------------------------------------------------------

FeatParser::FixedNumContext::FixedNumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FixedNumContext::POINTNUM() {
  return getToken(FeatParser::POINTNUM, 0);
}

tree::TerminalNode* FeatParser::FixedNumContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}


size_t FeatParser::FixedNumContext::getRuleIndex() const {
  return FeatParser::RuleFixedNum;
}


std::any FeatParser::FixedNumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFixedNum(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FixedNumContext* FeatParser::fixedNum() {
  FixedNumContext *_localctx = _tracker.createInstance<FixedNumContext>(_ctx, getState());
  enterRule(_localctx, 204, FeatParser::RuleFixedNum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1135);
    _la = _input->LA(1);
    if (!(_la == FeatParser::POINTNUM

    || _la == FeatParser::NUM)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenNumContext ------------------------------------------------------------------

FeatParser::GenNumContext::GenNumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GenNumContext::NUM() {
  return getToken(FeatParser::NUM, 0);
}

tree::TerminalNode* FeatParser::GenNumContext::NUMOCT() {
  return getToken(FeatParser::NUMOCT, 0);
}

tree::TerminalNode* FeatParser::GenNumContext::NUMEXT() {
  return getToken(FeatParser::NUMEXT, 0);
}


size_t FeatParser::GenNumContext::getRuleIndex() const {
  return FeatParser::RuleGenNum;
}


std::any FeatParser::GenNumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGenNum(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GenNumContext* FeatParser::genNum() {
  GenNumContext *_localctx = _tracker.createInstance<GenNumContext>(_ctx, getState());
  enterRule(_localctx, 206, FeatParser::RuleGenNum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1137);
    _la = _input->LA(1);
    if (!(((((_la - 139) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 139)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureFileContext ------------------------------------------------------------------

FeatParser::FeatureFileContext::FeatureFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::FeatureFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::FeatureStatementContext *> FeatParser::FeatureFileContext::featureStatement() {
  return getRuleContexts<FeatParser::FeatureStatementContext>();
}

FeatParser::FeatureStatementContext* FeatParser::FeatureFileContext::featureStatement(size_t i) {
  return getRuleContext<FeatParser::FeatureStatementContext>(i);
}


size_t FeatParser::FeatureFileContext::getRuleIndex() const {
  return FeatParser::RuleFeatureFile;
}


std::any FeatParser::FeatureFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitFeatureFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::FeatureFileContext* FeatParser::featureFile() {
  FeatureFileContext *_localctx = _tracker.createInstance<FeatureFileContext>(_ctx, getState());
  enterRule(_localctx, 208, FeatParser::RuleFeatureFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1142);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 72629133657520992) != 0) || _la == FeatParser::LNAME

    || _la == FeatParser::GCLASS) {
      setState(1139);
      featureStatement();
      setState(1144);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1145);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementFileContext ------------------------------------------------------------------

FeatParser::StatementFileContext::StatementFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::StatementFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::StatementContext *> FeatParser::StatementFileContext::statement() {
  return getRuleContexts<FeatParser::StatementContext>();
}

FeatParser::StatementContext* FeatParser::StatementFileContext::statement(size_t i) {
  return getRuleContext<FeatParser::StatementContext>(i);
}


size_t FeatParser::StatementFileContext::getRuleIndex() const {
  return FeatParser::RuleStatementFile;
}


std::any FeatParser::StatementFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitStatementFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::StatementFileContext* FeatParser::statementFile() {
  StatementFileContext *_localctx = _tracker.createInstance<StatementFileContext>(_ctx, getState());
  enterRule(_localctx, 210, FeatParser::RuleStatementFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1150);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 72624735611005792) != 0) || _la == FeatParser::LNAME

    || _la == FeatParser::GCLASS) {
      setState(1147);
      statement();
      setState(1152);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1153);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvStatementFileContext ------------------------------------------------------------------

FeatParser::CvStatementFileContext::CvStatementFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::CvStatementFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::CvParameterStatementContext *> FeatParser::CvStatementFileContext::cvParameterStatement() {
  return getRuleContexts<FeatParser::CvParameterStatementContext>();
}

FeatParser::CvParameterStatementContext* FeatParser::CvStatementFileContext::cvParameterStatement(size_t i) {
  return getRuleContext<FeatParser::CvParameterStatementContext>(i);
}


size_t FeatParser::CvStatementFileContext::getRuleIndex() const {
  return FeatParser::RuleCvStatementFile;
}


std::any FeatParser::CvStatementFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitCvStatementFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::CvStatementFileContext* FeatParser::cvStatementFile() {
  CvStatementFileContext *_localctx = _tracker.createInstance<CvStatementFileContext>(_ctx, getState());
  enterRule(_localctx, 212, FeatParser::RuleCvStatementFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1158);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 413416372043808) != 0)) {
      setState(1155);
      cvParameterStatement();
      setState(1160);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1161);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseFileContext ------------------------------------------------------------------

FeatParser::BaseFileContext::BaseFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::BaseFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::BaseStatementContext *> FeatParser::BaseFileContext::baseStatement() {
  return getRuleContexts<FeatParser::BaseStatementContext>();
}

FeatParser::BaseStatementContext* FeatParser::BaseFileContext::baseStatement(size_t i) {
  return getRuleContext<FeatParser::BaseStatementContext>(i);
}


size_t FeatParser::BaseFileContext::getRuleIndex() const {
  return FeatParser::RuleBaseFile;
}


std::any FeatParser::BaseFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitBaseFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::BaseFileContext* FeatParser::baseFile() {
  BaseFileContext *_localctx = _tracker.createInstance<BaseFileContext>(_ctx, getState());
  enterRule(_localctx, 214, FeatParser::RuleBaseFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1166);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 5) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 5)) & 8646911284551352321) != 0)) {
      setState(1163);
      baseStatement();
      setState(1168);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1169);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HeadFileContext ------------------------------------------------------------------

FeatParser::HeadFileContext::HeadFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HeadFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::HeadStatementContext *> FeatParser::HeadFileContext::headStatement() {
  return getRuleContexts<FeatParser::HeadStatementContext>();
}

FeatParser::HeadStatementContext* FeatParser::HeadFileContext::headStatement(size_t i) {
  return getRuleContext<FeatParser::HeadStatementContext>(i);
}


size_t FeatParser::HeadFileContext::getRuleIndex() const {
  return FeatParser::RuleHeadFile;
}


std::any FeatParser::HeadFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHeadFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HeadFileContext* FeatParser::headFile() {
  HeadFileContext *_localctx = _tracker.createInstance<HeadFileContext>(_ctx, getState());
  enterRule(_localctx, 216, FeatParser::RuleHeadFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1174);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || _la == FeatParser::FONT_REVISION) {
      setState(1171);
      headStatement();
      setState(1176);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1177);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HheaFileContext ------------------------------------------------------------------

FeatParser::HheaFileContext::HheaFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::HheaFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::HheaStatementContext *> FeatParser::HheaFileContext::hheaStatement() {
  return getRuleContexts<FeatParser::HheaStatementContext>();
}

FeatParser::HheaStatementContext* FeatParser::HheaFileContext::hheaStatement(size_t i) {
  return getRuleContext<FeatParser::HheaStatementContext>(i);
}


size_t FeatParser::HheaFileContext::getRuleIndex() const {
  return FeatParser::RuleHheaFile;
}


std::any FeatParser::HheaFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitHheaFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::HheaFileContext* FeatParser::hheaFile() {
  HheaFileContext *_localctx = _tracker.createInstance<HheaFileContext>(_ctx, getState());
  enterRule(_localctx, 218, FeatParser::RuleHheaFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1182);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 15) != 0)) {
      setState(1179);
      hheaStatement();
      setState(1184);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1185);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VheaFileContext ------------------------------------------------------------------

FeatParser::VheaFileContext::VheaFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::VheaFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::VheaStatementContext *> FeatParser::VheaFileContext::vheaStatement() {
  return getRuleContexts<FeatParser::VheaStatementContext>();
}

FeatParser::VheaStatementContext* FeatParser::VheaFileContext::vheaStatement(size_t i) {
  return getRuleContext<FeatParser::VheaStatementContext>(i);
}


size_t FeatParser::VheaFileContext::getRuleIndex() const {
  return FeatParser::RuleVheaFile;
}


std::any FeatParser::VheaFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVheaFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VheaFileContext* FeatParser::vheaFile() {
  VheaFileContext *_localctx = _tracker.createInstance<VheaFileContext>(_ctx, getState());
  enterRule(_localctx, 220, FeatParser::RuleVheaFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1190);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & 7) != 0)) {
      setState(1187);
      vheaStatement();
      setState(1192);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1193);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GdefFileContext ------------------------------------------------------------------

FeatParser::GdefFileContext::GdefFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::GdefFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::GdefStatementContext *> FeatParser::GdefFileContext::gdefStatement() {
  return getRuleContexts<FeatParser::GdefStatementContext>();
}

FeatParser::GdefStatementContext* FeatParser::GdefFileContext::gdefStatement(size_t i) {
  return getRuleContext<FeatParser::GdefStatementContext>(i);
}


size_t FeatParser::GdefFileContext::getRuleIndex() const {
  return FeatParser::RuleGdefFile;
}


std::any FeatParser::GdefFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitGdefFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::GdefFileContext* FeatParser::gdefFile() {
  GdefFileContext *_localctx = _tracker.createInstance<GdefFileContext>(_ctx, getState());
  enterRule(_localctx, 222, FeatParser::RuleGdefFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1198);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 15) != 0)) {
      setState(1195);
      gdefStatement();
      setState(1200);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1201);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameFileContext ------------------------------------------------------------------

FeatParser::NameFileContext::NameFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::NameStatementContext *> FeatParser::NameFileContext::nameStatement() {
  return getRuleContexts<FeatParser::NameStatementContext>();
}

FeatParser::NameStatementContext* FeatParser::NameFileContext::nameStatement(size_t i) {
  return getRuleContext<FeatParser::NameStatementContext>(i);
}


size_t FeatParser::NameFileContext::getRuleIndex() const {
  return FeatParser::RuleNameFile;
}


std::any FeatParser::NameFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameFileContext* FeatParser::nameFile() {
  NameFileContext *_localctx = _tracker.createInstance<NameFileContext>(_ctx, getState());
  enterRule(_localctx, 224, FeatParser::RuleNameFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1206);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || _la == FeatParser::NAMEID) {
      setState(1203);
      nameStatement();
      setState(1208);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1209);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VmtxFileContext ------------------------------------------------------------------

FeatParser::VmtxFileContext::VmtxFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::VmtxFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::VmtxStatementContext *> FeatParser::VmtxFileContext::vmtxStatement() {
  return getRuleContexts<FeatParser::VmtxStatementContext>();
}

FeatParser::VmtxStatementContext* FeatParser::VmtxFileContext::vmtxStatement(size_t i) {
  return getRuleContext<FeatParser::VmtxStatementContext>(i);
}


size_t FeatParser::VmtxFileContext::getRuleIndex() const {
  return FeatParser::RuleVmtxFile;
}


std::any FeatParser::VmtxFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitVmtxFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::VmtxFileContext* FeatParser::vmtxFile() {
  VmtxFileContext *_localctx = _tracker.createInstance<VmtxFileContext>(_ctx, getState());
  enterRule(_localctx, 226, FeatParser::RuleVmtxFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1214);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || _la == FeatParser::VERT_ORIGIN_Y

    || _la == FeatParser::VERT_ADVANCE_Y) {
      setState(1211);
      vmtxStatement();
      setState(1216);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1217);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Os_2FileContext ------------------------------------------------------------------

FeatParser::Os_2FileContext::Os_2FileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::Os_2FileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::Os_2StatementContext *> FeatParser::Os_2FileContext::os_2Statement() {
  return getRuleContexts<FeatParser::Os_2StatementContext>();
}

FeatParser::Os_2StatementContext* FeatParser::Os_2FileContext::os_2Statement(size_t i) {
  return getRuleContext<FeatParser::Os_2StatementContext>(i);
}


size_t FeatParser::Os_2FileContext::getRuleIndex() const {
  return FeatParser::RuleOs_2File;
}


std::any FeatParser::Os_2FileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitOs_2File(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::Os_2FileContext* FeatParser::os_2File() {
  Os_2FileContext *_localctx = _tracker.createInstance<Os_2FileContext>(_ctx, getState());
  enterRule(_localctx, 228, FeatParser::RuleOs_2File);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1222);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 262143) != 0)) {
      setState(1219);
      os_2Statement();
      setState(1224);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1225);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatFileContext ------------------------------------------------------------------

FeatParser::StatFileContext::StatFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::StatFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::StatStatementContext *> FeatParser::StatFileContext::statStatement() {
  return getRuleContexts<FeatParser::StatStatementContext>();
}

FeatParser::StatStatementContext* FeatParser::StatFileContext::statStatement(size_t i) {
  return getRuleContext<FeatParser::StatStatementContext>(i);
}


size_t FeatParser::StatFileContext::getRuleIndex() const {
  return FeatParser::RuleStatFile;
}


std::any FeatParser::StatFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitStatFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::StatFileContext* FeatParser::statFile() {
  StatFileContext *_localctx = _tracker.createInstance<StatFileContext>(_ctx, getState());
  enterRule(_localctx, 230, FeatParser::RuleStatFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1230);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 102) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 102)) & 15) != 0)) {
      setState(1227);
      statStatement();
      setState(1232);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1233);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AxisValueFileContext ------------------------------------------------------------------

FeatParser::AxisValueFileContext::AxisValueFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AxisValueFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::AxisValueStatementContext *> FeatParser::AxisValueFileContext::axisValueStatement() {
  return getRuleContexts<FeatParser::AxisValueStatementContext>();
}

FeatParser::AxisValueStatementContext* FeatParser::AxisValueFileContext::axisValueStatement(size_t i) {
  return getRuleContext<FeatParser::AxisValueStatementContext>(i);
}


size_t FeatParser::AxisValueFileContext::getRuleIndex() const {
  return FeatParser::RuleAxisValueFile;
}


std::any FeatParser::AxisValueFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAxisValueFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AxisValueFileContext* FeatParser::axisValueFile() {
  AxisValueFileContext *_localctx = _tracker.createInstance<AxisValueFileContext>(_ctx, getState());
  enterRule(_localctx, 232, FeatParser::RuleAxisValueFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1238);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 201326593) != 0)) {
      setState(1235);
      axisValueStatement();
      setState(1240);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1241);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameEntryFileContext ------------------------------------------------------------------

FeatParser::NameEntryFileContext::NameEntryFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::NameEntryFileContext::EOF() {
  return getToken(FeatParser::EOF, 0);
}

std::vector<FeatParser::NameEntryStatementContext *> FeatParser::NameEntryFileContext::nameEntryStatement() {
  return getRuleContexts<FeatParser::NameEntryStatementContext>();
}

FeatParser::NameEntryStatementContext* FeatParser::NameEntryFileContext::nameEntryStatement(size_t i) {
  return getRuleContext<FeatParser::NameEntryStatementContext>(i);
}


size_t FeatParser::NameEntryFileContext::getRuleIndex() const {
  return FeatParser::RuleNameEntryFile;
}


std::any FeatParser::NameEntryFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitNameEntryFile(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::NameEntryFileContext* FeatParser::nameEntryFile() {
  NameEntryFileContext *_localctx = _tracker.createInstance<NameEntryFileContext>(_ctx, getState());
  enterRule(_localctx, 234, FeatParser::RuleNameEntryFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1246);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FeatParser::INCLUDE || _la == FeatParser::NAME) {
      setState(1243);
      nameEntryStatement();
      setState(1248);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1249);
    match(FeatParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtokContext ------------------------------------------------------------------

FeatParser::SubtokContext::SubtokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::SubtokContext::SUBSTITUTE() {
  return getToken(FeatParser::SUBSTITUTE, 0);
}

tree::TerminalNode* FeatParser::SubtokContext::SUBSTITUTE_v() {
  return getToken(FeatParser::SUBSTITUTE_v, 0);
}


size_t FeatParser::SubtokContext::getRuleIndex() const {
  return FeatParser::RuleSubtok;
}


std::any FeatParser::SubtokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitSubtok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::SubtokContext* FeatParser::subtok() {
  SubtokContext *_localctx = _tracker.createInstance<SubtokContext>(_ctx, getState());
  enterRule(_localctx, 236, FeatParser::RuleSubtok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1251);
    _la = _input->LA(1);
    if (!(_la == FeatParser::SUBSTITUTE

    || _la == FeatParser::SUBSTITUTE_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RevtokContext ------------------------------------------------------------------

FeatParser::RevtokContext::RevtokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::RevtokContext::REVERSE() {
  return getToken(FeatParser::REVERSE, 0);
}

tree::TerminalNode* FeatParser::RevtokContext::REVERSE_v() {
  return getToken(FeatParser::REVERSE_v, 0);
}


size_t FeatParser::RevtokContext::getRuleIndex() const {
  return FeatParser::RuleRevtok;
}


std::any FeatParser::RevtokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitRevtok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::RevtokContext* FeatParser::revtok() {
  RevtokContext *_localctx = _tracker.createInstance<RevtokContext>(_ctx, getState());
  enterRule(_localctx, 238, FeatParser::RuleRevtok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1253);
    _la = _input->LA(1);
    if (!(_la == FeatParser::REVERSE

    || _la == FeatParser::REVERSE_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnontokContext ------------------------------------------------------------------

FeatParser::AnontokContext::AnontokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::AnontokContext::ANON() {
  return getToken(FeatParser::ANON, 0);
}

tree::TerminalNode* FeatParser::AnontokContext::ANON_v() {
  return getToken(FeatParser::ANON_v, 0);
}


size_t FeatParser::AnontokContext::getRuleIndex() const {
  return FeatParser::RuleAnontok;
}


std::any FeatParser::AnontokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitAnontok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::AnontokContext* FeatParser::anontok() {
  AnontokContext *_localctx = _tracker.createInstance<AnontokContext>(_ctx, getState());
  enterRule(_localctx, 240, FeatParser::RuleAnontok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1255);
    _la = _input->LA(1);
    if (!(_la == FeatParser::ANON

    || _la == FeatParser::ANON_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumtokContext ------------------------------------------------------------------

FeatParser::EnumtokContext::EnumtokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::EnumtokContext::ENUMERATE() {
  return getToken(FeatParser::ENUMERATE, 0);
}

tree::TerminalNode* FeatParser::EnumtokContext::ENUMERATE_v() {
  return getToken(FeatParser::ENUMERATE_v, 0);
}


size_t FeatParser::EnumtokContext::getRuleIndex() const {
  return FeatParser::RuleEnumtok;
}


std::any FeatParser::EnumtokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitEnumtok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::EnumtokContext* FeatParser::enumtok() {
  EnumtokContext *_localctx = _tracker.createInstance<EnumtokContext>(_ctx, getState());
  enterRule(_localctx, 242, FeatParser::RuleEnumtok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1257);
    _la = _input->LA(1);
    if (!(_la == FeatParser::ENUMERATE

    || _la == FeatParser::ENUMERATE_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostokContext ------------------------------------------------------------------

FeatParser::PostokContext::PostokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::PostokContext::POSITION() {
  return getToken(FeatParser::POSITION, 0);
}

tree::TerminalNode* FeatParser::PostokContext::POSITION_v() {
  return getToken(FeatParser::POSITION_v, 0);
}


size_t FeatParser::PostokContext::getRuleIndex() const {
  return FeatParser::RulePostok;
}


std::any FeatParser::PostokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitPostok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::PostokContext* FeatParser::postok() {
  PostokContext *_localctx = _tracker.createInstance<PostokContext>(_ctx, getState());
  enterRule(_localctx, 244, FeatParser::RulePostok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1259);
    _la = _input->LA(1);
    if (!(_la == FeatParser::POSITION

    || _la == FeatParser::POSITION_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MarkligtokContext ------------------------------------------------------------------

FeatParser::MarkligtokContext::MarkligtokContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FeatParser::MarkligtokContext::MARKLIG() {
  return getToken(FeatParser::MARKLIG, 0);
}

tree::TerminalNode* FeatParser::MarkligtokContext::MARKLIG_v() {
  return getToken(FeatParser::MARKLIG_v, 0);
}


size_t FeatParser::MarkligtokContext::getRuleIndex() const {
  return FeatParser::RuleMarkligtok;
}


std::any FeatParser::MarkligtokContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FeatParserVisitor*>(visitor))
    return parserVisitor->visitMarkligtok(this);
  else
    return visitor->visitChildren(this);
}

FeatParser::MarkligtokContext* FeatParser::markligtok() {
  MarkligtokContext *_localctx = _tracker.createInstance<MarkligtokContext>(_ctx, getState());
  enterRule(_localctx, 246, FeatParser::RuleMarkligtok);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1261);
    _la = _input->LA(1);
    if (!(_la == FeatParser::MARKLIG

    || _la == FeatParser::MARKLIG_v)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void FeatParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  featparserParserInitialize();
#else
  ::antlr4::internal::call_once(featparserParserOnceFlag, featparserParserInitialize);
#endif
}
