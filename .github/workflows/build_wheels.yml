name: Build Python Wheels

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9a-z]+'

  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running workflow'
        required: true

jobs:
  build_wheels:
    name: Build Py3 Wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:

    - name: Log reason (manual run only)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Reason for triggering: ${{ github.event.inputs.reason }}"

    - name: Check out
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # unshallow fetch for setuptools-scm

    - name: Use MSBuild (Windows only)
      uses: microsoft/setup-msbuild@v1.0.2
      if: matrix.os == 'windows-latest'

    - name: Install Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install cibuildwheel

    - name: Build wheel
      run: |
        git config --global url.https://github.com/.insteadOf git://github.com/
        python -m cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: "cp36-*"
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_SKIP: "pp* cp*manylinux_i686 cp*manylinux_aarch64 cp*manylinux_ppc64le cp*manylinux_s390x cp*win32"
        CIBW_BEFORE_ALL_LINUX: "yum install -y libuuid-devel"

    - name: Build sdist (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: python setup.py sdist

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wheelstorage
        path: ./dist/*
        if-no-files-found: error
        retention-days: 30

  publish_release:
    name: Publish Release
    needs: build_wheels
    runs-on: ubuntu-latest

    steps:
    - name: Get date & flat tag
      id: date_tag
      run: |
        export DATE=$(TZ=US/Pacific date +'%Y-%m-%d')
        echo $DATE
        export FLAT_TAG=$(echo ${GITHUB_REF##*/} | sed 's/\.//g')
        echo $FLAT_TAG
        echo ::set-output name=TODAY::$DATE
        echo ::set-output name=VERSION::$FLAT_TAG
      shell: bash

    - name: Download release assets
      uses: actions/download-artifact@v2
      with:
        name: wheelstorage
        path: dist

    - name: Publish dist(s) to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        body: '[Release Notes](https://github.com/adobe-type-tools/afdko/blob/develop/NEWS.md#${{ steps.date_tag.outputs.VERSION }}-released-${{ steps.date_tag.outputs.TODAY }})'
        prerelease: true
        files: ./dist/*
