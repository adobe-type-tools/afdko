name: AFDKO Test Suite

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'

  pull_request:
    branches: [develop]
    paths-ignore:
      - 'docs/**'
      - '**.md'

  schedule:
    - cron: '0 11 1 * *'

  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running workflow'
        required: true

jobs:
  run_tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        exclude:
          - os: macos-latest
            python-version: 3.6
          - os: macos-latest
            python-version: 3.7
          - os: macos-latest
            python-version: 3.8
          - os: windows-latest
            python-version: 3.6
          - os: windows-latest
            python-version: 3.7
          - os: windows-latest
            python-version: 3.8

    steps:

    - name: Log reason (manual run only)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Reason for triggering: ${{ github.event.inputs.reason }}"

    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Use MSBuild (Windows)
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        vs-version: '[16.4,]'
      if: matrix.os == 'windows-latest'

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt

    - name: Set Windows generator to Visual Studio
      run: |
        echo "CMAKE_GENERATOR=Visual Studio 16 2019" >> $GITHUB_ENV
        echo "CMAKE_GENERATOR_PLATFORM=x64" >> $GITHUB_ENV
      shell: bash
      if: matrix.os == 'windows-latest'

    - name: Install AFDKO (Other)
      run: |
        git config --global url.https://github.com/.insteadOf git://github.com/
        pip install .
        pip freeze --all
      shell: bash

    - name: Lint Python code with flake8 using .flake8 config file
      run: |
        flake8 . --count --show-source --statistics --config=.flake8

    - name: Lint C code with cpplint using script (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        ./.run_cpplint.sh

    - name: Test with pytest
      run: |
        pytest --no-cov tests
